#include <cassert>
#include <cstdlib>
#include <pthread.h>
#include <semaphore.h>
#include <cstdio>
#include <cstring>
#include <cstdint>
#include <cerrno>

#include "lib/p_srr.h"

#ifdef USE_MESSIP
#define MESSIP_MGR_HOST		NULL
#define MESSIP_MAX_ASYNC_MSGS	0
static messip_cnx_t *cnx;
#endif /* USE_MESSIP */

static pthread_once_t p_init_control = PTHREAD_ONCE_INIT;

static void p_init(void) {
#ifdef USE_MESSIP
    messip_init();
    if ((cnx = messip_connect(MESSIP_MGR_HOST, MESSIP_NOTIMEOUT)) == NULL) {
	perror("messip_connect()");
    }
#endif /* USE_MESSIP */
#ifdef USE_SRRMOD
    if (SrrReg() == -1) {
	perror("SrrReg()");
    }
#endif /* USE_SRRMOD */
}

#ifdef USE_SRRMOD
static void
srr_receiver_cleanup(void *arg) {
    p_name_attach_t *attach = (p_name_attach_t *) arg;

    SrrNameDetach(0, attach->srr.name_id);
    free(attach->srr.msg);
    attach->srr.msg = NULL;
}

static void *
srr_receiver (void *arg) {
    p_name_attach_t *attach = (p_name_attach_t *) arg;

    attach->srr.name_id = SrrNameAttach(0, attach->path);
    if (attach->srr.name_id == -1) {
	perror("SrrNameAttach()");
	return NULL;
    }

    attach->srr.me = SrrNameLocate(0, attach->path, 0, NULL);

    pthread_cleanup_push(srr_receiver_cleanup, arg);

    sem_post(&attach->attach_protocol);

    sem_wait(&attach->msgsize.defined);

    attach->srr.msg = malloc(attach->bytes);
    assert(attach->srr.msg);

    for(;;) {
	size_t size = attach->bytes;

	attach->srr.from = SrrReceive(0, attach->srr.msg, &size);

	pthread_mutex_lock(&attach->process_msg);

	memcpy(attach->msg, attach->srr.msg, size);
	sem_post(&attach->received);

	sem_wait(&attach->reply_ready);
	attach->reply_ret = SrrReply(attach->srr.from, attach->rmsg, attach->rbytes);

	sem_post(&attach->replied);

	pthread_mutex_unlock(&attach->process_msg);
    }

    pthread_cleanup_pop(0);

    return NULL;
}
#endif /* USE_SRRMOD */

#ifdef USE_MESSIP
static void
messip_receiver_cleanup(void *arg) {
    p_name_attach_t *attach = (p_name_attach_t *) arg;

    messip_channel_delete(attach->messip.channel, MESSIP_NOTIMEOUT);
    free(attach->messip.msg);
    attach->messip.msg = NULL;
}

static void *
messip_receiver (void *arg) {
    p_name_attach_t *attach = (p_name_attach_t *) arg;

    attach->messip.channel = messip_channel_create(cnx, attach->path, MESSIP_NOTIMEOUT, MESSIP_MAX_ASYNC_MSGS);
    if(attach->messip.channel == NULL) {
	perror("messip_channel_create()");
	return NULL;
    }

    pthread_cleanup_push(messip_receiver_cleanup, arg);

    sem_post(&attach->attach_protocol);

    sem_wait(&attach->msgsize.defined);

    attach->messip.msg = malloc(attach->bytes);
    assert(attach->messip.msg);

    for(;;) {
	int32_t type, subtype;

	attach->messip.index = messip_receive(attach->messip.channel,
		&type, &subtype,
		attach->messip.msg, attach->bytes, MESSIP_NOTIMEOUT);

	if (attach->messip.index != 0) {
	    continue;
	}

	pthread_mutex_lock(&attach->process_msg);

	memcpy(attach->msg, attach->messip.msg, attach->messip.channel->datalen);
	sem_post(&attach->received);

	sem_wait(&attach->reply_ready);
	attach->reply_ret = messip_reply(attach->messip.channel,
		attach->messip.index, 0,
		attach->rmsg, attach->rbytes,
		MESSIP_NOTIMEOUT);

	sem_post(&attach->replied);

	pthread_mutex_unlock(&attach->process_msg);
    }

    pthread_cleanup_pop(0);

    return NULL;
}
#endif /* USE_MESSIP */

#ifdef USE_QNXMSG
static void
qnxmsg_receiver_cleanup(void *arg) {
    p_name_attach_t *attach = (p_name_attach_t *) arg;

    name_detach(attach->qnxmsg.na, 0);
    free(attach->qnxmsg.msg);
    attach->qnxmsg.msg = NULL;
}

static void *
qnxmsg_receiver (void *arg) {
    p_name_attach_t *attach = (p_name_attach_t *) arg;

    attach->qnxmsg.na = name_attach(NULL, attach->path, NAME_FLAG_ATTACH_GLOBAL);
    if (attach->qnxmsg.na == NULL) {
	perror("name_attach()");
	return NULL;
    }

    pthread_cleanup_push(qnxmsg_receiver_cleanup, arg);

    sem_post(&attach->attach_protocol);

    sem_wait(&attach->msgsize.defined);

    attach->qnxmsg.msg = malloc(sizeof(struct _pulse) + attach->bytes);
    assert(attach->qnxmsg.msg);

    for(;;) {
	int rcvid;
	struct _msg_info info;
	struct _pulse *hdr = (struct _pulse *) attach->qnxmsg.msg;

	rcvid = MsgReceive(attach->qnxmsg.na->chid, attach->qnxmsg.msg, attach->bytes, &info);

	if (rcvid == -1) {
		perror("MsgReceive()");
		return NULL;
	}

	if (rcvid == 0) {/* Pulse received */
		switch (hdr->code) {
			case _PULSE_CODE_DISCONNECT:
				/*
				 * A client disconnected all its connections (called
				 * name_close() for each name_open() of our name) or
				 * terminated
				 */
				ConnectDetach(hdr->scoid);
				break;
			case _PULSE_CODE_UNBLOCK:
				/*
				 * REPLY blocked client wants to unblock (was hit by
				 * a signal or timed out).  It's up to you if you
				 * reply now or later.
				 */
				break;
			default:
				/*
				 * A pulse sent by one of your processes or a
				 * _PULSE_CODE_COIDDEATH or _PULSE_CODE_THREADDEATH 
				 * from the kernel?
				 */
				break;
		}
		continue;
	}

	/* A QNX IO message received, reject */
	if (hdr->type >= _IO_BASE && hdr->type <= _IO_MAX) {
		MsgError(rcvid, ENOSYS);
		continue;
	}

	pthread_mutex_lock(&attach->process_msg);

	memcpy(attach->msg, ((char *) attach->qnxmsg.msg)+sizeof(struct _pulse), info.msglen);
	sem_post(&attach->received);

	sem_wait(&attach->reply_ready);
	attach->reply_ret = MsgReply(rcvid, EOK, attach->rmsg, attach->rbytes);

	sem_post(&attach->replied);

	pthread_mutex_unlock(&attach->process_msg);
    }

    pthread_cleanup_pop(0);

    return NULL;
}
#endif /* USE_QNXMSG */

p_name_attach_t *
p_name_attach(const char *path) {
    p_name_attach_t *attach;

    assert(path);

    pthread_once(&p_init_control, p_init);

    attach = (p_name_attach_t *) malloc(sizeof(p_name_attach_t));
    assert(attach);

    attach->path = strdup(path);

    sem_init(&attach->msgsize.defined, 0, 0);
    attach->msgsize.attached = 0;

    pthread_mutex_init(&attach->process_msg, NULL);

    sem_init(&attach->received, 0, 0);
    sem_init(&attach->reply_ready, 0, 0);
    sem_init(&attach->replied, 0, 0);

    sem_init(&attach->attach_protocol, 0, P_SRR_PROTOCOLS_SUPPORTED);

#ifdef USE_SRRMOD
    pthread_create(&attach->srr.srr_thread, NULL, srr_receiver, (void *) attach); 
#endif /* USE_SRRMOD */
#ifdef USE_MESSIP
    pthread_create(&attach->messip.messip_thread, NULL, messip_receiver, (void *) attach); 
#endif /* USE_MESSIP */
#ifdef USE_QNXMSG
    pthread_create(&attach->qnxmsg.qnxmsg_thread, NULL, qnxmsg_receiver, (void *) attach); 
#endif /* USE_QNXMSG */

    sem_wait(&attach->attach_protocol);

    return attach;
}

int
p_name_detach(p_name_attach_t * attach) {

#ifdef USE_SRRMOD
    pthread_cancel(attach->srr.srr_thread);
    SrrSend(attach->srr.me, NULL, NULL, 0, 0);
#endif /* USE_SRRMOD */
#ifdef USE_MESSIP
    pthread_cancel(attach->messip.messip_thread);
#endif /* USE_MESSIP */	
#ifdef USE_QNXMSG
	pthread_cancel(attach->qnxmsg.qnxmsg_thread);
#endif /* USE_QNXMSG */

#ifdef USE_SRRMOD
    pthread_join(attach->srr.srr_thread, NULL);
#endif /* USE_SRRMOD */
#ifdef USE_MESSIP
    pthread_join(attach->messip.messip_thread, NULL);
#endif /* USE_MESSIP */	
#ifdef USE_QNXMSG
	pthread_join(attach->qnxmsg.qnxmsg_thread, NULL);
#endif /* USE_QNXMSG */

#ifdef USE_SRRMOD
    assert(!attach->srr.msg);
#endif /* USE_SRRMOD */
#ifdef USE_MESSIP
    assert(!attach->messip.msg);
#endif /* USE_MESSIP */	
#ifdef USE_QNXMSG
	assert(!attach->qnxmsg.msg);
#endif /* USE_QNXMSG */

    pthread_mutex_destroy(&attach->process_msg);
    sem_destroy(&attach->received);
    sem_destroy(&attach->reply_ready);
    sem_destroy(&attach->replied);
    sem_destroy(&attach->attach_protocol);
    sem_destroy(&attach->msgsize.defined);

    free(attach->path);

    free(attach);

    return 0;
}

p_channel_t *
p_name_open(const char *path)
{
    p_channel_t *channel;

    assert(path);

    pthread_once(&p_init_control, p_init);

    channel = (p_channel_t *) malloc(sizeof(p_channel_t));
    assert(channel);

#ifdef USE_SRRMOD
    channel->node_id.pid = SrrNameLocate(0, path, 0, NULL);
    if (channel->node_id.pid != -1) {
	channel->protocol = P_SRR_SRRMOD_PROTOCOL;
	return channel;
    }
#endif /* USE_SRRMOD */
#ifdef USE_MESSIP
    channel->node_id.messip_channel = messip_channel_connect(cnx, path, MESSIP_NOTIMEOUT);
    if (channel->node_id.messip_channel) {
	channel->protocol = P_SRR_MESSIP_PROTOCOL;
	return channel;
    }
#endif /* USE_MESSIP */	
#ifdef USE_QNXMSG
	channel->node_id.fd = name_open(path, NAME_FLAG_ATTACH_GLOBAL);
	if (channel->node_id.fd >= 0) {
		channel->protocol = P_SRR_QNXMSG_PROTOCOL;
		return channel;
	}
#endif /* USE_QNXMSG */

    free(channel);
    return NULL;
}

int
p_name_close(p_channel_t *channel) {

    int ret = -1;

    if(!channel) {
	errno = EBADF;
	return -1;
    }

    switch(channel->protocol) {
#ifdef USE_SRRMOD
	case P_SRR_SRRMOD_PROTOCOL:
	    ret = 0;
	    break;
#endif /* USE_SRRMOD */
#ifdef USE_MESSIP
	case P_SRR_MESSIP_PROTOCOL:
	    ret = messip_channel_disconnect(channel->node_id.messip_channel,
		    MESSIP_NOTIMEOUT);
	    break;
#endif /* USE_MESSIP */	
#ifdef USE_QNXMSG
	case P_SRR_QNXMSG_PROTOCOL:
	    ret = name_close(channel->node_id.fd);
	    break;
#endif /* USE_QNXMSG */	
    }

    free(channel);
    return ret;
}

int
p_MsgSend(p_channel_t *channel, const void *smsg, int sbytes, void *rmsg, int rbytes) {

    int ret;

    switch(channel->protocol) {
#ifdef USE_SRRMOD
	case P_SRR_SRRMOD_PROTOCOL:
	    ret = SrrSend(channel->node_id.pid, (void *) smsg, rmsg, sbytes, rbytes);
	    break;
#endif /* USE_SRRMOD */
#ifdef USE_MESSIP
	case P_SRR_MESSIP_PROTOCOL:
	    {
	    int32_t answer;
		ret = messip_send(channel->node_id.messip_channel, 0, 0,
				(void *) smsg, sbytes,
				&answer, rmsg, rbytes,
				MESSIP_NOTIMEOUT);
	    }
	    break;
#endif /* USE_MESSIP */	
#ifdef USE_QNXMSG
	case P_SRR_QNXMSG_PROTOCOL:
		ret = MsgSend(channel->node_id.fd,
				smsg, sbytes, rmsg, rbytes);
		break;
#endif /* USE_QNXMSG */
	default:
	    ret = -1;
    }

    return ret;
}

int
p_MsgReceive(p_name_attach_t *attach, void * msg, int bytes) {

    attach->bytes = bytes;
    attach->msg = msg;

    if (!attach->msgsize.attached) {
	int i = P_SRR_PROTOCOLS_SUPPORTED;
	while(i--) {
	    sem_post(&attach->msgsize.defined);
	}
	attach->msgsize.attached = 1;
    }

    sem_wait(&attach->received);

    return 0;
}

int
p_MsgReply(p_name_attach_t *attach, void * msg, int bytes) {

    attach->rmsg = msg;
    attach->rbytes = bytes;

    sem_post(&attach->reply_ready);

    sem_wait(&attach->replied);

    return (attach->reply_ret);
}
