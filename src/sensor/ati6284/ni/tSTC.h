/* ! \file include/sensor/ati6284/ni/tSTC.h
    * \brief plik nag��wkowy NI
    * Ostatnia modyfikacja: 04.2006 */
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tSTC_h___
#define ___tSTC_h___

//!< includes
#ifndef ___nimdbg_tStatus2_h___
#include "tStatus2.h"
#endif


#include "osiBus.h"

class tSTC
{
public:
	//!< ---------------------------------------------------------------------------
	//!< IO Strategies
	//!< ---------------------------------------------------------------------------
	class tReg16IODirect16
	{
	public:
		inline void write(
			tBusSpaceReference addrSpace,
			u32 offset,
			u16 value,
			nMDBG::tStatus2* statusChain = NULL);
		
		inline u16 read(
			tBusSpaceReference addrSpace,
			u32 offset,
			nMDBG::tStatus2* statusChain = NULL);
	};
	
	class tReg16IOWindowed16
	{
	public:
		enum {
			kAddressOffset = 0,
			kDataOffset = 2,
		};
		
		inline void write(
			tBusSpaceReference addrSpace,
			u32 offset,
			u16 value,
			nMDBG::tStatus2* statusChain = NULL);
		
		inline u16 read(
			tBusSpaceReference addrSpace,
			u32 offset,
			nMDBG::tStatus2* statusChain = NULL);
	};
	
	class tReg32IOWindowed16
	{
	public:
		enum {
			kAddressOffset = 0,
			kDataOffset = 2,
		};
		inline void write(
			tBusSpaceReference addrSpace,
			u32 offset,
			u32 value,
			nMDBG::tStatus2* statusChain = NULL);
		
		inline u32 read(
			tBusSpaceReference addrSpace,
			u32 offset,
			nMDBG::tStatus2* statusChain = NULL);
	};
	
	//!< ---------------------------------------------------------------------------
	//!<AI_Command_1
	//!< ---------------------------------------------------------------------------
	class tAI_Command_1 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x8,
			kId     = 0
		};
		tAI_Command_1();


		typedef enum {
			kRegisterId                          = 0,
			kAI_CONVERT_PulseId                  = 1,
			kAI_SC_TC_PulseId                    = 2,
			kAI_LOCALMUX_CLK_PulseId             = 3,
			kAI_EXTMUX_CLK_PulseId               = 4,
			kAI_SCAN_IN_PROG_PulseId             = 5,
			kAI_SC_LoadId                        = 6,
			kAI_SC_ArmId                         = 7,
			kAI_DIV_LoadId                       = 8,
			kAI_DIV_ArmId                        = 9,
			kAI_SI_LoadId                        = 10,
			kAI_SI_ArmId                         = 11,
			kAI_SI2_LoadId                       = 12,
			kAI_SI2_ArmId                        = 13,
			kAI_DisarmId                         = 14,
			kAI_Analog_Trigger_ResetId           = 15
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Command_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_Command_1& setAI_CONVERT_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_CONVERT_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_CONVERT_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_CONVERT_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SC_TC_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_TC_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_TC_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_TC_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_LOCALMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_LOCALMUX_CLK_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_LOCALMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_LOCALMUX_CLK_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_EXTMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_EXTMUX_CLK_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_EXTMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_EXTMUX_CLK_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SCAN_IN_PROG_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SCAN_IN_PROG_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SCAN_IN_PROG_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SCAN_IN_PROG_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SC_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SC_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_DIV_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_DIV_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_DIV_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_DIV_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_DIV_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_DIV_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_DIV_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_DIV_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SI_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SI_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SI2_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI2_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI2_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI2_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_SI2_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI2_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI2_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI2_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Disarm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Disarm(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_1& setAI_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Command_2
	//!< ---------------------------------------------------------------------------
	class tAI_Command_2 : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0x8,
			kId     = 1
		};
		tAI_Command_2();


		typedef enum {
			kRegisterId                          = 0,
			kAI_START1_PulseId                   = 1,
			kAI_START2_PulseId                   = 2,
			kAI_START_PulseId                    = 3,
			kAI_STOP_PulseId                     = 4,
			kAI_SC_Switch_Load_On_TCId           = 5,
			kAI_SI_Switch_Load_On_TCId           = 8,
			kAI_SI_Switch_Load_On_STOPId         = 9,
			kAI_SI_Switch_Load_On_SC_TCId        = 10,
			kAI_SC_Save_TraceId                  = 11,
			kAI_START1_DisableId                 = 12,
			kAI_End_On_End_Of_ScanId             = 14,
			kAI_End_On_SC_TCId                   = 15
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Command_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_Command_2& setAI_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START1_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START1_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_START2_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START2_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START2_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_START_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_STOP_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_STOP_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_STOP_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_SC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_SI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_SI_Switch_Load_On_STOP(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Switch_Load_On_STOP(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Switch_Load_On_STOP(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI_Switch_Load_On_STOP(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_SI_Switch_Load_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Switch_Load_On_SC_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Switch_Load_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI_Switch_Load_On_SC_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_SC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_Save_Trace(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_Save_Trace(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_START1_Disable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START1_Disable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Disable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START1_Disable(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_End_On_End_Of_Scan(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_End_On_End_Of_Scan(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_End_On_End_Of_Scan(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_End_On_End_Of_Scan(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Command_2& setAI_End_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_End_On_SC_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_End_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_End_On_SC_TC(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< Interrupt_A_Ack
	//!< ---------------------------------------------------------------------------
	class tInterrupt_A_Ack : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0x4,
			kId     = 2
		};
		tInterrupt_A_Ack();


		typedef enum {
			kRegisterId                          = 0,
			kG0_Gate_Error_ConfirmId             = 6,
			kG0_TC_Error_ConfirmId               = 7,
			kAI_SC_TC_Error_ConfirmId            = 8,
			kAI_SC_TC_Interrupt_AckId            = 9,
			kAI_START1_Interrupt_AckId           = 10,
			kAI_START2_Interrupt_AckId           = 11,
			kAI_START_Interrupt_AckId            = 12,
			kAI_STOP_Interrupt_AckId             = 13,
			kAI_Error_Interrupt_AckId            = 14,
			kG0_TC_Interrupt_AckId               = 15,
			kG0_Gate_Interrupt_AckId             = 16
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tInterrupt_A_Ack& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tInterrupt_A_Ack& setG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setAI_SC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setAI_SC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setAI_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START1_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START1_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setAI_START2_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START2_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START2_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setAI_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setAI_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_STOP_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_STOP_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setAI_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Error_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Error_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Ack& setG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< Interrupt_A_Enable
	//!< ---------------------------------------------------------------------------
	class tInterrupt_A_Enable : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x49,
			kId     = 3
		};
		tInterrupt_A_Enable();


		typedef enum {
			kRegisterId                          = 0,
			kAI_SC_TC_Interrupt_EnableId         = 1,
			kAI_START1_Interrupt_EnableId        = 2,
			kAI_START2_Interrupt_EnableId        = 3,
			kAI_START_Interrupt_EnableId         = 4,
			kAI_STOP_Interrupt_EnableId          = 5,
			kAI_Error_Interrupt_EnableId         = 6,
			kG0_TC_Interrupt_EnableId            = 7,
			kAI_FIFO_Interrupt_EnableId          = 8,
			kG0_Gate_Interrupt_EnableId          = 9,
			kPass_Thru_0_Interrupt_EnableId      = 10
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tInterrupt_A_Enable& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tInterrupt_A_Enable& setAI_SC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SC_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_SC_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setAI_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START1_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START1_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setAI_START2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START2_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START2_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setAI_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setAI_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_STOP_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_STOP_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setAI_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Error_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Error_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setG0_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getG0_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readG0_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setAI_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_FIFO_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_FIFO_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setG0_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getG0_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readG0_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_A_Enable& setPass_Thru_0_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getPass_Thru_0_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writePass_Thru_0_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readPass_Thru_0_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< Second_Irq_A_Enable
	//!< ---------------------------------------------------------------------------
	class tSecond_Irq_A_Enable : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x4a,
			kId     = 4
		};
		tSecond_Irq_A_Enable();


		typedef enum {
			kRegisterId                          = 0,
			kAI_SC_TC_Second_Irq_EnableId        = 1,
			kAI_START1_Second_Irq_EnableId       = 2,
			kAI_START2_Second_Irq_EnableId       = 3,
			kAI_START_Second_Irq_EnableId        = 4,
			kAI_STOP_Second_Irq_EnableId         = 5,
			kAI_Error_Second_Irq_EnableId        = 6,
			kG0_TC_Second_Irq_EnableId           = 7,
			kAI_FIFO_Second_Irq_EnableId         = 8,
			kG0_Gate_Second_Irq_EnableId         = 9,
			kPass_Thru_0_Second_Irq_EnableId     = 10
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tSecond_Irq_A_Enable& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tSecond_Irq_A_Enable& setAI_SC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setAI_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START1_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START1_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setAI_START2_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START2_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START2_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setAI_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setAI_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_STOP_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_STOP_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setAI_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Error_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Error_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setG0_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setAI_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_FIFO_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_FIFO_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setG0_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gate_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_A_Enable& setPass_Thru_0_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getPass_Thru_0_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writePass_Thru_0_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readPass_Thru_0_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Personal
	//!< ---------------------------------------------------------------------------
	class tAI_Personal : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x4d,
			kId     = 5
		};
		tAI_Personal();


		typedef enum {
			kRegisterId                          = 0,
			kAI_AIFREQ_PolarityId                = 5,
			kAI_LOCALMUX_CLK_Pulse_WidthId       = 6,
			kAI_EXTMUX_CLK_Pulse_WidthId         = 7,
			kAI_Overrun_ModeId                   = 8,
			kAI_FIFO_Flags_PolarityId            = 9,
			kAI_CONVERT_Original_PulseId         = 10,
			kAI_CONVERT_Pulse_WidthId            = 11,
			kAI_CONVERT_Pulse_TimebaseId         = 12,
			kAI_SHIFTIN_PolarityId               = 13,
			kAI_SOC_PolarityId                   = 14,
			kAI_EOC_PolarityId                   = 15,
			kAI_SHIFTIN_Pulse_WidthId            = 16
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Personal& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		typedef enum {
			kAI_AIFREQ_PolarityActive_High       = 0,
			kAI_AIFREQ_PolarityActive_Low        = 1,
		} tAI_AIFREQ_Polarity;
		inline tAI_Personal& setAI_AIFREQ_Polarity(tAI_AIFREQ_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_AIFREQ_Polarity getAI_AIFREQ_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_AIFREQ_Polarity(tAI_AIFREQ_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_AIFREQ_Polarity readAI_AIFREQ_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_LOCALMUX_CLK_Pulse_WidthAbout_2_Clock_Periods       = 0,
			kAI_LOCALMUX_CLK_Pulse_WidthAbout_1_Clock_Period      = 1,
		} tAI_LOCALMUX_CLK_Pulse_Width;
		inline tAI_Personal& setAI_LOCALMUX_CLK_Pulse_Width(tAI_LOCALMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_LOCALMUX_CLK_Pulse_Width getAI_LOCALMUX_CLK_Pulse_Width(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_LOCALMUX_CLK_Pulse_Width(tAI_LOCALMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_LOCALMUX_CLK_Pulse_Width readAI_LOCALMUX_CLK_Pulse_Width(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_EXTMUX_CLK_Pulse_Width45_Clock_Periods  = 0,
			kAI_EXTMUX_CLK_Pulse_WidthEq_LOCALMUX_CLK_Pulse_Width             = 1,
		} tAI_EXTMUX_CLK_Pulse_Width;
		inline tAI_Personal& setAI_EXTMUX_CLK_Pulse_Width(tAI_EXTMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_EXTMUX_CLK_Pulse_Width getAI_EXTMUX_CLK_Pulse_Width(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_EXTMUX_CLK_Pulse_Width(tAI_EXTMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_EXTMUX_CLK_Pulse_Width readAI_EXTMUX_CLK_Pulse_Width(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_Overrun_ModeSOC_To_EOC        = 0,
			kAI_Overrun_ModeSOC_To_SHIFTIN_Trailing_Edge              = 1,
		} tAI_Overrun_Mode;
		inline tAI_Personal& setAI_Overrun_Mode(tAI_Overrun_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_Overrun_Mode getAI_Overrun_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Overrun_Mode(tAI_Overrun_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Overrun_Mode readAI_Overrun_Mode(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_FIFO_Flags_PolarityActive_Low        = 0,
			kAI_FIFO_Flags_PolarityActive_High       = 1,
		} tAI_FIFO_Flags_Polarity;
		inline tAI_Personal& setAI_FIFO_Flags_Polarity(tAI_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_FIFO_Flags_Polarity getAI_FIFO_Flags_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_FIFO_Flags_Polarity(tAI_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_FIFO_Flags_Polarity readAI_FIFO_Flags_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Personal& setAI_CONVERT_Original_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_CONVERT_Original_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_CONVERT_Original_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_CONVERT_Original_Pulse(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_CONVERT_Pulse_WidthAbout_2_Clock_Periods       = 0,
			kAI_CONVERT_Pulse_WidthAbout_1_Clock_Period      = 1,
		} tAI_CONVERT_Pulse_Width;
		inline tAI_Personal& setAI_CONVERT_Pulse_Width(tAI_CONVERT_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_CONVERT_Pulse_Width getAI_CONVERT_Pulse_Width(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_CONVERT_Pulse_Width(tAI_CONVERT_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_CONVERT_Pulse_Width readAI_CONVERT_Pulse_Width(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_CONVERT_Pulse_TimebasePulse_Width       = 0,
			kAI_CONVERT_Pulse_TimebaseOriginal_Pulse    = 1,
		} tAI_CONVERT_Pulse_Timebase;
		inline tAI_Personal& setAI_CONVERT_Pulse_Timebase(tAI_CONVERT_Pulse_Timebase fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_CONVERT_Pulse_Timebase getAI_CONVERT_Pulse_Timebase(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_CONVERT_Pulse_Timebase(tAI_CONVERT_Pulse_Timebase fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_CONVERT_Pulse_Timebase readAI_CONVERT_Pulse_Timebase(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SHIFTIN_PolarityActive_Low        = 0,
			kAI_SHIFTIN_PolarityActive_High       = 1,
		} tAI_SHIFTIN_Polarity;
		inline tAI_Personal& setAI_SHIFTIN_Polarity(tAI_SHIFTIN_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SHIFTIN_Polarity getAI_SHIFTIN_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SHIFTIN_Polarity(tAI_SHIFTIN_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SHIFTIN_Polarity readAI_SHIFTIN_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SOC_PolarityRising_Edge       = 0,
			kAI_SOC_PolarityFalling_Edge      = 1,
		} tAI_SOC_Polarity;
		inline tAI_Personal& setAI_SOC_Polarity(tAI_SOC_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SOC_Polarity getAI_SOC_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SOC_Polarity(tAI_SOC_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SOC_Polarity readAI_SOC_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_EOC_PolarityRising_Edge       = 0,
			kAI_EOC_PolarityFalling_Edge      = 1,
		} tAI_EOC_Polarity;
		inline tAI_Personal& setAI_EOC_Polarity(tAI_EOC_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_EOC_Polarity getAI_EOC_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_EOC_Polarity(tAI_EOC_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_EOC_Polarity readAI_EOC_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SHIFTIN_Pulse_WidthAbout_1_Clock_Period      = 0,
			kAI_SHIFTIN_Pulse_WidthAbout_2_Clock_Periods       = 1,
		} tAI_SHIFTIN_Pulse_Width;
		inline tAI_Personal& setAI_SHIFTIN_Pulse_Width(tAI_SHIFTIN_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SHIFTIN_Pulse_Width getAI_SHIFTIN_Pulse_Width(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SHIFTIN_Pulse_Width(tAI_SHIFTIN_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SHIFTIN_Pulse_Width readAI_SHIFTIN_Pulse_Width(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Mode_1
	//!< ---------------------------------------------------------------------------
	class tAI_Mode_1 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xc,
			kId     = 6
		};
		tAI_Mode_1();


		typedef enum {
			kRegisterId                          = 0,
			kAI_Trigger_OnceId                   = 1,
			kAI_ContinuousId                     = 2,
			kReserved_OneId                      = 3,
			kAI_Start_StopId                     = 4,
			kAI_SI_Source_PolarityId             = 5,
			kAI_CONVERT_Source_PolarityId        = 6,
			kAI_SI_Source_SelectId               = 7,
			kAI_CONVERT_Source_SelectId          = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Mode_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_Mode_1& setAI_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Trigger_Once(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Trigger_Once(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_1& setAI_Continuous(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Continuous(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Continuous(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Continuous(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_1& setReserved_One(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getReserved_One(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeReserved_One(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readReserved_One(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_1& setAI_Start_Stop(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Start_Stop(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Start_Stop(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Start_Stop(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_1& setAI_SI_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_CONVERT_Source_PolarityFalling_Edge      = 0,
			kAI_CONVERT_Source_PolarityRising_Edge       = 1,
		} tAI_CONVERT_Source_Polarity;
		inline tAI_Mode_1& setAI_CONVERT_Source_Polarity(tAI_CONVERT_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_CONVERT_Source_Polarity getAI_CONVERT_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_CONVERT_Source_Polarity(tAI_CONVERT_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_CONVERT_Source_Polarity readAI_CONVERT_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI_Source_SelectINTIMEBASE1       = 0,
			kAI_SI_Source_SelectPFI0              = 1,
			kAI_SI_Source_SelectPFI1              = 2,
			kAI_SI_Source_SelectPFI2              = 3,
			kAI_SI_Source_SelectPFI3              = 4,
			kAI_SI_Source_SelectPFI4              = 5,
			kAI_SI_Source_SelectPFI5              = 6,
			kAI_SI_Source_SelectPFI6              = 7,
			kAI_SI_Source_SelectPFI7              = 8,
			kAI_SI_Source_SelectPFI8              = 9,
			kAI_SI_Source_SelectPFI9              = 10,
			kAI_SI_Source_SelectRTSI0             = 11,
			kAI_SI_Source_SelectRTSI1             = 12,
			kAI_SI_Source_SelectRTSI2             = 13,
			kAI_SI_Source_SelectRTSI3             = 14,
			kAI_SI_Source_SelectRTSI4             = 15,
			kAI_SI_Source_SelectRTSI5             = 16,
			kAI_SI_Source_SelectRTSI6             = 17,
			kAI_SI_Source_SelectINTIMEBASE2       = 19,
			kAI_SI_Source_SelectLow               = 31,
		} tAI_SI_Source_Select;
		inline tAI_Mode_1& setAI_SI_Source_Select(tAI_SI_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI_Source_Select getAI_SI_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Source_Select(tAI_SI_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SI_Source_Select readAI_SI_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_CONVERT_Source_SelectSI2TC             = 0,
			kAI_CONVERT_Source_SelectPFI0              = 1,
			kAI_CONVERT_Source_SelectPFI1              = 2,
			kAI_CONVERT_Source_SelectPFI2              = 3,
			kAI_CONVERT_Source_SelectPFI3              = 4,
			kAI_CONVERT_Source_SelectPFI4              = 5,
			kAI_CONVERT_Source_SelectPFI5              = 6,
			kAI_CONVERT_Source_SelectPFI6              = 7,
			kAI_CONVERT_Source_SelectPFI7              = 8,
			kAI_CONVERT_Source_SelectPFI8              = 9,
			kAI_CONVERT_Source_SelectPFI9              = 10,
			kAI_CONVERT_Source_SelectRTSI0             = 11,
			kAI_CONVERT_Source_SelectRTSI1             = 12,
			kAI_CONVERT_Source_SelectRTSI2             = 13,
			kAI_CONVERT_Source_SelectRTSI3             = 14,
			kAI_CONVERT_Source_SelectRTSI4             = 15,
			kAI_CONVERT_Source_SelectRTSI5             = 16,
			kAI_CONVERT_Source_SelectRTSI6             = 17,
			kAI_CONVERT_Source_SelectGPCtr0_Out        = 19,
			kAI_CONVERT_Source_SelectLow               = 31,
		} tAI_CONVERT_Source_Select;
		inline tAI_Mode_1& setAI_CONVERT_Source_Select(tAI_CONVERT_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_CONVERT_Source_Select getAI_CONVERT_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_CONVERT_Source_Select(tAI_CONVERT_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_CONVERT_Source_Select readAI_CONVERT_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Mode_2
	//!< ---------------------------------------------------------------------------
	class tAI_Mode_2 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xd,
			kId     = 7
		};
		tAI_Mode_2();


		typedef enum {
			kRegisterId                          = 0,
			kAI_SC_Write_SwitchId                = 1,
			kAI_SC_Reload_ModeId                 = 2,
			kAI_SC_Initial_Load_SourceId         = 3,
			kAI_SI_Write_SwitchId                = 4,
			kAI_SI_Reload_ModeId                 = 5,
			kAI_SI_Initial_Load_SourceId         = 6,
			kAI_SI2_Reload_ModeId                = 7,
			kAI_SI2_Initial_Load_SourceId        = 8,
			kAI_External_MUX_PresentId           = 11,
			kAI_Pre_TriggerId                    = 12,
			kAI_Start_Stop_Gate_EnableId         = 13,
			kAI_SC_Gate_EnableId                 = 14
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Mode_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_Mode_2& setAI_SC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SC_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SC_Reload_ModeNo_Change         = 0,
			kAI_SC_Reload_ModeSwitch            = 1,
		} tAI_SC_Reload_Mode;
		inline tAI_Mode_2& setAI_SC_Reload_Mode(tAI_SC_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SC_Reload_Mode getAI_SC_Reload_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Reload_Mode(tAI_SC_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SC_Reload_Mode readAI_SC_Reload_Mode(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SC_Initial_Load_SourceLoad_A            = 0,
			kAI_SC_Initial_Load_SourceLoad_B            = 1,
		} tAI_SC_Initial_Load_Source;
		inline tAI_Mode_2& setAI_SC_Initial_Load_Source(tAI_SC_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SC_Initial_Load_Source getAI_SC_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Initial_Load_Source(tAI_SC_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SC_Initial_Load_Source readAI_SC_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_2& setAI_SI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_SI_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI_Reload_ModeNo_Change         = 0,
			kAI_SI_Reload_ModeAlternate_First_Period_Every_STOP                   = 4,
			kAI_SI_Reload_ModeSwitch_Every_STOP   = 5,
			kAI_SI_Reload_ModeAlternate_First_Period_Every_SCTC                   = 6,
			kAI_SI_Reload_ModeSwitch_Every_SCTC   = 7,
		} tAI_SI_Reload_Mode;
		inline tAI_Mode_2& setAI_SI_Reload_Mode(tAI_SI_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI_Reload_Mode getAI_SI_Reload_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Reload_Mode(tAI_SI_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SI_Reload_Mode readAI_SI_Reload_Mode(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI_Initial_Load_SourceLoad_A            = 0,
			kAI_SI_Initial_Load_SourceLoad_B            = 1,
		} tAI_SI_Initial_Load_Source;
		inline tAI_Mode_2& setAI_SI_Initial_Load_Source(tAI_SI_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI_Initial_Load_Source getAI_SI_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Initial_Load_Source(tAI_SI_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SI_Initial_Load_Source readAI_SI_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI2_Reload_ModeNo_Change         = 0,
			kAI_SI2_Reload_ModeAlternate_First_Period_Every_STOP                   = 1,
		} tAI_SI2_Reload_Mode;
		inline tAI_Mode_2& setAI_SI2_Reload_Mode(tAI_SI2_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI2_Reload_Mode getAI_SI2_Reload_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI2_Reload_Mode(tAI_SI2_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SI2_Reload_Mode readAI_SI2_Reload_Mode(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI2_Initial_Load_SourceLoad_A            = 0,
			kAI_SI2_Initial_Load_SourceLoad_B            = 1,
		} tAI_SI2_Initial_Load_Source;
		inline tAI_Mode_2& setAI_SI2_Initial_Load_Source(tAI_SI2_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI2_Initial_Load_Source getAI_SI2_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI2_Initial_Load_Source(tAI_SI2_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SI2_Initial_Load_Source readAI_SI2_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_External_MUX_PresentEvery_Convert     = 0,
			kAI_External_MUX_PresentDIV_TC_Converts   = 1,
		} tAI_External_MUX_Present;
		inline tAI_Mode_2& setAI_External_MUX_Present(tAI_External_MUX_Present fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_External_MUX_Present getAI_External_MUX_Present(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_External_MUX_Present(tAI_External_MUX_Present fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_External_MUX_Present readAI_External_MUX_Present(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_2& setAI_Pre_Trigger(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Pre_Trigger(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Pre_Trigger(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Pre_Trigger(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_2& setAI_Start_Stop_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Start_Stop_Gate_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Start_Stop_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Start_Stop_Gate_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_2& setAI_SC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SC_Gate_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_SC_Gate_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Output_Control
	//!< ---------------------------------------------------------------------------
	class tAI_Output_Control : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x3c,
			kId     = 8
		};
		tAI_Output_Control();


		typedef enum {
			kRegisterId                          = 0,
			kAI_CONVERT_Output_SelectId          = 1,
			kAI_SC_TC_Output_SelectId            = 2,
			kAI_LOCALMUX_CLK_Output_SelectId     = 3,
			kAI_EXTMUX_CLK_Output_SelectId       = 4,
			kAI_SCAN_IN_PROG_Output_SelectId     = 5,
			kAI_START_Output_SelectId            = 6
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Output_Control& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		typedef enum {
			kAI_CONVERT_Output_SelectHigh_Z            = 0,
			kAI_CONVERT_Output_SelectGround            = 1,
			kAI_CONVERT_Output_SelectActive_Low        = 2,
			kAI_CONVERT_Output_SelectActive_High       = 3,
		} tAI_CONVERT_Output_Select;
		inline tAI_Output_Control& setAI_CONVERT_Output_Select(tAI_CONVERT_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_CONVERT_Output_Select getAI_CONVERT_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_CONVERT_Output_Select(tAI_CONVERT_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_CONVERT_Output_Select readAI_CONVERT_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SC_TC_Output_SelectHigh_Z            = 0,
			kAI_SC_TC_Output_SelectGround            = 1,
			kAI_SC_TC_Output_SelectActive_Low        = 2,
			kAI_SC_TC_Output_SelectActive_High       = 3,
		} tAI_SC_TC_Output_Select;
		inline tAI_Output_Control& setAI_SC_TC_Output_Select(tAI_SC_TC_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SC_TC_Output_Select getAI_SC_TC_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SC_TC_Output_Select(tAI_SC_TC_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SC_TC_Output_Select readAI_SC_TC_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_LOCALMUX_CLK_Output_SelectHigh_Z            = 0,
			kAI_LOCALMUX_CLK_Output_SelectGround            = 1,
			kAI_LOCALMUX_CLK_Output_SelectActive_Low        = 2,
			kAI_LOCALMUX_CLK_Output_SelectActive_High       = 3,
		} tAI_LOCALMUX_CLK_Output_Select;
		inline tAI_Output_Control& setAI_LOCALMUX_CLK_Output_Select(tAI_LOCALMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_LOCALMUX_CLK_Output_Select getAI_LOCALMUX_CLK_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_LOCALMUX_CLK_Output_Select(tAI_LOCALMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_LOCALMUX_CLK_Output_Select readAI_LOCALMUX_CLK_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_EXTMUX_CLK_Output_SelectHigh_Z            = 0,
			kAI_EXTMUX_CLK_Output_SelectGround            = 1,
			kAI_EXTMUX_CLK_Output_SelectActive_Low        = 2,
			kAI_EXTMUX_CLK_Output_SelectActive_High       = 3,
		} tAI_EXTMUX_CLK_Output_Select;
		inline tAI_Output_Control& setAI_EXTMUX_CLK_Output_Select(tAI_EXTMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_EXTMUX_CLK_Output_Select getAI_EXTMUX_CLK_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_EXTMUX_CLK_Output_Select(tAI_EXTMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_EXTMUX_CLK_Output_Select readAI_EXTMUX_CLK_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SCAN_IN_PROG_Output_SelectHigh_Z            = 0,
			kAI_SCAN_IN_PROG_Output_SelectGround            = 1,
			kAI_SCAN_IN_PROG_Output_SelectActive_Low        = 2,
			kAI_SCAN_IN_PROG_Output_SelectActive_High       = 3,
		} tAI_SCAN_IN_PROG_Output_Select;
		inline tAI_Output_Control& setAI_SCAN_IN_PROG_Output_Select(tAI_SCAN_IN_PROG_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SCAN_IN_PROG_Output_Select getAI_SCAN_IN_PROG_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SCAN_IN_PROG_Output_Select(tAI_SCAN_IN_PROG_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SCAN_IN_PROG_Output_Select readAI_SCAN_IN_PROG_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Output_Control& setAI_START_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_START_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_START_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Mode_3
	//!< ---------------------------------------------------------------------------
	class tAI_Mode_3 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x57,
			kId     = 9
		};
		tAI_Mode_3();


		typedef enum {
			kRegisterId                          = 0,
			kAI_External_Gate_SelectId           = 1,
			kAI_External_Gate_PolarityId         = 2,
			kAI_FIFO_ModeId                      = 3,
			kAI_External_Gate_ModeId             = 4,
			kAI_Delayed_START1Id                 = 5,
			kAI_Delayed_START2Id                 = 6,
			kAI_SI2_Source_SelectId              = 7,
			kAI_SI_Special_Trigger_DelayId       = 8,
			kAI_Software_GateId                  = 9,
			kAI_Delay_STARTId                    = 10,
			kAI_Trigger_LengthId                 = 11
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Mode_3& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		typedef enum {
			kAI_External_Gate_SelectDisabled          = 0,
			kAI_External_Gate_SelectPFI0              = 1,
			kAI_External_Gate_SelectPFI1              = 2,
			kAI_External_Gate_SelectPFI2              = 3,
			kAI_External_Gate_SelectPFI3              = 4,
			kAI_External_Gate_SelectPFI4              = 5,
			kAI_External_Gate_SelectPFI5              = 6,
			kAI_External_Gate_SelectPFI6              = 7,
			kAI_External_Gate_SelectPFI7              = 8,
			kAI_External_Gate_SelectPFI8              = 9,
			kAI_External_Gate_SelectPFI9              = 10,
			kAI_External_Gate_SelectRTSI0             = 11,
			kAI_External_Gate_SelectRTSI1             = 12,
			kAI_External_Gate_SelectRTSI2             = 13,
			kAI_External_Gate_SelectRTSI3             = 14,
			kAI_External_Gate_SelectRTSI4             = 15,
			kAI_External_Gate_SelectRTSI5             = 16,
			kAI_External_Gate_SelectRTSI6             = 17,
			kAI_External_Gate_SelectLow               = 31,
		} tAI_External_Gate_Select;
		inline tAI_Mode_3& setAI_External_Gate_Select(tAI_External_Gate_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_External_Gate_Select getAI_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_External_Gate_Select(tAI_External_Gate_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_External_Gate_Select readAI_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_FIFO_ModeNot_Empty         = 0,
			kAI_FIFO_ModeHalf_Full         = 1,
			kAI_FIFO_ModeFull              = 2,
			kAI_FIFO_ModeHalf_Full_Until_Empty       = 3,
		} tAI_FIFO_Mode;
		inline tAI_Mode_3& setAI_FIFO_Mode(tAI_FIFO_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_FIFO_Mode getAI_FIFO_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_FIFO_Mode(tAI_FIFO_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_FIFO_Mode readAI_FIFO_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_External_Gate_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_External_Gate_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_External_Gate_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_External_Gate_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_Delayed_START1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Delayed_START1(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Delayed_START1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Delayed_START1(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_Delayed_START2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Delayed_START2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Delayed_START2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Delayed_START2(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI2_Source_SelectSame_As_SI        = 0,
			kAI_SI2_Source_SelectINTIMEBASE1       = 1,
		} tAI_SI2_Source_Select;
		inline tAI_Mode_3& setAI_SI2_Source_Select(tAI_SI2_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI2_Source_Select getAI_SI2_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI2_Source_Select(tAI_SI2_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_SI2_Source_Select readAI_SI2_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_SI_Special_Trigger_Delay(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SI_Special_Trigger_Delay(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_SI_Special_Trigger_Delay(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_SI_Special_Trigger_Delay(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_Software_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Software_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Software_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Software_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_Delay_START(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Delay_START(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Delay_START(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Delay_START(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Mode_3& setAI_Trigger_Length(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Trigger_Length(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Trigger_Length(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Trigger_Length(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_START_STOP_Select
	//!< ---------------------------------------------------------------------------
	class tAI_START_STOP_Select : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x3e,
			kId     = 10
		};
		tAI_START_STOP_Select();


		typedef enum {
			kRegisterId                          = 0,
			kAI_START_SelectId                   = 1,
			kAI_START_EdgeId                     = 2,
			kAI_START_SyncId                     = 3,
			kAI_STOP_SelectId                    = 4,
			kAI_STOP_EdgeId                      = 5,
			kAI_STOP_SyncId                      = 6,
			kAI_STOP_PolarityId                  = 7,
			kAI_START_PolarityId                 = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_START_STOP_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		typedef enum {
			kAI_START_SelectSI_TC             = 0,
			kAI_START_SelectPFI0              = 1,
			kAI_START_SelectPFI1              = 2,
			kAI_START_SelectPFI2              = 3,
			kAI_START_SelectPFI3              = 4,
			kAI_START_SelectPFI4              = 5,
			kAI_START_SelectPFI5              = 6,
			kAI_START_SelectPFI6              = 7,
			kAI_START_SelectPFI7              = 8,
			kAI_START_SelectPFI8              = 9,
			kAI_START_SelectPFI9              = 10,
			kAI_START_SelectRTSI0             = 11,
			kAI_START_SelectRTSI1             = 12,
			kAI_START_SelectRTSI2             = 13,
			kAI_START_SelectRTSI3             = 14,
			kAI_START_SelectRTSI4             = 15,
			kAI_START_SelectRTSI5             = 16,
			kAI_START_SelectRTSI6             = 17,
			kAI_START_SelectPulse             = 18,
			kAI_START_SelectGPCtr0_Out        = 19,
			kAI_START_SelectLow               = 31,
		} tAI_START_Select;
		inline tAI_START_STOP_Select& setAI_START_Select(tAI_START_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_START_Select getAI_START_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Select(tAI_START_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START_Select readAI_START_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START_STOP_Select& setAI_START_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START_Edge(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START_Edge(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START_STOP_Select& setAI_START_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START_Sync(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START_Sync(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_STOP_SelectDIV_TC_Or_Pulse   = 0,
			kAI_STOP_SelectPFI0              = 1,
			kAI_STOP_SelectPFI1              = 2,
			kAI_STOP_SelectPFI2              = 3,
			kAI_STOP_SelectPFI3              = 4,
			kAI_STOP_SelectPFI4              = 5,
			kAI_STOP_SelectPFI5              = 6,
			kAI_STOP_SelectPFI6              = 7,
			kAI_STOP_SelectPFI7              = 8,
			kAI_STOP_SelectPFI8              = 9,
			kAI_STOP_SelectPFI9              = 10,
			kAI_STOP_SelectRTSI0             = 11,
			kAI_STOP_SelectRTSI1             = 12,
			kAI_STOP_SelectRTSI2             = 13,
			kAI_STOP_SelectRTSI3             = 14,
			kAI_STOP_SelectRTSI4             = 15,
			kAI_STOP_SelectRTSI5             = 16,
			kAI_STOP_SelectRTSI6             = 17,
			kAI_STOP_SelectSI2TC             = 18,
			kAI_STOP_SelectIN                = 19,
			kAI_STOP_SelectLow               = 31,
		} tAI_STOP_Select;
		inline tAI_START_STOP_Select& setAI_STOP_Select(tAI_STOP_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_STOP_Select getAI_STOP_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Select(tAI_STOP_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_STOP_Select readAI_STOP_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START_STOP_Select& setAI_STOP_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_STOP_Edge(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_STOP_Edge(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START_STOP_Select& setAI_STOP_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_STOP_Sync(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_STOP_Sync(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_STOP_PolarityActive_High_Or_Rising_Edge            = 0,
			kAI_STOP_PolarityActive_Low_Or_Falling_Edge            = 1,
			kAI_STOP_PolarityActive_High       = 0,
			kAI_STOP_PolarityActive_Low        = 1,
			kAI_STOP_PolarityRising_Edge       = 0,
			kAI_STOP_PolarityFalling_Edge      = 1,
		} tAI_STOP_Polarity;
		inline tAI_START_STOP_Select& setAI_STOP_Polarity(tAI_STOP_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_STOP_Polarity getAI_STOP_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_STOP_Polarity(tAI_STOP_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_STOP_Polarity readAI_STOP_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_START_PolarityActive_High_Or_Rising_Edge            = 0,
			kAI_START_PolarityActive_Low_Or_Falling_Edge            = 1,
			kAI_START_PolarityActive_High       = 0,
			kAI_START_PolarityActive_Low        = 1,
			kAI_START_PolarityRising_Edge       = 0,
			kAI_START_PolarityFalling_Edge      = 1,
		} tAI_START_Polarity;
		inline tAI_START_STOP_Select& setAI_START_Polarity(tAI_START_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_START_Polarity getAI_START_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START_Polarity(tAI_START_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START_Polarity readAI_START_Polarity(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Trigger_Select
	//!< ---------------------------------------------------------------------------
	class tAI_Trigger_Select : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x3f,
			kId     = 11
		};
		tAI_Trigger_Select();


		typedef enum {
			kRegisterId                          = 0,
			kAI_START1_SelectId                  = 1,
			kAI_START1_EdgeId                    = 2,
			kAI_START1_SyncId                    = 3,
			kAI_START2_SelectId                  = 4,
			kAI_START2_EdgeId                    = 5,
			kAI_START2_SyncId                    = 6,
			kAI_START2_PolarityId                = 7,
			kAI_START1_PolarityId                = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_Trigger_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		typedef enum {
			kAI_START1_SelectPulse             = 0,
			kAI_START1_SelectPFI0              = 1,
			kAI_START1_SelectPFI1              = 2,
			kAI_START1_SelectPFI2              = 3,
			kAI_START1_SelectPFI3              = 4,
			kAI_START1_SelectPFI4              = 5,
			kAI_START1_SelectPFI5              = 6,
			kAI_START1_SelectPFI6              = 7,
			kAI_START1_SelectPFI7              = 8,
			kAI_START1_SelectPFI8              = 9,
			kAI_START1_SelectPFI9              = 10,
			kAI_START1_SelectRTSI0             = 11,
			kAI_START1_SelectRTSI1             = 12,
			kAI_START1_SelectRTSI2             = 13,
			kAI_START1_SelectRTSI3             = 14,
			kAI_START1_SelectRTSI4             = 15,
			kAI_START1_SelectRTSI5             = 16,
			kAI_START1_SelectRTSI6             = 17,
			kAI_START1_SelectGPCtr0_Out        = 18,
			kAI_START1_SelectLow               = 31,
		} tAI_START1_Select;
		inline tAI_Trigger_Select& setAI_START1_Select(tAI_START1_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_START1_Select getAI_START1_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Select(tAI_START1_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START1_Select readAI_START1_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Trigger_Select& setAI_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START1_Edge(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START1_Edge(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Trigger_Select& setAI_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START1_Sync(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START1_Sync(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_START2_SelectPulse             = 0,
			kAI_START2_SelectPFI0              = 1,
			kAI_START2_SelectPFI1              = 2,
			kAI_START2_SelectPFI2              = 3,
			kAI_START2_SelectPFI3              = 4,
			kAI_START2_SelectPFI4              = 5,
			kAI_START2_SelectPFI5              = 6,
			kAI_START2_SelectPFI6              = 7,
			kAI_START2_SelectPFI7              = 8,
			kAI_START2_SelectPFI8              = 9,
			kAI_START2_SelectPFI9              = 10,
			kAI_START2_SelectRTSI0             = 11,
			kAI_START2_SelectRTSI1             = 12,
			kAI_START2_SelectRTSI2             = 13,
			kAI_START2_SelectRTSI3             = 14,
			kAI_START2_SelectRTSI4             = 15,
			kAI_START2_SelectRTSI5             = 16,
			kAI_START2_SelectRTSI6             = 17,
			kAI_START2_SelectLow               = 31,
		} tAI_START2_Select;
		inline tAI_Trigger_Select& setAI_START2_Select(tAI_START2_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_START2_Select getAI_START2_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Select(tAI_START2_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START2_Select readAI_START2_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Trigger_Select& setAI_START2_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START2_Edge(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START2_Edge(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Trigger_Select& setAI_START2_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START2_Sync(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_START2_Sync(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_START2_PolarityActive_High_Or_Rising_Edge            = 0,
			kAI_START2_PolarityActive_Low_Or_Falling_Edge            = 1,
			kAI_START2_PolarityActive_High       = 0,
			kAI_START2_PolarityActive_Low        = 1,
			kAI_START2_PolarityRising_Edge       = 0,
			kAI_START2_PolarityFalling_Edge      = 1,
		} tAI_START2_Polarity;
		inline tAI_Trigger_Select& setAI_START2_Polarity(tAI_START2_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_START2_Polarity getAI_START2_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START2_Polarity(tAI_START2_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START2_Polarity readAI_START2_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_START1_PolarityActive_High_Or_Rising_Edge            = 0,
			kAI_START1_PolarityActive_Low_Or_Falling_Edge            = 1,
			kAI_START1_PolarityActive_High       = 0,
			kAI_START1_PolarityActive_Low        = 1,
			kAI_START1_PolarityRising_Edge       = 0,
			kAI_START1_PolarityFalling_Edge      = 1,
		} tAI_START1_Polarity;
		inline tAI_Trigger_Select& setAI_START1_Polarity(tAI_START1_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_START1_Polarity getAI_START1_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_START1_Polarity(tAI_START1_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAI_START1_Polarity readAI_START1_Polarity(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_SI_Load_A
	//!< ---------------------------------------------------------------------------
	class tAI_SI_Load_A : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xe,
			kId     = 12
		};
		tAI_SI_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_SI_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_SI_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_SI_Load_B
	//!< ---------------------------------------------------------------------------
	class tAI_SI_Load_B : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x10,
			kId     = 13
		};
		tAI_SI_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_SI_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_SI_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_SI2_Load_A
	//!< ---------------------------------------------------------------------------
	class tAI_SI2_Load_A : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x17,
			kId     = 14
		};
		tAI_SI2_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_SI2_Load_A& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_SI2_Load_A& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_SI2_Load_B
	//!< ---------------------------------------------------------------------------
	class tAI_SI2_Load_B : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x19,
			kId     = 15
		};
		tAI_SI2_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_SI2_Load_B& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_SI2_Load_B& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_SC_Load_A
	//!< ---------------------------------------------------------------------------
	class tAI_SC_Load_A : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x12,
			kId     = 16
		};
		tAI_SC_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_SC_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_SC_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_SC_Load_B
	//!< ---------------------------------------------------------------------------
	class tAI_SC_Load_B : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x14,
			kId     = 17
		};
		tAI_SC_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_SC_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_SC_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_DIV_Load_A
	//!< ---------------------------------------------------------------------------
	class tAI_DIV_Load_A : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x40,
			kId     = 18
		};
		tAI_DIV_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAI_DIV_Load_A& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tAI_DIV_Load_A& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AO_Personal
	//!< ---------------------------------------------------------------------------
	class tAO_Personal : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x4e,
			kId     = 19
		};
		tAO_Personal();


		typedef enum {
			kRegisterId                          = 0,
			kAO_UPDATE2_Pulse_WidthId            = 1,
			kAO_UPDATE2_Pulse_TimebaseId         = 2,
			kAO_UPDATE2_Original_PulseId         = 3,
			kAO_Interval_Buffer_ModeId           = 4,
			kAO_BC_Source_SelectId               = 5,
			kAO_UPDATE_Pulse_WidthId             = 6,
			kAO_UPDATE_Pulse_TimebaseId          = 7,
			kAO_UPDATE_Original_PulseId          = 8,
			kAO_DMA_PIO_ControlId                = 9,
			kAO_AOFREQ_PolarityId                = 10,
			kAO_FIFO_EnableId                    = 11,
			kAO_FIFO_Flags_PolarityId            = 12,
			kAO_TMRDACWR_Pulse_WidthId           = 13,
			kAO_Fast_CPUId                       = 14,
			kAO_Number_Of_DAC_PackagesId         = 15
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!< Register Accessors (Compile-time selectable)
		inline tAO_Personal& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		typedef enum {
			kAO_UPDATE2_Pulse_WidthAbout_3_TIMEBASE_Periods          = 0,
			kAO_UPDATE2_Pulse_WidthAbout_1_TIMEBASE_Periods          = 1,
		} tAO_UPDATE2_Pulse_Width;
		inline tAO_Personal& setAO_UPDATE2_Pulse_Width(tAO_UPDATE2_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE2_Pulse_Width getAO_UPDATE2_Pulse_Width(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE2_Pulse_Width(tAO_UPDATE2_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE2_Pulse_Width readAO_UPDATE2_Pulse_Width(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UPDATE2_Pulse_TimebaseSelect_By_PulseWidth      = 0,
			kAO_UPDATE2_Pulse_TimebaseSelect_By_OriginalPulse         = 1,
		} tAO_UPDATE2_Pulse_Timebase;
		inline tAO_Personal& setAO_UPDATE2_Pulse_Timebase(tAO_UPDATE2_Pulse_Timebase fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE2_Pulse_Timebase getAO_UPDATE2_Pulse_Timebase(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE2_Pulse_Timebase(tAO_UPDATE2_Pulse_Timebase fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE2_Pulse_Timebase readAO_UPDATE2_Pulse_Timebase(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UPDATE2_Original_PulseMax_Of_UPDATE2_Pulsewidth           = 0,
			kAO_UPDATE2_Original_PulseEqual_To_UI2_TC_Pulsewidth            = 1,
		} tAO_UPDATE2_Original_Pulse;
		inline tAO_Personal& setAO_UPDATE2_Original_Pulse(tAO_UPDATE2_Original_Pulse fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE2_Original_Pulse getAO_UPDATE2_Original_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE2_Original_Pulse(tAO_UPDATE2_Original_Pulse fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE2_Original_Pulse readAO_UPDATE2_Original_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Personal& setAO_Interval_Buffer_Mode(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Interval_Buffer_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Interval_Buffer_Mode(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Interval_Buffer_Mode(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_BC_Source_SelectUPDATE            = 0,
			kAO_BC_Source_SelectUC_TC             = 1,
		} tAO_BC_Source_Select;
		inline tAO_Personal& setAO_BC_Source_Select(tAO_BC_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_BC_Source_Select getAO_BC_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Source_Select(tAO_BC_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_BC_Source_Select readAO_BC_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UPDATE_Pulse_WidthAbout_3_TIMEBASE_Periods          = 0,
			kAO_UPDATE_Pulse_WidthAbout_1_TIMEBASE_Periods          = 1,
		} tAO_UPDATE_Pulse_Width;
		inline tAO_Personal& setAO_UPDATE_Pulse_Width(tAO_UPDATE_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE_Pulse_Width getAO_UPDATE_Pulse_Width(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Pulse_Width(tAO_UPDATE_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE_Pulse_Width readAO_UPDATE_Pulse_Width(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UPDATE_Pulse_TimebaseSelect_By_PulseWidth      = 0,
			kAO_UPDATE_Pulse_TimebaseSelect_By_OriginalPulse         = 1,
		} tAO_UPDATE_Pulse_Timebase;
		inline tAO_Personal& setAO_UPDATE_Pulse_Timebase(tAO_UPDATE_Pulse_Timebase fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE_Pulse_Timebase getAO_UPDATE_Pulse_Timebase(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Pulse_Timebase(tAO_UPDATE_Pulse_Timebase fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE_Pulse_Timebase readAO_UPDATE_Pulse_Timebase(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UPDATE_Original_PulseMax_Of_UPDATE_Pulsewidth          = 0,
			kAO_UPDATE_Original_PulseEqual_To_UPDATE_Pulsewidth            = 1,
		} tAO_UPDATE_Original_Pulse;
		inline tAO_Personal& setAO_UPDATE_Original_Pulse(tAO_UPDATE_Original_Pulse fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE_Original_Pulse getAO_UPDATE_Original_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Original_Pulse(tAO_UPDATE_Original_Pulse fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE_Original_Pulse readAO_UPDATE_Original_Pulse(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_DMA_PIO_ControlFIFO_Interface    = 0,
			kAO_DMA_PIO_ControlUnbuffered_Interface      = 1,
		} tAO_DMA_PIO_Control;
		inline tAO_Personal& setAO_DMA_PIO_Control(tAO_DMA_PIO_Control fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_DMA_PIO_Control getAO_DMA_PIO_Control(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_DMA_PIO_Control(tAO_DMA_PIO_Control fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_DMA_PIO_Control readAO_DMA_PIO_Control(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_AOFREQ_PolarityActive_High       = 0,
			kAO_AOFREQ_PolarityActive_Low        = 1,
		} tAO_AOFREQ_Polarity;
		inline tAO_Personal& setAO_AOFREQ_Polarity(tAO_AOFREQ_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_AOFREQ_Polarity getAO_AOFREQ_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_AOFREQ_Polarity(tAO_AOFREQ_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_AOFREQ_Polarity readAO_AOFREQ_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Personal& setAO_FIFO_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_FIFO_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_FIFO_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_FIFO_Enable(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_FIFO_Flags_PolarityActive_Low        = 0,
			kAO_FIFO_Flags_PolarityActive_High       = 1,
		} tAO_FIFO_Flags_Polarity;
		inline tAO_Personal& setAO_FIFO_Flags_Polarity(tAO_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_FIFO_Flags_Polarity getAO_FIFO_Flags_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_FIFO_Flags_Polarity(tAO_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_FIFO_Flags_Polarity readAO_FIFO_Flags_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_TMRDACWR_Pulse_WidthAbout_3_TIMEBASE_Periods          = 0,
			kAO_TMRDACWR_Pulse_WidthAbout_2_TIMEBASE_Periods          = 1,
		} tAO_TMRDACWR_Pulse_Width;
		inline tAO_Personal& setAO_TMRDACWR_Pulse_Width(tAO_TMRDACWR_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_TMRDACWR_Pulse_Width getAO_TMRDACWR_Pulse_Width(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_TMRDACWR_Pulse_Width(tAO_TMRDACWR_Pulse_Width fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_TMRDACWR_Pulse_Width readAO_TMRDACWR_Pulse_Width(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_Fast_CPUSlow              = 0,
			kAO_Fast_CPUFast              = 1,
		} tAO_Fast_CPU;
		inline tAO_Personal& setAO_Fast_CPU(tAO_Fast_CPU fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_Fast_CPU getAO_Fast_CPU(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Fast_CPU(tAO_Fast_CPU fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Fast_CPU readAO_Fast_CPU(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_Number_Of_DAC_PackagesDual_DAC_mode     = 0,
			kAO_Number_Of_DAC_PackagesSingel_DAC_mode   = 1,
		} tAO_Number_Of_DAC_Packages;
		inline tAO_Personal& setAO_Number_Of_DAC_Packages(tAO_Number_Of_DAC_Packages fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_Number_Of_DAC_Packages getAO_Number_Of_DAC_Packages(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Number_Of_DAC_Packages(tAO_Number_Of_DAC_Packages fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Number_Of_DAC_Packages readAO_Number_Of_DAC_Packages(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Command_1
	//!< ---------------------------------------------------------------------------
	class tAO_Command_1 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x9,
			kId     = 20
		};
		tAO_Command_1();


		typedef enum {
			kRegisterId                          = 0,
			kAO_UPDATE_PulseId                   = 1,
			kAO_LDAC0_Source_SelectId            = 2,
			kAO_DAC0_Update_ModeId               = 3,
			kAO_LDAC1_Source_SelectId            = 4,
			kAO_DAC1_Update_ModeId               = 5,
			kAO_BC_LoadId                        = 6,
			kAO_BC_ArmId                         = 7,
			kAO_UC_LoadId                        = 8,
			kAO_UC_ArmId                         = 9,
			kAO_UI_LoadId                        = 10,
			kAO_UI_ArmId                         = 11,
			kAO_UI2_LoadId                       = 12,
			kAO_UI2_Arm_DisarmId                 = 13,
			kAO_DisarmId                         = 14,
			kAO_START_PulseId                    = 15,
			kAO_Analog_Trigger_ResetId           = 16
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Command_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_Command_1& setAO_UPDATE_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UPDATE_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UPDATE_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_LDAC0_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_LDAC0_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_LDAC0_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_LDAC0_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_DAC0_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_DAC0_Update_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_DAC0_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_DAC0_Update_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_LDAC1_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_LDAC1_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_LDAC1_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_LDAC1_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_DAC1_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_DAC1_Update_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_DAC1_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_DAC1_Update_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_BC_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_BC_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_UC_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_UC_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_UI_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_UI_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_UI2_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_UI2_Arm_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Arm_Disarm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Arm_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Arm_Disarm(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Disarm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Disarm(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_START_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_1& setAO_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Command_2
	//!< ---------------------------------------------------------------------------
	class tAO_Command_2 : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0xa,
			kId     = 21
		};
		tAO_Command_2();


		typedef enum {
			kRegisterId                          = 0,
			kAO_START1_PulseId                   = 1,
			kAO_UPDATE2_PulseId                  = 2,
			kAO_Mute_AId                         = 3,
			kAO_Mute_BId                         = 4,
			kAO_BC_Switch_Load_On_TCId           = 5,
			kAO_UC_Switch_Load_On_TCId           = 6,
			kAO_UC_Switch_Load_On_BC_TCId        = 7,
			kAO_UI_Switch_Load_On_TCId           = 8,
			kAO_UI_Switch_Load_On_StopId         = 9,
			kAO_UI_Switch_Load_On_BC_TCId        = 10,
			kAO_BC_Save_TraceId                  = 11,
			kAO_BC_Gate_EnableId                 = 12,
			kAO_UC_Save_TraceId                  = 13,
			kAO_Start_Stop_Gate_EnableId         = 14,
			kAO_End_On_UC_TCId                   = 15,
			kAO_End_On_BC_TCId                   = 16
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Command_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_Command_2& setAO_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START1_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START1_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_UPDATE2_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UPDATE2_Pulse(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE2_Pulse(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UPDATE2_Pulse(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_Mute_A(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Mute_A(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Mute_A(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Mute_A(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_Mute_B(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Mute_B(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Mute_B(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Mute_B(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_BC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_UC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_UC_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Switch_Load_On_BC_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Switch_Load_On_BC_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_UI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI_Switch_Load_On_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_UI_Switch_Load_On_Stop(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Switch_Load_On_Stop(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Switch_Load_On_Stop(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI_Switch_Load_On_Stop(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_UI_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Switch_Load_On_BC_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI_Switch_Load_On_BC_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_BC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Save_Trace(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_Save_Trace(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_BC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_BC_Gate_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_BC_Gate_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_UC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Save_Trace(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Save_Trace(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_Start_Stop_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Start_Stop_Gate_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Start_Stop_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Start_Stop_Gate_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_End_On_UC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_End_On_UC_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_End_On_UC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_End_On_UC_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Command_2& setAO_End_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_End_On_BC_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_End_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_End_On_BC_TC(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Interrupt_B_Ack
	//!< ---------------------------------------------------------------------------
	class tInterrupt_B_Ack : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0x6,
			kId     = 22
		};
		tInterrupt_B_Ack();


		typedef enum {
			kRegisterId                          = 0,
			kG1_Gate_Error_ConfirmId             = 2,
			kG1_TC_Error_ConfirmId               = 3,
			kAO_BC_TC_Trigger_Error_ConfirmId    = 4,
			kAO_BC_TC_Error_ConfirmId            = 5,
			kAO_UI2_TC_Error_ConfirmId           = 6,
			kAO_UI2_TC_Interrupt_AckId           = 7,
			kAO_UC_TC_Interrupt_AckId            = 8,
			kAO_BC_TC_Interrupt_AckId            = 9,
			kAO_START1_Interrupt_AckId           = 10,
			kAO_UPDATE_Interrupt_AckId           = 11,
			kAO_START_Interrupt_AckId            = 12,
			kAO_STOP_Interrupt_AckId             = 13,
			kAO_Error_Interrupt_AckId            = 14,
			kG1_TC_Interrupt_AckId               = 15,
			kG1_Gate_Interrupt_AckId             = 16
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tInterrupt_B_Ack& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tInterrupt_B_Ack& setG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gate_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_BC_TC_Trigger_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_TC_Trigger_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_TC_Trigger_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_TC_Trigger_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_BC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_UI2_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_TC_Error_Confirm(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_UI2_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_UC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_BC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START1_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START1_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_UPDATE_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UPDATE_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UPDATE_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_STOP_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_STOP_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setAO_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Error_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Error_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_TC_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Ack& setG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gate_Interrupt_Ack(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Interrupt_B_Enable
	//!< ---------------------------------------------------------------------------
	class tInterrupt_B_Enable : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x4b,
			kId     = 23
		};
		tInterrupt_B_Enable();


		typedef enum {
			kRegisterId                          = 0,
			kAO_BC_TC_Interrupt_EnableId         = 1,
			kAO_START1_Interrupt_EnableId        = 2,
			kAO_UPDATE_Interrupt_EnableId        = 3,
			kAO_START_Interrupt_EnableId         = 4,
			kAO_STOP_Interrupt_EnableId          = 5,
			kAO_Error_Interrupt_EnableId         = 6,
			kAO_UC_TC_Interrupt_EnableId         = 7,
			kAO_UI2_TC_Interrupt_EnableId        = 8,
			kAO_FIFO_Interrupt_EnableId          = 9,
			kG1_TC_Interrupt_EnableId            = 10,
			kG1_Gate_Interrupt_EnableId          = 11,
			kPass_Thru_1_Interrupt_EnableId      = 12
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tInterrupt_B_Enable& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tInterrupt_B_Enable& setAO_BC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_BC_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_BC_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_START1_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_START1_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_UPDATE_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_UPDATE_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_UPDATE_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_START_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_START_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_STOP_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_STOP_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Error_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Error_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_UC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_UC_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_UC_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_UI2_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_UI2_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_UI2_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setAO_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_FIFO_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_FIFO_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setG1_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getG1_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readG1_TC_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setG1_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getG1_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readG1_Gate_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_B_Enable& setPass_Thru_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getPass_Thru_1_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writePass_Thru_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readPass_Thru_1_Interrupt_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Second_Irq_B_Enable
	//!< ---------------------------------------------------------------------------
	class tSecond_Irq_B_Enable : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x4c,
			kId     = 24
		};
		tSecond_Irq_B_Enable();


		typedef enum {
			kRegisterId                          = 0,
			kAO_BC_TC_Second_Irq_EnableId        = 1,
			kAO_START1_Second_Irq_EnableId       = 2,
			kAO_UPDATE_Second_Irq_EnableId       = 3,
			kAO_START_Second_Irq_EnableId        = 4,
			kAO_STOP_Second_Irq_EnableId         = 5,
			kAO_Error_Second_Irq_EnableId        = 6,
			kAO_UC_TC_Second_Irq_EnableId        = 7,
			kAO_UI2_TC_Second_Irq_EnableId       = 8,
			kAO_FIFO_Second_Irq_EnableId         = 9,
			kG1_TC_Second_Irq_EnableId           = 10,
			kG1_Gate_Second_Irq_EnableId         = 11,
			kPass_Thru_1_Second_Irq_EnableId     = 12
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tSecond_Irq_B_Enable& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tSecond_Irq_B_Enable& setAO_BC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START1_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START1_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_UPDATE_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UPDATE_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UPDATE_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_STOP_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_STOP_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Error_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Error_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_UC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_UI2_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setAO_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_FIFO_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_FIFO_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setG1_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_TC_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setG1_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gate_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tSecond_Irq_B_Enable& setPass_Thru_1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getPass_Thru_1_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writePass_Thru_1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readPass_Thru_1_Second_Irq_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Mode_1
	//!< ---------------------------------------------------------------------------
	class tAO_Mode_1 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x26,
			kId     = 25
		};
		tAO_Mode_1();


		typedef enum {
			kRegisterId                          = 0,
			kAO_Trigger_OnceId                   = 1,
			kAO_ContinuousId                     = 2,
			kAO_UC_Switch_Load_Every_TCId        = 3,
			kAO_UI_Source_PolarityId             = 4,
			kAO_UPDATE_Source_PolarityId         = 5,
			kAO_Multiple_ChannelsId              = 6,
			kAO_UI_Source_SelectId               = 7,
			kAO_UPDATE_Source_SelectId           = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Mode_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_Mode_1& setAO_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Trigger_Once(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Trigger_Once(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_ContinuousStop_On_BC_TC     = 0,
			kAO_ContinuousIgnore_BC_TC      = 1,
		} tAO_Continuous;
		inline tAO_Mode_1& setAO_Continuous(tAO_Continuous fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_Continuous getAO_Continuous(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Continuous(tAO_Continuous fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Continuous readAO_Continuous(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_1& setAO_UC_Switch_Load_Every_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Switch_Load_Every_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Switch_Load_Every_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Switch_Load_Every_TC(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UI_Source_PolarityRising_Edge       = 0,
			kAO_UI_Source_PolarityFalling_Edge      = 1,
		} tAO_UI_Source_Polarity;
		inline tAO_Mode_1& setAO_UI_Source_Polarity(tAO_UI_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UI_Source_Polarity getAO_UI_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Source_Polarity(tAO_UI_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UI_Source_Polarity readAO_UI_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UPDATE_Source_PolarityRising_Edge       = 0,
			kAO_UPDATE_Source_PolarityFalling_Edge      = 1,
		} tAO_UPDATE_Source_Polarity;
		inline tAO_Mode_1& setAO_UPDATE_Source_Polarity(tAO_UPDATE_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE_Source_Polarity getAO_UPDATE_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Source_Polarity(tAO_UPDATE_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE_Source_Polarity readAO_UPDATE_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_1& setAO_Multiple_Channels(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Multiple_Channels(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Multiple_Channels(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Multiple_Channels(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UI_Source_SelectAO_IN_TIMEBASE1   = 0,
			kAO_UI_Source_SelectPFI0              = 1,
			kAO_UI_Source_SelectPFI1              = 2,
			kAO_UI_Source_SelectPFI2              = 3,
			kAO_UI_Source_SelectPFI3              = 4,
			kAO_UI_Source_SelectPFI4              = 5,
			kAO_UI_Source_SelectPFI5              = 6,
			kAO_UI_Source_SelectPFI6              = 7,
			kAO_UI_Source_SelectPFI7              = 8,
			kAO_UI_Source_SelectPFI8              = 9,
			kAO_UI_Source_SelectPFI9              = 10,
			kAO_UI_Source_SelectRTSI0             = 11,
			kAO_UI_Source_SelectRTSI1             = 12,
			kAO_UI_Source_SelectRTSI2             = 13,
			kAO_UI_Source_SelectRTSI3             = 14,
			kAO_UI_Source_SelectRTSI4             = 15,
			kAO_UI_Source_SelectRTSI5             = 16,
			kAO_UI_Source_SelectRTSI6             = 17,
			kAO_UI_Source_SelectIN_TIMEBASE2      = 19,
			kAO_UI_Source_SelectLow               = 31,
		} tAO_UI_Source_Select;
		inline tAO_Mode_1& setAO_UI_Source_Select(tAO_UI_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UI_Source_Select getAO_UI_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Source_Select(tAO_UI_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UI_Source_Select readAO_UI_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UPDATE_Source_SelectUI_TC             = 0,
			kAO_UPDATE_Source_SelectPFI0              = 1,
			kAO_UPDATE_Source_SelectPFI1              = 2,
			kAO_UPDATE_Source_SelectPFI2              = 3,
			kAO_UPDATE_Source_SelectPFI3              = 4,
			kAO_UPDATE_Source_SelectPFI4              = 5,
			kAO_UPDATE_Source_SelectPFI5              = 6,
			kAO_UPDATE_Source_SelectPFI6              = 7,
			kAO_UPDATE_Source_SelectPFI7              = 8,
			kAO_UPDATE_Source_SelectPFI8              = 9,
			kAO_UPDATE_Source_SelectPFI9              = 10,
			kAO_UPDATE_Source_SelectRTSI0             = 11,
			kAO_UPDATE_Source_SelectRTSI1             = 12,
			kAO_UPDATE_Source_SelectRTSI2             = 13,
			kAO_UPDATE_Source_SelectRTSI3             = 14,
			kAO_UPDATE_Source_SelectRTSI4             = 15,
			kAO_UPDATE_Source_SelectRTSI5             = 16,
			kAO_UPDATE_Source_SelectRTSI6             = 17,
			kAO_UPDATE_Source_SelectGPCTR1_Out        = 19,
			kAO_UPDATE_Source_SelectLow               = 31,
		} tAO_UPDATE_Source_Select;
		inline tAO_Mode_1& setAO_UPDATE_Source_Select(tAO_UPDATE_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE_Source_Select getAO_UPDATE_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Source_Select(tAO_UPDATE_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE_Source_Select readAO_UPDATE_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Mode_2
	//!< ---------------------------------------------------------------------------
	class tAO_Mode_2 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x27,
			kId     = 26
		};
		tAO_Mode_2();


		typedef enum {
			kRegisterId                          = 0,
			kAO_BC_Write_SwitchId                = 1,
			kAO_BC_Reload_ModeId                 = 2,
			kAO_BC_Initial_Load_SourceId         = 3,
			kAO_UI_Write_SwitchId                = 4,
			kAO_UI_Reload_ModeId                 = 5,
			kAO_UI_Initial_Load_SourceId         = 6,
			kAO_UI2_Reload_ModeId                = 7,
			kAO_UI2_Initial_Load_SourceId        = 8,
			kAO_UC_Write_SwitchId                = 9,
			kAO_UC_Initial_Load_SourceId         = 10,
			kAO_START1_DisableId                 = 11,
			kAO_FIFO_Retransmit_EnableId         = 12,
			kAO_FIFO_ModeId                      = 13
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Mode_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_Mode_2& setAO_BC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_BC_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Reload_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_Reload_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_BC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_BC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_BC_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_UI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UI_Reload_ModeNo_Change         = 0,
			kAO_UI_Reload_ModeAlternate_On_STOP   = 4,
			kAO_UI_Reload_ModeSwitch_On_STOP    = 5,
			kAO_UI_Reload_ModeAlternate_On_BC_TC    = 6,
			kAO_UI_Reload_ModeSwitch_On_BC_TC   = 7,
		} tAO_UI_Reload_Mode;
		inline tAO_Mode_2& setAO_UI_Reload_Mode(tAO_UI_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UI_Reload_Mode getAO_UI_Reload_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Reload_Mode(tAO_UI_Reload_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UI_Reload_Mode readAO_UI_Reload_Mode(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UI_Initial_Load_SourceReg_A             = 0,
			kAO_UI_Initial_Load_SourceReg_B             = 1,
		} tAO_UI_Initial_Load_Source;
		inline tAO_Mode_2& setAO_UI_Initial_Load_Source(tAO_UI_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UI_Initial_Load_Source getAO_UI_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI_Initial_Load_Source(tAO_UI_Initial_Load_Source fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UI_Initial_Load_Source readAO_UI_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_UI2_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Reload_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Reload_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_UI2_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_UC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_UC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Initial_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_START1_Disable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START1_Disable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Disable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START1_Disable(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_2& setAO_FIFO_Retransmit_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_FIFO_Retransmit_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_FIFO_Retransmit_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_FIFO_Retransmit_Enable(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_FIFO_ModeEmpty             = 0,
			kAO_FIFO_ModeLess_Than_Half_Full     = 1,
			kAO_FIFO_ModeLess_Than_Full    = 2,
			kAO_FIFO_ModeLess_Than_Half_Full_to_Full             = 3,
		} tAO_FIFO_Mode;
		inline tAO_Mode_2& setAO_FIFO_Mode(tAO_FIFO_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_FIFO_Mode getAO_FIFO_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_FIFO_Mode(tAO_FIFO_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_FIFO_Mode readAO_FIFO_Mode(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Output_Control
	//!< ---------------------------------------------------------------------------
	class tAO_Output_Control : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x56,
			kId     = 27
		};
		tAO_Output_Control();


		typedef enum {
			kRegisterId                          = 0,
			kAO_UPDATE_Output_SelectId           = 1,
			kAO_UPDATE2_Output_ToggleId          = 2,
			kAO_External_Gate_PolarityId         = 3,
			kAO_UPDATE2_Output_SelectId          = 4,
			kAO_Number_Of_ChannelsId             = 5,
			kAO_External_Gate_SelectId           = 6,
			kAO_External_Gate_EnableId           = 7
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Output_Control& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		typedef enum {
			kAO_UPDATE_Output_SelectHigh_Z            = 0,
			kAO_UPDATE_Output_SelectGround            = 1,
			kAO_UPDATE_Output_SelectActive_Low        = 2,
			kAO_UPDATE_Output_SelectActive_High       = 3,
		} tAO_UPDATE_Output_Select;
		inline tAO_Output_Control& setAO_UPDATE_Output_Select(tAO_UPDATE_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UPDATE_Output_Select getAO_UPDATE_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE_Output_Select(tAO_UPDATE_Output_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UPDATE_Output_Select readAO_UPDATE_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Output_Control& setAO_UPDATE2_Output_Toggle(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UPDATE2_Output_Toggle(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE2_Output_Toggle(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UPDATE2_Output_Toggle(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Output_Control& setAO_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Output_Control& setAO_UPDATE2_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UPDATE2_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UPDATE2_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UPDATE2_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Output_Control& setAO_Number_Of_Channels(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Number_Of_Channels(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Number_Of_Channels(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Number_Of_Channels(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Output_Control& setAO_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Output_Control& setAO_External_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_External_Gate_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_External_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_External_Gate_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Mode_3
	//!< ---------------------------------------------------------------------------
	class tAO_Mode_3 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x46,
			kId     = 28
		};
		tAO_Mode_3();


		typedef enum {
			kRegisterId                          = 0,
			kAO_Software_GateId                  = 2,
			kAO_Not_An_UPDATEId                  = 3,
			kAO_Stop_On_BC_TC_ErrorId            = 4,
			kAO_Stop_On_BC_TC_Trigger_ErrorId    = 5,
			kAO_Stop_On_Overrun_ErrorId          = 6,
			kAO_Trigger_LengthId                 = 8,
			kAO_UC_Switch_Load_Every_BC_TCId     = 9,
			kAO_UI2_Switch_Load_Next_TCId        = 10
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Mode_3& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_Mode_3& setAO_Software_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Software_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Software_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Software_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_3& setAO_Not_An_UPDATE(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Not_An_UPDATE(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Not_An_UPDATE(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Not_An_UPDATE(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_3& setAO_Stop_On_BC_TC_Error(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Stop_On_BC_TC_Error(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Stop_On_BC_TC_Error(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Stop_On_BC_TC_Error(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_3& setAO_Stop_On_BC_TC_Trigger_Error(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Stop_On_BC_TC_Trigger_Error(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Stop_On_BC_TC_Trigger_Error(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Stop_On_BC_TC_Trigger_Error(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_3& setAO_Stop_On_Overrun_Error(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Stop_On_Overrun_Error(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Stop_On_Overrun_Error(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Stop_On_Overrun_Error(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_Trigger_LengthDA_START1         = 0,
			kAO_Trigger_LengthDA_ST1ED          = 1,
		} tAO_Trigger_Length;
		inline tAO_Mode_3& setAO_Trigger_Length(tAO_Trigger_Length fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_Trigger_Length getAO_Trigger_Length(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Trigger_Length(tAO_Trigger_Length fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Trigger_Length readAO_Trigger_Length(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_3& setAO_UC_Switch_Load_Every_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Switch_Load_Every_BC_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UC_Switch_Load_Every_BC_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UC_Switch_Load_Every_BC_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Mode_3& setAO_UI2_Switch_Load_Next_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Switch_Load_Next_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Switch_Load_Next_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Switch_Load_Next_TC(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_START_Select
	//!< ---------------------------------------------------------------------------
	class tAO_START_Select : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x42,
			kId     = 29
		};
		tAO_START_Select();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1,
			kAO_START_EdgeId                     = 2,
			kAO_START_SyncId                     = 3,
			kAO_UI2_External_Gate_SelectId       = 4,
			kAO_AOFREQ_EnableId                  = 5,
			kAO_START_PolarityId                 = 6,
			kAO_UI2_External_Gate_PolarityId     = 7,
			kAO_UI2_Software_GateId              = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_START_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_START_Select& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START_Select& setAO_START_Edge(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START_Edge(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START_Edge(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START_Edge(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START_Select& setAO_START_Sync(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START_Sync(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START_Sync(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START_Sync(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START_Select& setAO_UI2_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_External_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START_Select& setAO_AOFREQ_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_AOFREQ_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_AOFREQ_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_AOFREQ_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START_Select& setAO_START_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_START_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START_Select& setAO_UI2_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_External_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START_Select& setAO_UI2_Software_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Software_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Software_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Software_Gate(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Trigger_Select
	//!< ---------------------------------------------------------------------------
	class tAO_Trigger_Select : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x43,
			kId     = 30
		};
		tAO_Trigger_Select();


		typedef enum {
			kRegisterId                          = 0,
			kAO_START1_SelectId                  = 1,
			kAO_START1_EdgeId                    = 2,
			kAO_START1_SyncId                    = 3,
			kAO_UI2_Source_SelectId              = 4,
			kAO_UI2_Source_PolarityId            = 5,
			kAO_START1_PolarityId                = 6,
			kAO_Delayed_START1Id                 = 7,
			kAO_UI2_External_Gate_EnableId       = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Trigger_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		typedef enum {
			kAO_START1_SelectPulse             = 0,
			kAO_START1_SelectPFI0              = 1,
			kAO_START1_SelectPFI1              = 2,
			kAO_START1_SelectPFI2              = 3,
			kAO_START1_SelectPFI3              = 4,
			kAO_START1_SelectPFI4              = 5,
			kAO_START1_SelectPFI5              = 6,
			kAO_START1_SelectPFI6              = 7,
			kAO_START1_SelectPFI7              = 8,
			kAO_START1_SelectPFI8              = 9,
			kAO_START1_SelectPFI9              = 10,
			kAO_START1_SelectRTSI0             = 11,
			kAO_START1_SelectRTSI1             = 12,
			kAO_START1_SelectRTSI2             = 13,
			kAO_START1_SelectRTSI3             = 14,
			kAO_START1_SelectRTSI4             = 15,
			kAO_START1_SelectRTSI5             = 16,
			kAO_START1_SelectRTSI6             = 17,
			kAO_START1_SelectAI_START1         = 18,
			kAO_START1_SelectLow               = 31,
		} tAO_START1_Select;
		inline tAO_Trigger_Select& setAO_START1_Select(tAO_START1_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_START1_Select getAO_START1_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Select(tAO_START1_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START1_Select readAO_START1_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Trigger_Select& setAO_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_START1_Edge(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_START1_Edge(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Trigger_Select& setAO_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_START1_Sync(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_START1_Sync(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UI2_Source_SelectAO_IN_TIMEBASE1   = 0,
			kAO_UI2_Source_SelectPFI0              = 1,
			kAO_UI2_Source_SelectPFI1              = 2,
			kAO_UI2_Source_SelectPFI2              = 3,
			kAO_UI2_Source_SelectPFI3              = 4,
			kAO_UI2_Source_SelectPFI4              = 5,
			kAO_UI2_Source_SelectPFI5              = 6,
			kAO_UI2_Source_SelectPFI6              = 7,
			kAO_UI2_Source_SelectPFI7              = 8,
			kAO_UI2_Source_SelectPFI8              = 9,
			kAO_UI2_Source_SelectPFI9              = 10,
			kAO_UI2_Source_SelectRTSI0             = 11,
			kAO_UI2_Source_SelectRTSI1             = 12,
			kAO_UI2_Source_SelectRTSI2             = 13,
			kAO_UI2_Source_SelectRTSI3             = 14,
			kAO_UI2_Source_SelectRTSI4             = 15,
			kAO_UI2_Source_SelectRTSI5             = 16,
			kAO_UI2_Source_SelectRTSI6             = 17,
			kAO_UI2_Source_SelectGPCRT0_G_TC       = 18,
			kAO_UI2_Source_SelectGPCRT1_G_TC       = 19,
			kAO_UI2_Source_SelectIN_TIMEBASE2      = 20,
			kAO_UI2_Source_SelectLow               = 31,
		} tAO_UI2_Source_Select;
		inline tAO_Trigger_Select& setAO_UI2_Source_Select(tAO_UI2_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UI2_Source_Select getAO_UI2_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Source_Select(tAO_UI2_Source_Select fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UI2_Source_Select readAO_UI2_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_UI2_Source_PolarityRising_Edge       = 0,
			kAO_UI2_Source_PolarityFalling_Edge      = 1,
		} tAO_UI2_Source_Polarity;
		inline tAO_Trigger_Select& setAO_UI2_Source_Polarity(tAO_UI2_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_UI2_Source_Polarity getAO_UI2_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Source_Polarity(tAO_UI2_Source_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_UI2_Source_Polarity readAO_UI2_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAO_START1_PolarityActive_High       = 0,
			kAO_START1_PolarityRising_Edge       = 0,
			kAO_START1_PolarityActive_Low        = 1,
			kAO_START1_PolarityFalling_Edge      = 1,
		} tAO_START1_Polarity;
		inline tAO_Trigger_Select& setAO_START1_Polarity(tAO_START1_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAO_START1_Polarity getAO_START1_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_START1_Polarity(tAO_START1_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tAO_START1_Polarity readAO_START1_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Trigger_Select& setAO_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Delayed_START1(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Delayed_START1(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Trigger_Select& setAO_UI2_External_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_UI2_External_Gate_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_External_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_UI2_External_Gate_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UI_Load_A
	//!< ---------------------------------------------------------------------------
	class tAO_UI_Load_A : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x28,
			kId     = 31
		};
		tAO_UI_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UI_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UI_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UI_Load_B
	//!< ---------------------------------------------------------------------------
	class tAO_UI_Load_B : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x2a,
			kId     = 32
		};
		tAO_UI_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UI_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UI_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UI2_Load_A
	//!< ---------------------------------------------------------------------------
	class tAO_UI2_Load_A : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x35,
			kId     = 33
		};
		tAO_UI2_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UI2_Load_A& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UI2_Load_A& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UI2_Load_B
	//!< ---------------------------------------------------------------------------
	class tAO_UI2_Load_B : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x37,
			kId     = 34
		};
		tAO_UI2_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UI2_Load_B& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UI2_Load_B& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_BC_Load_A
	//!< ---------------------------------------------------------------------------
	class tAO_BC_Load_A : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x2c,
			kId     = 35
		};
		tAO_BC_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_BC_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_BC_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_BC_Load_B
	//!< ---------------------------------------------------------------------------
	class tAO_BC_Load_B : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x2e,
			kId     = 36
		};
		tAO_BC_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_BC_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_BC_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UC_Load_A
	//!< ---------------------------------------------------------------------------
	class tAO_UC_Load_A : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x30,
			kId     = 37
		};
		tAO_UC_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UC_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UC_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UC_Load_B
	//!< ---------------------------------------------------------------------------
	class tAO_UC_Load_B : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x32,
			kId     = 38
		};
		tAO_UC_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UC_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UC_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//---------------------------------------------------------------------------
	//!<  DIO_Control
	//!< ---------------------------------------------------------------------------
	class tDIO_Control : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xb,
			kId     = 39
		};
		tDIO_Control();


		typedef enum {
			kRegisterId                          = 0,
			kDIO_Pins_DirId                      = 1,
			kDIO_HW_Serial_StartId               = 2,
			kDIO_HW_Serial_EnableId              = 3,
			kDIO_HW_Serial_TimebaseId            = 4,
			kDIO_Software_Serial_ControlId       = 5
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tDIO_Control& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tDIO_Control& setDIO_Pins_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Pins_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_Pins_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_Pins_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tDIO_Control& setDIO_HW_Serial_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_HW_Serial_Start(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_HW_Serial_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_HW_Serial_Start(nMDBG::tStatus2* statusChain = NULL);

		inline tDIO_Control& setDIO_HW_Serial_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_HW_Serial_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_HW_Serial_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_HW_Serial_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tDIO_Control& setDIO_HW_Serial_Timebase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_HW_Serial_Timebase(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_HW_Serial_Timebase(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_HW_Serial_Timebase(nMDBG::tStatus2* statusChain = NULL);

		inline tDIO_Control& setDIO_Software_Serial_Control(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Software_Serial_Control(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_Software_Serial_Control(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_Software_Serial_Control(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  DIO_Output
	//!< ---------------------------------------------------------------------------
	class tDIO_Output : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xa,
			kId     = 40
		};
		tDIO_Output();


		typedef enum {
			kRegisterId                          = 0,
			kDIO_Parallel_Data_OutId             = 1,
			kDIO_Serial_Data_OutId               = 2
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tDIO_Output& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tDIO_Output& setDIO_Parallel_Data_Out(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Parallel_Data_Out(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_Parallel_Data_Out(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_Parallel_Data_Out(nMDBG::tStatus2* statusChain = NULL);

		inline tDIO_Output& setDIO_Serial_Data_Out(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Serial_Data_Out(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_Serial_Data_Out(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_Serial_Data_Out(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G0_Mode
	//!< ---------------------------------------------------------------------------
	class tG0_Mode : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1a,
			kId     = 41
		};
		tG0_Mode();


		typedef enum {
			kRegisterId                          = 0,
			kG0_Gating_ModeId                    = 1,
			kG0_Gate_On_Both_EdgesId             = 2,
			kG0_Trigger_Mode_For_Edge_GateId     = 3,
			kG0_Stop_ModeId                      = 4,
			kG0_Load_Source_SelectId             = 5,
			kG0_Output_ModeId                    = 6,
			kG0_Counting_OnceId                  = 7,
			kG0_Loading_On_TCId                  = 8,
			kG0_Gate_PolarityId                  = 9,
			kG0_Loading_On_GateId                = 10,
			kG0_Reload_Source_SwitchingId        = 11
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG0_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG0_Mode& setG0_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gating_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gating_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Stop_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Stop_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Output_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Output_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Output_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Output_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Counting_Once(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Counting_Once(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Counting_Once(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Counting_Once(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Mode& setG0_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G1_Mode
	//!< ---------------------------------------------------------------------------
	class tG1_Mode : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1b,
			kId     = 42
		};
		tG1_Mode();


		typedef enum {
			kRegisterId                          = 0,
			kG1_Gating_ModeId                    = 1,
			kG1_Gate_On_Both_EdgesId             = 2,
			kG1_Trigger_Mode_For_Edge_GateId     = 3,
			kG1_Stop_ModeId                      = 4,
			kG1_Load_Source_SelectId             = 5,
			kG1_Output_ModeId                    = 6,
			kG1_Counting_OnceId                  = 7,
			kG1_Loading_On_TCId                  = 8,
			kG1_Gate_PolarityId                  = 9,
			kG1_Loading_On_GateId                = 10,
			kG1_Reload_Source_SwitchingId        = 11
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG1_Mode& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG1_Mode& setG1_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gating_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gating_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gate_On_Both_Edges(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Stop_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Stop_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Load_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Output_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Output_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Output_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Output_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Counting_Once(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Counting_Once(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Counting_Once(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Counting_Once(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Loading_On_TC(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gate_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Loading_On_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Mode& setG1_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Reload_Source_Switching(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G0_Command
	//!< ---------------------------------------------------------------------------
	class tG0_Command : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0xc,
			kId     = 43
		};
		tG0_Command();


		typedef enum {
			kRegisterId                          = 0,
			kG0_ArmId                            = 1,
			kG0_Save_TraceId                     = 2,
			kG0_LoadId                           = 3,
			kG0_Analog_Trigger_ResetId           = 4,
			kG0_DisarmId                         = 5,
			kG0_Up_DownId                        = 6,
			kG0_Write_SwitchId                   = 7,
			kG0_Synchronized_GateId              = 8,
			kG0_Little_Big_EndianId              = 9,
			kG0_Bank_Switch_StartId              = 10,
			kG0_Bank_Switch_ModeId               = 11,
			kG0_Bank_Switch_EnableId             = 12,
			kG1_Arm_CopyId                       = 13,
			kG1_Save_Trace_CopyId                = 14,
			kG1_Disarm_CopyId                    = 15
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG0_Command& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG0_Command& setG0_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Save_Trace(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Save_Trace(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Disarm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Disarm(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Up_Down(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Up_Down(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Up_Down(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Up_Down(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG0_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Arm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Arm_Copy(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Command& setG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G1_Command
	//!< ---------------------------------------------------------------------------
	class tG1_Command : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0xe,
			kId     = 44
		};
		tG1_Command();


		typedef enum {
			kRegisterId                          = 0,
			kG1_ArmId                            = 1,
			kG1_Save_TraceId                     = 2,
			kG1_LoadId                           = 3,
			kG1_Analog_Trigger_ResetId           = 4,
			kG1_DisarmId                         = 5,
			kG1_Up_DownId                        = 6,
			kG1_Write_SwitchId                   = 7,
			kG1_Synchronized_GateId              = 8,
			kG1_Little_Big_EndianId              = 9,
			kG1_Bank_Switch_StartId              = 10,
			kG1_Bank_Switch_ModeId               = 11,
			kG1_Bank_Switch_EnableId             = 12,
			kG0_Arm_CopyId                       = 13,
			kG0_Save_Trace_CopyId                = 14,
			kG0_Disarm_CopyId                    = 15
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG1_Command& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG1_Command& setG1_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Arm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Arm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Arm(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Save_Trace(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Save_Trace(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Load(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Load(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Load(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Analog_Trigger_Reset(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Disarm(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Disarm(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Disarm(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Up_Down(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Up_Down(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Up_Down(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Up_Down(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Write_Switch(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Write_Switch(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Write_Switch(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Synchronized_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Little_Big_Endian(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Bank_Switch_Start(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Bank_Switch_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG1_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Bank_Switch_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Arm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Arm_Copy(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Save_Trace_Copy(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Command& setG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Disarm_Copy(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G0_Input_Select
	//!< ---------------------------------------------------------------------------
	class tG0_Input_Select : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x24,
			kId     = 45
		};
		tG0_Input_Select();


		typedef enum {
			kRegisterId                          = 0,
			kG0_Read_Acknowledges_IrqId          = 1,
			kG0_Write_Acknowledges_IrqId         = 2,
			kG0_Source_SelectId                  = 3,
			kG0_Gate_SelectId                    = 4,
			kG0_Gate_Select_Load_SourceId        = 5,
			kG0_OR_GateId                        = 6,
			kG0_Output_PolarityId                = 7,
			kG0_Source_PolarityId                = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG0_Input_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG0_Input_Select& setG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Input_Select& setG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Input_Select& setG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Input_Select& setG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Input_Select& setG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Input_Select& setG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_OR_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_OR_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Input_Select& setG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Output_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Output_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tG0_Input_Select& setG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G1_Input_Select
	//!< ---------------------------------------------------------------------------
	class tG1_Input_Select : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x25,
			kId     = 46
		};
		tG1_Input_Select();


		typedef enum {
			kRegisterId                          = 0,
			kG1_Read_Acknowledges_IrqId          = 1,
			kG1_Write_Acknowledges_IrqId         = 2,
			kG1_Source_SelectId                  = 3,
			kG1_Gate_SelectId                    = 4,
			kG1_Gate_Select_Load_SourceId        = 5,
			kG1_OR_GateId                        = 6,
			kG1_Output_PolarityId                = 7,
			kG1_Source_PolarityId                = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG1_Input_Select& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG1_Input_Select& setG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Read_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Input_Select& setG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Write_Acknowledges_Irq(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Input_Select& setG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Source_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Source_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Input_Select& setG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gate_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Input_Select& setG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Gate_Select_Load_Source(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Input_Select& setG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_OR_Gate(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_OR_Gate(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Input_Select& setG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Output_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Output_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tG1_Input_Select& setG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Source_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Source_Polarity(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G0_Load_A
	//!< ---------------------------------------------------------------------------
	class tG0_Load_A : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1c,
			kId     = 47
		};
		tG0_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG0_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG0_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G0_Autoincrement
	//!< ---------------------------------------------------------------------------
	class tG0_Autoincrement : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x44,
			kId     = 48
		};
		tG0_Autoincrement();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG0_Autoincrement& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG0_Autoincrement& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G0_Load_B
	//!< ---------------------------------------------------------------------------
	class tG0_Load_B : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1e,
			kId     = 49
		};
		tG0_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG0_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG0_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G1_Load_A
	//!< ---------------------------------------------------------------------------
	class tG1_Load_A : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x20,
			kId     = 50
		};
		tG1_Load_A();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG1_Load_A& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG1_Load_A& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G1_Autoincrement
	//!< ---------------------------------------------------------------------------
	class tG1_Autoincrement : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x45,
			kId     = 51
		};
		tG1_Autoincrement();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG1_Autoincrement& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG1_Autoincrement& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  G1_Load_B
	//!< ---------------------------------------------------------------------------
	class tG1_Load_B : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x22,
			kId     = 52
		};
		tG1_Load_B();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tG1_Load_B& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tG1_Load_B& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Generic_Control
	//!< ---------------------------------------------------------------------------
	class tGeneric_Control : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x47,
			kId     = 53
		};
		tGeneric_Control();


		typedef enum {
			kRegisterId                          = 0,
			kControlId                           = 2
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tGeneric_Control& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tGeneric_Control& setControl(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getControl(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeControl(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readControl(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  IO_Bidirection_Pin
	//!< ---------------------------------------------------------------------------
	class tIO_Bidirection_Pin : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x39,
			kId     = 54
		};
		tIO_Bidirection_Pin();


		typedef enum {
			kRegisterId                          = 0,
			kBD_0_Pin_DirId                      = 1,
			kBD_1_Pin_DirId                      = 2,
			kBD_2_Pin_DirId                      = 3,
			kBD_3_Pin_DirId                      = 4,
			kBD_4_Pin_DirId                      = 5,
			kBD_5_Pin_DirId                      = 6,
			kBD_6_Pin_DirId                      = 7,
			kBD_7_Pin_DirId                      = 8,
			kBD_8_Pin_DirId                      = 9,
			kBD_9_Pin_DirId                      = 10
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tIO_Bidirection_Pin& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tIO_Bidirection_Pin& setBD_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_7_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_7_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_7_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_7_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_8_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_8_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_8_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_8_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tIO_Bidirection_Pin& setBD_9_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getBD_9_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeBD_9_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readBD_9_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Analog_Trigger_Etc
	//!< ---------------------------------------------------------------------------
	class tAnalog_Trigger_Etc : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x3d,
			kId     = 55
		};
		tAnalog_Trigger_Etc();


		typedef enum {
			kRegisterId                          = 0,
			kAnalog_Trigger_ModeId               = 1,
			kAnalog_Trigger_EnableId             = 2,
			kAnalog_Trigger_DriveId              = 3,
			kSoftware_TestId                     = 4,
			kMisc_Counter_TCs_Output_EnableId    = 5,
			kGPFO_1_Output_SelectId              = 6,
			kGPFO_0_Output_SelectId              = 8,
			kGPFO_0_Output_EnableId              = 9,
			kGPFO_1_Output_EnableId              = 10
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tAnalog_Trigger_Etc& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAnalog_Trigger_Etc& setAnalog_Trigger_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAnalog_Trigger_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAnalog_Trigger_Mode(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAnalog_Trigger_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setAnalog_Trigger_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAnalog_Trigger_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAnalog_Trigger_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAnalog_Trigger_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setAnalog_Trigger_Drive(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAnalog_Trigger_Drive(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAnalog_Trigger_Drive(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAnalog_Trigger_Drive(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setSoftware_Test(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getSoftware_Test(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeSoftware_Test(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readSoftware_Test(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setMisc_Counter_TCs_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getMisc_Counter_TCs_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeMisc_Counter_TCs_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readMisc_Counter_TCs_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setGPFO_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getGPFO_1_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeGPFO_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readGPFO_1_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setGPFO_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getGPFO_0_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeGPFO_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readGPFO_0_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setGPFO_0_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getGPFO_0_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeGPFO_0_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readGPFO_0_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tAnalog_Trigger_Etc& setGPFO_1_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getGPFO_1_Output_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeGPFO_1_Output_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readGPFO_1_Output_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Interrupt_Control
	//!< ---------------------------------------------------------------------------
	class tInterrupt_Control : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x3b,
			kId     = 56
		};
		tInterrupt_Control();


		typedef enum {
			kRegisterId                          = 0,
			kInterrupt_Output_PolarityId         = 1,
			kInterrupt_Output_On_3_PinsId        = 2,
			kPass_Thru_1_Interrupt_PolarityId    = 3,
			kPass_Thru_0_Interrupt_PolarityId    = 4,
			kInterrupt_A_Output_SelectId         = 6,
			kInterrupt_A_EnableId                = 7,
			kInterrupt_B_Output_SelectId         = 8,
			kInterrupt_B_EnableId                = 9
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tInterrupt_Control& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		typedef enum {
			kInterrupt_Output_PolarityActive_High       = 0,
			kInterrupt_Output_PolarityActive_Low        = 1,
		} tInterrupt_Output_Polarity;
		inline tInterrupt_Control& setInterrupt_Output_Polarity(tInterrupt_Output_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tInterrupt_Output_Polarity getInterrupt_Output_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeInterrupt_Output_Polarity(tInterrupt_Output_Polarity fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Output_Polarity readInterrupt_Output_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Control& setInterrupt_Output_On_3_Pins(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getInterrupt_Output_On_3_Pins(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeInterrupt_Output_On_3_Pins(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readInterrupt_Output_On_3_Pins(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Control& setPass_Thru_1_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getPass_Thru_1_Interrupt_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writePass_Thru_1_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readPass_Thru_1_Interrupt_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Control& setPass_Thru_0_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getPass_Thru_0_Interrupt_Polarity(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writePass_Thru_0_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readPass_Thru_0_Interrupt_Polarity(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Control& setInterrupt_A_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getInterrupt_A_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeInterrupt_A_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readInterrupt_A_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Control& setInterrupt_A_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getInterrupt_A_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeInterrupt_A_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readInterrupt_A_Enable(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Control& setInterrupt_B_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getInterrupt_B_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeInterrupt_B_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readInterrupt_B_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tInterrupt_Control& setInterrupt_B_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getInterrupt_B_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeInterrupt_B_Enable(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readInterrupt_B_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Clock_and_FOUT
	//!< ---------------------------------------------------------------------------
	class tClock_and_FOUT : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x38,
			kId     = 57
		};
		tClock_and_FOUT();


		typedef enum {
			kRegisterId                          = 0,
			kFOUT_DividerId                      = 1,
			kAO_Source_Divide_By_2Id             = 2,
			kAO_Output_Divide_By_2Id             = 3,
			kAI_Source_Divide_By_2Id             = 4,
			kAI_Output_Divide_By_2Id             = 5,
			kClock_To_BoardId                    = 6,
			kClock_To_Board_Divide_By_2Id        = 7,
			kG_Source_Divide_By_2Id              = 8,
			kSlow_Internal_TimebaseId            = 9,
			kSlow_Internal_Time_Divide_By_2Id    = 10,
			kDIO_Serial_Out_Divide_By_2Id        = 11,
			kFOUT_Timebase_SelectId              = 12,
			kFOUT_EnableId                       = 13
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tClock_and_FOUT& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tClock_and_FOUT& setFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getFOUT_Divider(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readFOUT_Divider(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setAO_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Source_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Source_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setAO_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAO_Output_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAO_Output_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setAI_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Source_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Source_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setAI_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Output_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readAI_Output_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setClock_To_Board(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getClock_To_Board(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeClock_To_Board(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readClock_To_Board(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setClock_To_Board_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getClock_To_Board_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeClock_To_Board_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readClock_To_Board_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setG_Source_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG_Source_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG_Source_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG_Source_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setSlow_Internal_Timebase(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getSlow_Internal_Timebase(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeSlow_Internal_Timebase(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readSlow_Internal_Timebase(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setSlow_Internal_Time_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getSlow_Internal_Time_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeSlow_Internal_Time_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tBoolean readSlow_Internal_Time_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setDIO_Serial_Out_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Serial_Out_Divide_By_2(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeDIO_Serial_Out_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readDIO_Serial_Out_Divide_By_2(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setFOUT_Timebase_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getFOUT_Timebase_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeFOUT_Timebase_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readFOUT_Timebase_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tClock_and_FOUT& setFOUT_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getFOUT_Enable(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeFOUT_Enable(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readFOUT_Enable(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Joint_Reset
	//!< ---------------------------------------------------------------------------
	class tJoint_Reset : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x48,
			kId     = 58
		};
		tJoint_Reset();


		typedef enum {
			kRegisterId                          = 0,
			kAI_ResetId                          = 1,
			kAO_ResetId                          = 2,
			kG0_ResetId                          = 3,
			kG1_ResetId                          = 4,
			kAI_Configuration_StartId            = 5,
			kAO_Configuration_StartId            = 6,
			kAO_UI2_Configuration_StartId        = 7,
			kAI_Configuration_EndId              = 9,
			kAO_Configuration_EndId              = 10,
			kAO_UI2_Configuration_EndId          = 11,
			kSoftware_ResetId                    = 12
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tJoint_Reset& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tJoint_Reset& setAI_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Reset(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setAO_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Reset(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setG0_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG0_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG0_Reset(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setG1_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeG1_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readG1_Reset(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setAI_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Configuration_Start(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Configuration_Start(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setAO_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Configuration_Start(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Configuration_Start(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setAO_UI2_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Configuration_Start(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Configuration_Start(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setAI_Configuration_End(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Configuration_End(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAI_Configuration_End(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAI_Configuration_End(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setAO_Configuration_End(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Configuration_End(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_Configuration_End(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_Configuration_End(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setAO_UI2_Configuration_End(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Configuration_End(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeAO_UI2_Configuration_End(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readAO_UI2_Configuration_End(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Reset& setSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getSoftware_Reset(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readSoftware_Reset(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  RTSI_Trig_Direction
	//!< ---------------------------------------------------------------------------
	class tRTSI_Trig_Direction : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x3a,
			kId     = 59
		};
		tRTSI_Trig_Direction();


		typedef enum {
			kRegisterId                          = 0,
			kRTSI_Clock_ModeId                   = 1,
			kRTSI_Trig_0_Pin_DirId               = 3,
			kRTSI_Trig_1_Pin_DirId               = 4,
			kRTSI_Trig_2_Pin_DirId               = 5,
			kRTSI_Trig_3_Pin_DirId               = 6,
			kRTSI_Trig_4_Pin_DirId               = 7,
			kRTSI_Trig_5_Pin_DirId               = 8,
			kRTSI_Trig_6_Pin_DirId               = 9
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tRTSI_Trig_Direction& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		typedef enum {
			kRTSI_Clock_ModeRTSI_OSC_Is_Input   = 0,
			kRTSI_Clock_ModeRTSI_OSC_Is_Ouput   = 1,
			kRTSI_Clock_ModeSlave_Clock       = 2,
			kRTSI_Clock_ModeMaster_Clock      = 3,
		} tRTSI_Clock_Mode;
		inline tRTSI_Trig_Direction& setRTSI_Clock_Mode(tRTSI_Clock_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tRTSI_Clock_Mode getRTSI_Clock_Mode(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Clock_Mode(tRTSI_Clock_Mode fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Clock_Mode readRTSI_Clock_Mode(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_Direction& setRTSI_Trig_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_Direction& setRTSI_Trig_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_Direction& setRTSI_Trig_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_Direction& setRTSI_Trig_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_Direction& setRTSI_Trig_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_4_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_Direction& setRTSI_Trig_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_5_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_Direction& setRTSI_Trig_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_6_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  RTSI_Trig_A_Output
	//!< ---------------------------------------------------------------------------
	class tRTSI_Trig_A_Output : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x4f,
			kId     = 60
		};
		tRTSI_Trig_A_Output();


		typedef enum {
			kRegisterId                          = 0,
			kRTSI_Trig_0_Output_SelectId         = 1,
			kRTSI_Trig_1_Output_SelectId         = 2,
			kRTSI_Trig_2_Output_SelectId         = 3,
			kRTSI_Trig_3_Output_SelectId         = 4
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tRTSI_Trig_A_Output& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tRTSI_Trig_A_Output& setRTSI_Trig_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_0_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_0_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_A_Output& setRTSI_Trig_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_1_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_1_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_A_Output& setRTSI_Trig_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_2_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_2_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_A_Output& setRTSI_Trig_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_3_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_3_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  RTSI_Trig_B_Output
	//!< ---------------------------------------------------------------------------
	class tRTSI_Trig_B_Output : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x50,
			kId     = 61
		};
		tRTSI_Trig_B_Output();


		typedef enum {
			kRegisterId                          = 0,
			kRTSI_Trig_4_Output_SelectId         = 1,
			kRTSI_Trig_5_Output_SelectId         = 2,
			kRTSI_Trig_6_Output_SelectId         = 3,
			kRTSI_Sub_Selection_1Id              = 5
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tRTSI_Trig_B_Output& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tRTSI_Trig_B_Output& setRTSI_Trig_4_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_4_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_4_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_4_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_B_Output& setRTSI_Trig_5_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_5_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_5_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_5_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_B_Output& setRTSI_Trig_6_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Trig_6_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Trig_6_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Trig_6_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Trig_B_Output& setRTSI_Sub_Selection_1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Sub_Selection_1(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Sub_Selection_1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Sub_Selection_1(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  RTSI_Board
	//!< ---------------------------------------------------------------------------
	class tRTSI_Board : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x51,
			kId     = 62
		};
		tRTSI_Board();


		typedef enum {
			kRegisterId                          = 0,
			kRTSI_Board_0_Output_SelectId        = 1,
			kRTSI_Board_1_Output_SelectId        = 2,
			kRTSI_Board_2_Output_SelectId        = 3,
			kRTSI_Board_3_Output_SelectId        = 4,
			kRTSI_Board_0_Pin_DirId              = 5,
			kRTSI_Board_1_Pin_DirId              = 6,
			kRTSI_Board_2_Pin_DirId              = 7,
			kRTSI_Board_3_Pin_DirId              = 8
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tRTSI_Board& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tRTSI_Board& setRTSI_Board_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_0_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_0_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Board& setRTSI_Board_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_1_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_1_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Board& setRTSI_Board_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_2_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_2_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Board& setRTSI_Board_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_3_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_3_Output_Select(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Board& setRTSI_Board_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_0_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Board& setRTSI_Board_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_1_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Board& setRTSI_Board_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_2_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		inline tRTSI_Board& setRTSI_Board_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRTSI_Board_3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL) const;

		inline void writeRTSI_Board_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRTSI_Board_3_Pin_Dir(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Write_Strobe_0
	//!< ---------------------------------------------------------------------------
	class tWrite_Strobe_0 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x52,
			kId     = 63
		};
		tWrite_Strobe_0();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tWrite_Strobe_0& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tWrite_Strobe_0& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Write_Strobe_1
	//!< ---------------------------------------------------------------------------
	class tWrite_Strobe_1 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x53,
			kId     = 64
		};
		tWrite_Strobe_1();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tWrite_Strobe_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tWrite_Strobe_1& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Write_Strobe_2
	//!< ---------------------------------------------------------------------------
	class tWrite_Strobe_2 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x54,
			kId     = 65
		};
		tWrite_Strobe_2();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tWrite_Strobe_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tWrite_Strobe_2& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  Write_Strobe_3
	//!< ---------------------------------------------------------------------------
	class tWrite_Strobe_3 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x55,
			kId     = 66
		};
		tWrite_Strobe_3();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		inline void flushBus(nMDBG::tStatus2* statusChain = NULL);

		//!<  Register Accessors (Compile-time selectable)
		inline tWrite_Strobe_3& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void flush(nMDBG::tStatus2* statusChain = NULL);

		inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tWrite_Strobe_3& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline void write(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AI_DIV_Save
	//!< ---------------------------------------------------------------------------
	class tAI_DIV_Save : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1a,
			kId     = 67
		};
		tAI_DIV_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAI_DIV_Save& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAI_DIV_Save& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AI_SC_Save
	//!< ---------------------------------------------------------------------------
	class tAI_SC_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x42,
			kId     = 68
		};
		tAI_SC_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAI_SC_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAI_SC_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AI_SI_Save
	//!< ---------------------------------------------------------------------------
	class tAI_SI_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x40,
			kId     = 69
		};
		tAI_SI_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAI_SI_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAI_SI_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AI_SI2_Save
	//!< ---------------------------------------------------------------------------
	class tAI_SI2_Save : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x19,
			kId     = 70
		};
		tAI_SI2_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAI_SI2_Save& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAI_SI2_Save& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AI_Status_1
	//!< ---------------------------------------------------------------------------
	class tAI_Status_1 : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0x4,
			kId     = 71
		};
		tAI_Status_1();


		typedef enum {
			kRegisterId                          = 0,
			kPass_Thru_0_Interrupt_StId          = 1,
			kAI_FIFO_Request_StId                = 2,
			kG0_Gate_Interrupt_StId              = 3,
			kG0_TC_StId                          = 4,
			kAI_STOP_StId                        = 5,
			kAI_START_StId                       = 6,
			kAI_SC_TC_StId                       = 7,
			kAI_START1_StId                      = 8,
			kAI_START2_StId                      = 9,
			kAI_SC_TC_Error_StId                 = 10,
			kAI_Overflow_StId                    = 11,
			kAI_Overrun_StId                     = 12,
			kAI_FIFO_Empty_StId                  = 13,
			kAI_FIFO_Half_Full_StId              = 14,
			kAI_FIFO_Full_StId                   = 15,
			kInterrupt_A_StId                    = 16
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAI_Status_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAI_Status_1& setPass_Thru_0_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getPass_Thru_0_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readPass_Thru_0_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_FIFO_Request_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_FIFO_Request_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_FIFO_Request_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setG0_Gate_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getG0_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readG0_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setG0_TC_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getG0_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readG0_TC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_STOP_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_STOP_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_STOP_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_START_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_START_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_SC_TC_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SC_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_SC_TC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_START1_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START1_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_START1_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_START2_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_START2_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_START2_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_SC_TC_Error_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SC_TC_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_SC_TC_Error_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_Overflow_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Overflow_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_Overflow_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_Overrun_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_Overrun_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_Overrun_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_FIFO_Empty_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_FIFO_Empty_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_FIFO_Empty_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_FIFO_Half_Full_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_FIFO_Half_Full_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_FIFO_Half_Full_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setAI_FIFO_Full_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_FIFO_Full_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_FIFO_Full_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_1& setInterrupt_A_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getInterrupt_A_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readInterrupt_A_St(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AI_Status_2
	//!< ---------------------------------------------------------------------------
	class tAI_Status_2 : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0xa,
			kId     = 72
		};
		tAI_Status_2();


		typedef enum {
			kRegisterId                          = 0,
			kAI_SC_Armed_StId                    = 1,
			kAI_SC_Next_Load_Source_StId         = 2,
			kAI_SC_Save_StId                     = 3,
			kAI_SC_Q_StId                        = 4,
			kAI_SI_Armed_StId                    = 5,
			kAI_SI_Next_Load_Source_StId         = 6,
			kAI_SI_Count_Enable_StId             = 8,
			kAI_SI_Q_StId                        = 9,
			kAI_SI2_Armed_StId                   = 10,
			kAI_SI2_Next_Load_Source_StId        = 11,
			kAI_DIV_Q_StId                       = 12,
			kAI_DIV_Armed_StId                   = 13,
			kReserved_2000_StId                  = 14
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAI_Status_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAI_Status_2& setAI_SC_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SC_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_SC_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SC_Next_Load_Source_StLoad_A            = 0,
			kAI_SC_Next_Load_Source_StLoad_B            = 1,
		} tAI_SC_Next_Load_Source_St;
		inline tAI_Status_2& setAI_SC_Next_Load_Source_St(tAI_SC_Next_Load_Source_St fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SC_Next_Load_Source_St getAI_SC_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tAI_SC_Next_Load_Source_St readAI_SC_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_SC_Save_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SC_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_SC_Save_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_SC_Q_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SC_Q_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_SC_Q_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_SI_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SI_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_SI_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI_Next_Load_Source_StLoad_A            = 0,
			kAI_SI_Next_Load_Source_StLoad_B            = 1,
		} tAI_SI_Next_Load_Source_St;
		inline tAI_Status_2& setAI_SI_Next_Load_Source_St(tAI_SI_Next_Load_Source_St fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI_Next_Load_Source_St getAI_SI_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tAI_SI_Next_Load_Source_St readAI_SI_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_SI_Count_Enable_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Count_Enable_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_SI_Count_Enable_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_SI_Q_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI_Q_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_SI_Q_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_SI2_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_SI2_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_SI2_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		typedef enum {
			kAI_SI2_Next_Load_Source_StLoad_A            = 0,
			kAI_SI2_Next_Load_Source_StLoad_B            = 1,
		} tAI_SI2_Next_Load_Source_St;
		inline tAI_Status_2& setAI_SI2_Next_Load_Source_St(tAI_SI2_Next_Load_Source_St fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tAI_SI2_Next_Load_Source_St getAI_SI2_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tAI_SI2_Next_Load_Source_St readAI_SI2_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_DIV_Q_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_DIV_Q_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_DIV_Q_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setAI_DIV_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getAI_DIV_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readAI_DIV_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAI_Status_2& setReserved_2000_St(tBoolean fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline tBoolean getReserved_2000_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline tBoolean readReserved_2000_St(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_BC_Save
	//!< ---------------------------------------------------------------------------
	class tAO_BC_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x12,
			kId     = 73
		};
		tAO_BC_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_BC_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_BC_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Status_1
	//!< ---------------------------------------------------------------------------
	class tAO_Status_1 : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0x6,
			kId     = 74
		};
		tAO_Status_1();


		typedef enum {
			kRegisterId                          = 0,
			kPass_Thru_1_Interrupt_StId          = 1,
			kAO_FIFO_Request_StId                = 2,
			kG1_Gate_Interrupt_StId              = 3,
			kG1_TC_StId                          = 4,
			kAO_UI2_TC_StId                      = 5,
			kAO_UPDATE_StId                      = 6,
			kAO_UC_TC_StId                       = 7,
			kAO_BC_TC_StId                       = 8,
			kAO_START1_StId                      = 9,
			kAO_Overrun_StId                     = 10,
			kAO_START_StId                       = 11,
			kAO_BC_TC_Error_StId                 = 12,
			kAO_FIFO_Empty_StId                  = 13,
			kAO_FIFO_Half_Full_StId              = 14,
			kAO_FIFO_Full_StId                   = 15,
			kInterrupt_B_StId                    = 16
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Status_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_Status_1& setPass_Thru_1_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getPass_Thru_1_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readPass_Thru_1_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_FIFO_Request_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_FIFO_Request_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_FIFO_Request_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setG1_Gate_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Gate_Interrupt_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setG1_TC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_TC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_UI2_TC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI2_TC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_UPDATE_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UPDATE_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UPDATE_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_UC_TC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UC_TC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_BC_TC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_TC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_TC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_START1_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START1_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_START1_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_Overrun_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Overrun_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_Overrun_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_START_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_START_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_START_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_BC_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_TC_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_TC_Error_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_FIFO_Empty_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_FIFO_Empty_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_FIFO_Empty_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_FIFO_Half_Full_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_FIFO_Half_Full_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_FIFO_Half_Full_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setAO_FIFO_Full_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_FIFO_Full_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_FIFO_Full_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_1& setInterrupt_B_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getInterrupt_B_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readInterrupt_B_St(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_Status_2
	//!< ---------------------------------------------------------------------------
	class tAO_Status_2 : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0xc,
			kId     = 75
		};
		tAO_Status_2();


		typedef enum {
			kRegisterId                          = 0,
			kAO_BC_Armed_StId                    = 1,
			kAO_BC_Next_Load_Source_StId         = 2,
			kAO_BC_Save_StId                     = 3,
			kAO_BC_Q_StId                        = 4,
			kAO_BC_TC_Trigger_Error_StId         = 5,
			kAO_UI_Armed_StId                    = 6,
			kAO_UI_Next_Load_Source_StId         = 7,
			kAO_UC_Save_StId                     = 8,
			kAO_UI_Counting_StId                 = 9,
			kAO_UI_Q_StId                        = 10,
			kAO_UI2_TC_Error_StId                = 11,
			kAO_UI2_Armed_StId                   = 12,
			kAO_UI2_Next_Load_Source_StId        = 13,
			kAO_UI2_Counting_StId                = 14,
			kAO_UC_Armed_StId                    = 15,
			kAO_UC_Next_Load_Source_StId         = 16
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_Status_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_Status_2& setAO_BC_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_BC_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_BC_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_Save_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_BC_Q_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Q_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_Q_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_BC_TC_Trigger_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_TC_Trigger_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_TC_Trigger_Error_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UC_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UC_Save_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI_Counting_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Counting_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI_Counting_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI_Q_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI_Q_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI_Q_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI2_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_TC_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI2_TC_Error_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI2_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI2_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI2_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI2_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UI2_Counting_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Counting_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI2_Counting_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UC_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UC_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		inline tAO_Status_2& setAO_UC_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UC_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UC_Save
	//!< ---------------------------------------------------------------------------
	class tAO_UC_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x14,
			kId     = 76
		};
		tAO_UC_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UC_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UC_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UI_Save
	//!< ---------------------------------------------------------------------------
	class tAO_UI_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x10,
			kId     = 77
		};
		tAO_UI_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UI_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UI_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  AO_UI2_Save
	//!< ---------------------------------------------------------------------------
	class tAO_UI2_Save : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x17,
			kId     = 78
		};
		tAO_UI2_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tAO_UI2_Save& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tAO_UI2_Save& set(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 read(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!<  DIO_Parallel_Input
	//!< ---------------------------------------------------------------------------
	class tDIO_Parallel_Input : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0xe,
			kId     = 79
		};
		tDIO_Parallel_Input();


		typedef enum {
			kRegisterId                          = 0,
			kDIO_Parallel_Data_In_StId           = 1,
			kReserved_1_StId                     = 2
		} tId;

		inline tSTC* registerMap(void);

		//!<  Register Accessors (Compile-time selectable)
		inline tDIO_Parallel_Input& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!<  Field Accessors (Compile-time selectable)
		inline tDIO_Parallel_Input& setDIO_Parallel_Data_In_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Parallel_Data_In_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readDIO_Parallel_Data_In_St(nMDBG::tStatus2* statusChain = NULL);

		inline tDIO_Parallel_Input& setReserved_1_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getReserved_1_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readReserved_1_St(nMDBG::tStatus2* statusChain = NULL);

		//!<  Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!<  ---------------------------------------------------------------------------
	//!< DIO_Serial_Input
	//!<  ---------------------------------------------------------------------------
	class tDIO_Serial_Input : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1c,
			kId     = 80
		};
		tDIO_Serial_Input();


		typedef enum {
			kRegisterId                          = 0,
			kDIO_Serial_Data_In_StId             = 1,
			kReserved_2_StId                     = 2
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tDIO_Serial_Input& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tDIO_Serial_Input& setDIO_Serial_Data_In_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Serial_Data_In_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readDIO_Serial_Data_In_St(nMDBG::tStatus2* statusChain = NULL);

		inline tDIO_Serial_Input& setReserved_2_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getReserved_2_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readReserved_2_St(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< G0_HW_Save
	//!< ---------------------------------------------------------------------------
	class tG0_HW_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x8,
			kId     = 81
		};
		tG0_HW_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tG0_HW_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tG0_HW_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< G0_Save
	//!< ---------------------------------------------------------------------------
	class tG0_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xc,
			kId     = 82
		};
		tG0_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tG0_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tG0_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< G1_HW_Save
	//!< ---------------------------------------------------------------------------
	class tG1_HW_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xa,
			kId     = 83
		};
		tG1_HW_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tG1_HW_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tG1_HW_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< G1_Save
	//!< ---------------------------------------------------------------------------
	class tG1_Save : public tReg32IOWindowed16
	{
	public:
		typedef tReg32IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0xe,
			kId     = 84
		};
		tG1_Save();


		typedef enum {
			kRegisterId                          = 0,
			kDefaultId                           = 1
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tG1_Save& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
		inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tG1_Save& set(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u32 get(nMDBG::tStatus2* statusChain = NULL) const;

		inline u32 read(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u32 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< G_Status
	//!< ---------------------------------------------------------------------------
	class tG_Status : public tReg16IODirect16
	{
	public:
		typedef tReg16IODirect16 tIOStrategy;

		enum {
			kOffset = 0x8,
			kId     = 85
		};
		tG_Status();


		typedef enum {
			kRegisterId                          = 0,
			kG0_Save_StId                        = 1,
			kG1_Save_StId                        = 2,
			kG0_Counting_StId                    = 3,
			kG1_Counting_StId                    = 4,
			kG0_Next_Load_Source_StId            = 5,
			kG1_Next_Load_Source_StId            = 6,
			kG0_Stale_Data_StId                  = 7,
			kG1_Stale_Data_StId                  = 8,
			kG0_Armed_StId                       = 9,
			kG1_Armed_StId                       = 10,
			kG0_No_Load_Between_Gates_StId       = 11,
			kG1_No_Load_Between_Gates_StId       = 12,
			kG0_TC_Error_StId                    = 13,
			kG1_TC_Error_StId                    = 14,
			kG0_Gate_Error_StId                  = 15,
			kG1_Gate_Error_StId                  = 16
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tG_Status& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tG_Status& setG0_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Save_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Save_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG0_Counting_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Counting_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Counting_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_Counting_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Counting_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Counting_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG0_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Next_Load_Source_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG0_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG0_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_Armed_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Armed_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Armed_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG0_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_No_Load_Between_Gates_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG0_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_TC_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_TC_Error_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_TC_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_TC_Error_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG0_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL);

		inline tG_Status& setG1_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Gate_Error_St(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< Joint_Status_1
	//!< ---------------------------------------------------------------------------
	class tJoint_Status_1 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1b,
			kId     = 86
		};
		tJoint_Status_1();


		typedef enum {
			kRegisterId                          = 0,
			kG0_Bank_StId                        = 1,
			kG1_Bank_StId                        = 2,
			kG0_Gate_StId                        = 3,
			kG1_Gate_StId                        = 4,
			kAI_Sc_Gate_StId                     = 5,
			kAI_Start_Stop_Gate_StId             = 6,
			kAO_BC_Gate_StId                     = 7,
			kAO_Start_Stop_Gate_StId             = 8,
			kAI_SI2_Q_StId                       = 9,
			kAI_External_Gate_StId               = 10,
			kAO_External_Gate_StId               = 11,
			kDIO_Serial_IO_In_Progress_StId      = 12,
			kAO_UI2_Gate_StId                    = 13,
			kAO_UC_Q_StId                        = 14,
			kAI_Last_Shiftin_StId                = 15
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tJoint_Status_1& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tJoint_Status_1& setG0_Bank_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Bank_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Bank_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setG1_Bank_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Bank_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Bank_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setG0_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setG1_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAI_Sc_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Sc_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_Sc_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAI_Start_Stop_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Start_Stop_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_Start_Stop_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAO_BC_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_BC_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_BC_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAO_Start_Stop_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_Start_Stop_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_Start_Stop_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAI_SI2_Q_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SI2_Q_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_SI2_Q_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAI_External_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_External_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_External_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAO_External_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_External_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_External_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setDIO_Serial_IO_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getDIO_Serial_IO_In_Progress_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readDIO_Serial_IO_In_Progress_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAO_UI2_Gate_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UI2_Gate_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UI2_Gate_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAO_UC_Q_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_UC_Q_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_UC_Q_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_1& setAI_Last_Shiftin_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Last_Shiftin_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_Last_Shiftin_St(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< Joint_Status_2
	//!< ---------------------------------------------------------------------------
	class tJoint_Status_2 : public tReg16IOWindowed16
	{
	public:
		typedef tReg16IOWindowed16 tIOStrategy;

		enum {
			kOffset = 0x1d,
			kId     = 87
		};
		tJoint_Status_2();


		typedef enum {
			kRegisterId                          = 0,
			kG0_Output_StId                      = 1,
			kG1_Output_StId                      = 2,
			kAO_STOP_StId                        = 3,
			kAI_SOC_StId                         = 4,
			kAI_EOC_StId                         = 5,
			kAO_TMRDACWRs_In_Progress_StId       = 6,
			kAI_Config_Memory_Empty_StId         = 7,
			kAI_Scan_In_Progress_StId            = 8,
			kGeneric_StatusId                    = 9,
			kG0_HW_Save_StId                     = 10,
			kG1_Hw_Save_StId                     = 11,
			kG0_Permanent_Stale_Data_StId        = 12,
			kG1_Permanent_Stale_Data_StId        = 13
		} tId;

		inline tSTC* registerMap(void);

		//!< Register Accessors (Compile-time selectable)
		inline tJoint_Status_2& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

		inline void refresh(nMDBG::tStatus2* statusChain = NULL);

		inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

		//!< Field Accessors (Compile-time selectable)
		inline tJoint_Status_2& setG0_Output_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Output_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Output_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setG1_Output_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Output_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Output_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setAO_STOP_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_STOP_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_STOP_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setAI_SOC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_SOC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_SOC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setAI_EOC_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_EOC_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_EOC_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setAO_TMRDACWRs_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAO_TMRDACWRs_In_Progress_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAO_TMRDACWRs_In_Progress_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setAI_Config_Memory_Empty_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Config_Memory_Empty_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_Config_Memory_Empty_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setAI_Scan_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getAI_Scan_In_Progress_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readAI_Scan_In_Progress_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setGeneric_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getGeneric_Status(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readGeneric_Status(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setG0_HW_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_HW_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_HW_Save_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setG1_Hw_Save_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Hw_Save_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Hw_Save_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setG0_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG0_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG0_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

		inline tJoint_Status_2& setG1_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
		inline u16 getG1_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL) const;

		inline u16 readG1_Permanent_Stale_Data_St(nMDBG::tStatus2* statusChain = NULL);

		//!< Run-time selectable Register/Field Accessors
	private:
		u16 _softCopy;

		inline void setRegisterMap(tSTC* pSTC);
		tSTC* _STC;

		friend class tSTC;

	};

	//!< ---------------------------------------------------------------------------
	//!< AI_Command_1
	//!< ---------------------------------------------------------------------------
	tAI_Command_1 AI_Command_1;

	//!< ---------------------------------------------------------------------------
	//!< AI_Command_2
	//!< ---------------------------------------------------------------------------
	tAI_Command_2 AI_Command_2;

	//!< ---------------------------------------------------------------------------
	//!< Interrupt_A_Ack
	//!< ---------------------------------------------------------------------------
	tInterrupt_A_Ack Interrupt_A_Ack;

	//!< ---------------------------------------------------------------------------
	//!< Interrupt_A_Enable
	//!< ---------------------------------------------------------------------------
	tInterrupt_A_Enable Interrupt_A_Enable;

	//!< ---------------------------------------------------------------------------
	//!< Second_Irq_A_Enable
	//!< ---------------------------------------------------------------------------
	tSecond_Irq_A_Enable Second_Irq_A_Enable;

	//!< ---------------------------------------------------------------------------
	//!< AI_Personal
	//!< ---------------------------------------------------------------------------
	tAI_Personal AI_Personal;

	//!< ---------------------------------------------------------------------------
	//!< AI_Mode_1
	//!< ---------------------------------------------------------------------------
	tAI_Mode_1 AI_Mode_1;

	//!< ---------------------------------------------------------------------------
	//!< AI_Mode_2
	//!< ---------------------------------------------------------------------------
	tAI_Mode_2 AI_Mode_2;

	//!< ---------------------------------------------------------------------------
	//!< AI_Output_Control
	//!< ---------------------------------------------------------------------------
	tAI_Output_Control AI_Output_Control;

	//!< ---------------------------------------------------------------------------
	//!< AI_Mode_3
	//!< ---------------------------------------------------------------------------
	tAI_Mode_3 AI_Mode_3;

	//!< ---------------------------------------------------------------------------
	//!< AI_START_STOP_Select
	//!< ---------------------------------------------------------------------------
	tAI_START_STOP_Select AI_START_STOP_Select;

	//!< ---------------------------------------------------------------------------
	//!< AI_Trigger_Select
	//!< ---------------------------------------------------------------------------
	tAI_Trigger_Select AI_Trigger_Select;

	//!< ---------------------------------------------------------------------------
	//!< AI_SI_Load_A
	//!< ---------------------------------------------------------------------------
	tAI_SI_Load_A AI_SI_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AI_SI_Load_B
	//!< ---------------------------------------------------------------------------
	tAI_SI_Load_B AI_SI_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< AI_SI2_Load_A
	//!< ---------------------------------------------------------------------------
	tAI_SI2_Load_A AI_SI2_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AI_SI2_Load_B
	//!< ---------------------------------------------------------------------------
	tAI_SI2_Load_B AI_SI2_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< AI_SC_Load_A
	//!< ---------------------------------------------------------------------------
	tAI_SC_Load_A AI_SC_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AI_SC_Load_B
	//!< ---------------------------------------------------------------------------
	tAI_SC_Load_B AI_SC_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< AI_DIV_Load_A
	//!< ---------------------------------------------------------------------------
	tAI_DIV_Load_A AI_DIV_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AO_Personal
	//!< ---------------------------------------------------------------------------
	tAO_Personal AO_Personal;

	//!< ---------------------------------------------------------------------------
	//!< AO_Command_1
	//!< ---------------------------------------------------------------------------
	tAO_Command_1 AO_Command_1;

	//!< ---------------------------------------------------------------------------
	//!< AO_Command_2
	//!< ---------------------------------------------------------------------------
	tAO_Command_2 AO_Command_2;

	//!< ---------------------------------------------------------------------------
	//!< Interrupt_B_Ack
	//!< ---------------------------------------------------------------------------
	tInterrupt_B_Ack Interrupt_B_Ack;

	//!< ---------------------------------------------------------------------------
	//!< Interrupt_B_Enable
	//!< ---------------------------------------------------------------------------
	tInterrupt_B_Enable Interrupt_B_Enable;

	//!< ---------------------------------------------------------------------------
	//!< Second_Irq_B_Enable
	//!< ---------------------------------------------------------------------------
	tSecond_Irq_B_Enable Second_Irq_B_Enable;

	//!< ---------------------------------------------------------------------------
	//!< AO_Mode_1
	//!< ---------------------------------------------------------------------------
	tAO_Mode_1 AO_Mode_1;

	//!< ---------------------------------------------------------------------------
	//!< AO_Mode_2
	//!< ---------------------------------------------------------------------------
	tAO_Mode_2 AO_Mode_2;

	//!< ---------------------------------------------------------------------------
	//!< AO_Output_Control
	//!< ---------------------------------------------------------------------------
	tAO_Output_Control AO_Output_Control;

	//!< ---------------------------------------------------------------------------
	//!< AO_Mode_3
	//!< ---------------------------------------------------------------------------
	tAO_Mode_3 AO_Mode_3;

	//!< ---------------------------------------------------------------------------
	//!< AO_START_Select
	//!< ---------------------------------------------------------------------------
	tAO_START_Select AO_START_Select;

	//!< ---------------------------------------------------------------------------
	//!< AO_Trigger_Select
	//!< ---------------------------------------------------------------------------
	tAO_Trigger_Select AO_Trigger_Select;

	//!< ---------------------------------------------------------------------------
	//!< AO_UI_Load_A
	//!< ---------------------------------------------------------------------------
	tAO_UI_Load_A AO_UI_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AO_UI_Load_B
	//!< ---------------------------------------------------------------------------
	tAO_UI_Load_B AO_UI_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< AO_UI2_Load_A
	//!< ---------------------------------------------------------------------------
	tAO_UI2_Load_A AO_UI2_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AO_UI2_Load_B
	//!< ---------------------------------------------------------------------------
	tAO_UI2_Load_B AO_UI2_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< AO_BC_Load_A
	//!< ---------------------------------------------------------------------------
	tAO_BC_Load_A AO_BC_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AO_BC_Load_B
	//!< ---------------------------------------------------------------------------
	tAO_BC_Load_B AO_BC_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< AO_UC_Load_A
	//!< ---------------------------------------------------------------------------
	tAO_UC_Load_A AO_UC_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< AO_UC_Load_B
	//!< ---------------------------------------------------------------------------
	tAO_UC_Load_B AO_UC_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< DIO_Control
	//!< ---------------------------------------------------------------------------
	tDIO_Control DIO_Control;

	//!< ---------------------------------------------------------------------------
	//!< DIO_Output
	//!< ---------------------------------------------------------------------------
	tDIO_Output DIO_Output;

	//!< ---------------------------------------------------------------------------
	//!< G0_Mode
	//!< ---------------------------------------------------------------------------
	tG0_Mode G0_Mode;

	//!< ---------------------------------------------------------------------------
	//!< G1_Mode
	//!< ---------------------------------------------------------------------------
	tG1_Mode G1_Mode;

	//!< ---------------------------------------------------------------------------
	//!< G0_Command
	//!< ---------------------------------------------------------------------------
	tG0_Command G0_Command;

	//!< ---------------------------------------------------------------------------
	//!< G1_Command
	//!< ---------------------------------------------------------------------------
	tG1_Command G1_Command;

	//!< ---------------------------------------------------------------------------
	//!< G0_Input_Select
	//!< ---------------------------------------------------------------------------
	tG0_Input_Select G0_Input_Select;

	//!< ---------------------------------------------------------------------------
	//!< G1_Input_Select
	//!< ---------------------------------------------------------------------------
	tG1_Input_Select G1_Input_Select;

	//!< ---------------------------------------------------------------------------
	//!< G0_Load_A
	//!< ---------------------------------------------------------------------------
	tG0_Load_A G0_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< G0_Autoincrement
	//!< ---------------------------------------------------------------------------
	tG0_Autoincrement G0_Autoincrement;

	//!< ---------------------------------------------------------------------------
	//!< G0_Load_B
	//!< ---------------------------------------------------------------------------
	tG0_Load_B G0_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< G1_Load_A
	//!< ---------------------------------------------------------------------------
	tG1_Load_A G1_Load_A;

	//!< ---------------------------------------------------------------------------
	//!< G1_Autoincrement
	//!< ---------------------------------------------------------------------------
	tG1_Autoincrement G1_Autoincrement;

	//!< ---------------------------------------------------------------------------
	//!< G1_Load_B
	//!< ---------------------------------------------------------------------------
	tG1_Load_B G1_Load_B;

	//!< ---------------------------------------------------------------------------
	//!< Generic_Control
	//!< ---------------------------------------------------------------------------
	tGeneric_Control Generic_Control;

	//!< ---------------------------------------------------------------------------
	//!< IO_Bidirection_Pin
	//!< ---------------------------------------------------------------------------
	tIO_Bidirection_Pin IO_Bidirection_Pin;

	//!< ---------------------------------------------------------------------------
	//!< Analog_Trigger_Etc
	//!< ---------------------------------------------------------------------------
	tAnalog_Trigger_Etc Analog_Trigger_Etc;

	//!< ---------------------------------------------------------------------------
	//!< Interrupt_Control
	//!< ---------------------------------------------------------------------------
	tInterrupt_Control Interrupt_Control;

	//!< ---------------------------------------------------------------------------
	//!< Clock_and_FOUT
	//!< ---------------------------------------------------------------------------
	tClock_and_FOUT Clock_and_FOUT;

	//!< ---------------------------------------------------------------------------
	//!< Joint_Reset
	//!< ---------------------------------------------------------------------------
	tJoint_Reset Joint_Reset;

	//!< ---------------------------------------------------------------------------
	//!< RTSI_Trig_Direction
	//!< ---------------------------------------------------------------------------
	tRTSI_Trig_Direction RTSI_Trig_Direction;

	//!< ---------------------------------------------------------------------------
	//!< RTSI_Trig_A_Output
	//!< ---------------------------------------------------------------------------
	tRTSI_Trig_A_Output RTSI_Trig_A_Output;

	//!< ---------------------------------------------------------------------------
	//!< RTSI_Trig_B_Output
	//!< ---------------------------------------------------------------------------
	tRTSI_Trig_B_Output RTSI_Trig_B_Output;

	//!< ---------------------------------------------------------------------------
	//!< RTSI_Board
	//!< ---------------------------------------------------------------------------
	tRTSI_Board RTSI_Board;

	//!< ---------------------------------------------------------------------------
	//!< Write_Strobe_0
	//!< ---------------------------------------------------------------------------
	tWrite_Strobe_0 Write_Strobe_0;

	//!< ---------------------------------------------------------------------------
	//!< Write_Strobe_1
	//!< ---------------------------------------------------------------------------
	tWrite_Strobe_1 Write_Strobe_1;

	//!< ---------------------------------------------------------------------------
	//!< Write_Strobe_2
	//!< ---------------------------------------------------------------------------
	tWrite_Strobe_2 Write_Strobe_2;

	//!< ---------------------------------------------------------------------------
	//!< Write_Strobe_3
	//!< ---------------------------------------------------------------------------
	tWrite_Strobe_3 Write_Strobe_3;

	//!< ---------------------------------------------------------------------------
	//!< AI_DIV_Save
	//!< ---------------------------------------------------------------------------
	tAI_DIV_Save AI_DIV_Save;

	//!< ---------------------------------------------------------------------------
	//!< AI_SC_Save
	//!< ---------------------------------------------------------------------------
	tAI_SC_Save AI_SC_Save;

	//!< ---------------------------------------------------------------------------
	//!< AI_SI_Save
	//!< ---------------------------------------------------------------------------
	tAI_SI_Save AI_SI_Save;

	//!< ---------------------------------------------------------------------------
	//!< AI_SI2_Save
	//!< ---------------------------------------------------------------------------
	tAI_SI2_Save AI_SI2_Save;

	//!< ---------------------------------------------------------------------------
	//!< AI_Status_1
	//!< ---------------------------------------------------------------------------
	tAI_Status_1 AI_Status_1;

	//!< ---------------------------------------------------------------------------
	//!< AI_Status_2
	//!< ---------------------------------------------------------------------------
	tAI_Status_2 AI_Status_2;

	//!< ---------------------------------------------------------------------------
	//!< AO_BC_Save
	//!< ---------------------------------------------------------------------------
	tAO_BC_Save AO_BC_Save;

	//!< ---------------------------------------------------------------------------
	//!< AO_Status_1
	//!< ---------------------------------------------------------------------------
	tAO_Status_1 AO_Status_1;

	//!< ---------------------------------------------------------------------------
	//!< AO_Status_2
	//!< ---------------------------------------------------------------------------
	tAO_Status_2 AO_Status_2;

	//!< ---------------------------------------------------------------------------
	//!< AO_UC_Save
	//!< ---------------------------------------------------------------------------
	tAO_UC_Save AO_UC_Save;

	//!< ---------------------------------------------------------------------------
	//!< AO_UI_Save
	//!< ---------------------------------------------------------------------------
	tAO_UI_Save AO_UI_Save;

	//!< ---------------------------------------------------------------------------
	//!< AO_UI2_Save
	//!< ---------------------------------------------------------------------------
	tAO_UI2_Save AO_UI2_Save;

	//!< ---------------------------------------------------------------------------
	//!< DIO_Parallel_Input
	//!< ---------------------------------------------------------------------------
	tDIO_Parallel_Input DIO_Parallel_Input;

	//!< ---------------------------------------------------------------------------
	//!< DIO_Serial_Input
	//!< ---------------------------------------------------------------------------
	tDIO_Serial_Input DIO_Serial_Input;

	//!< ---------------------------------------------------------------------------
	//!< G0_HW_Save
	//!< ---------------------------------------------------------------------------
	tG0_HW_Save G0_HW_Save;

	//!< ---------------------------------------------------------------------------
	//!< G0_Save
	//!< ---------------------------------------------------------------------------
	tG0_Save G0_Save;

	//!< ---------------------------------------------------------------------------
	//!< G1_HW_Save
	//!< ---------------------------------------------------------------------------
	tG1_HW_Save G1_HW_Save;

	//!< ---------------------------------------------------------------------------
	//!< G1_Save
	//!< ---------------------------------------------------------------------------
	tG1_Save G1_Save;

	//!< ---------------------------------------------------------------------------
	//!< G_Status
	//!< ---------------------------------------------------------------------------
	tG_Status G_Status;

	//!< ---------------------------------------------------------------------------
	//!< Joint_Status_1
	//!< ---------------------------------------------------------------------------
	tJoint_Status_1 Joint_Status_1;

	//!< ---------------------------------------------------------------------------
	//!< Joint_Status_2
	//!< ---------------------------------------------------------------------------
	tJoint_Status_2 Joint_Status_2;

	//!< ---------------------------------------------------------------------------
	//!< Register Groups
	//!< ---------------------------------------------------------------------------

	//!< ----------------------------------------
	//!< Register/Field Ids
	//!< ----------------------------------------
	typedef enum {
		kAI_Command_1Id                      = 0,
		kAI_CONVERT_PulseId                  = tAI_Command_1::kAI_CONVERT_PulseId << 27 | kAI_Command_1Id,
		kAI_SC_TC_PulseId                    = tAI_Command_1::kAI_SC_TC_PulseId << 27 | kAI_Command_1Id,
		kAI_LOCALMUX_CLK_PulseId             = tAI_Command_1::kAI_LOCALMUX_CLK_PulseId << 27 | kAI_Command_1Id,
		kAI_EXTMUX_CLK_PulseId               = tAI_Command_1::kAI_EXTMUX_CLK_PulseId << 27 | kAI_Command_1Id,
		kAI_SCAN_IN_PROG_PulseId             = tAI_Command_1::kAI_SCAN_IN_PROG_PulseId << 27 | kAI_Command_1Id,
		kAI_SC_LoadId                        = tAI_Command_1::kAI_SC_LoadId << 27 | kAI_Command_1Id,
		kAI_SC_ArmId                         = tAI_Command_1::kAI_SC_ArmId << 27 | kAI_Command_1Id,
		kAI_DIV_LoadId                       = tAI_Command_1::kAI_DIV_LoadId << 27 | kAI_Command_1Id,
		kAI_DIV_ArmId                        = tAI_Command_1::kAI_DIV_ArmId << 27 | kAI_Command_1Id,
		kAI_SI_LoadId                        = tAI_Command_1::kAI_SI_LoadId << 27 | kAI_Command_1Id,
		kAI_SI_ArmId                         = tAI_Command_1::kAI_SI_ArmId << 27 | kAI_Command_1Id,
		kAI_SI2_LoadId                       = tAI_Command_1::kAI_SI2_LoadId << 27 | kAI_Command_1Id,
		kAI_SI2_ArmId                        = tAI_Command_1::kAI_SI2_ArmId << 27 | kAI_Command_1Id,
		kAI_DisarmId                         = tAI_Command_1::kAI_DisarmId << 27 | kAI_Command_1Id,
		kAI_Analog_Trigger_ResetId           = tAI_Command_1::kAI_Analog_Trigger_ResetId << 27 | kAI_Command_1Id,

		kAI_Command_2Id                      = 1,
		kAI_START1_PulseId                   = tAI_Command_2::kAI_START1_PulseId << 27 | kAI_Command_2Id,
		kAI_START2_PulseId                   = tAI_Command_2::kAI_START2_PulseId << 27 | kAI_Command_2Id,
		kAI_START_PulseId                    = tAI_Command_2::kAI_START_PulseId << 27 | kAI_Command_2Id,
		kAI_STOP_PulseId                     = tAI_Command_2::kAI_STOP_PulseId << 27 | kAI_Command_2Id,
		kAI_SC_Switch_Load_On_TCId           = tAI_Command_2::kAI_SC_Switch_Load_On_TCId << 27 | kAI_Command_2Id,
		kAI_SI_Switch_Load_On_TCId           = tAI_Command_2::kAI_SI_Switch_Load_On_TCId << 27 | kAI_Command_2Id,
		kAI_SI_Switch_Load_On_STOPId         = tAI_Command_2::kAI_SI_Switch_Load_On_STOPId << 27 | kAI_Command_2Id,
		kAI_SI_Switch_Load_On_SC_TCId        = tAI_Command_2::kAI_SI_Switch_Load_On_SC_TCId << 27 | kAI_Command_2Id,
		kAI_SC_Save_TraceId                  = tAI_Command_2::kAI_SC_Save_TraceId << 27 | kAI_Command_2Id,
		kAI_START1_DisableId                 = tAI_Command_2::kAI_START1_DisableId << 27 | kAI_Command_2Id,
		kAI_End_On_End_Of_ScanId             = tAI_Command_2::kAI_End_On_End_Of_ScanId << 27 | kAI_Command_2Id,
		kAI_End_On_SC_TCId                   = tAI_Command_2::kAI_End_On_SC_TCId << 27 | kAI_Command_2Id,

		kInterrupt_A_AckId                   = 2,
		kG0_Gate_Error_ConfirmId             = tInterrupt_A_Ack::kG0_Gate_Error_ConfirmId << 27 | kInterrupt_A_AckId,
		kG0_TC_Error_ConfirmId               = tInterrupt_A_Ack::kG0_TC_Error_ConfirmId << 27 | kInterrupt_A_AckId,
		kAI_SC_TC_Error_ConfirmId            = tInterrupt_A_Ack::kAI_SC_TC_Error_ConfirmId << 27 | kInterrupt_A_AckId,
		kAI_SC_TC_Interrupt_AckId            = tInterrupt_A_Ack::kAI_SC_TC_Interrupt_AckId << 27 | kInterrupt_A_AckId,
		kAI_START1_Interrupt_AckId           = tInterrupt_A_Ack::kAI_START1_Interrupt_AckId << 27 | kInterrupt_A_AckId,
		kAI_START2_Interrupt_AckId           = tInterrupt_A_Ack::kAI_START2_Interrupt_AckId << 27 | kInterrupt_A_AckId,
		kAI_START_Interrupt_AckId            = tInterrupt_A_Ack::kAI_START_Interrupt_AckId << 27 | kInterrupt_A_AckId,
		kAI_STOP_Interrupt_AckId             = tInterrupt_A_Ack::kAI_STOP_Interrupt_AckId << 27 | kInterrupt_A_AckId,
		kAI_Error_Interrupt_AckId            = tInterrupt_A_Ack::kAI_Error_Interrupt_AckId << 27 | kInterrupt_A_AckId,
		kG0_TC_Interrupt_AckId               = tInterrupt_A_Ack::kG0_TC_Interrupt_AckId << 27 | kInterrupt_A_AckId,
		kG0_Gate_Interrupt_AckId             = tInterrupt_A_Ack::kG0_Gate_Interrupt_AckId << 27 | kInterrupt_A_AckId,

		kInterrupt_A_EnableId                = 3,
		kAI_SC_TC_Interrupt_EnableId         = tInterrupt_A_Enable::kAI_SC_TC_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kAI_START1_Interrupt_EnableId        = tInterrupt_A_Enable::kAI_START1_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kAI_START2_Interrupt_EnableId        = tInterrupt_A_Enable::kAI_START2_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kAI_START_Interrupt_EnableId         = tInterrupt_A_Enable::kAI_START_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kAI_STOP_Interrupt_EnableId          = tInterrupt_A_Enable::kAI_STOP_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kAI_Error_Interrupt_EnableId         = tInterrupt_A_Enable::kAI_Error_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kG0_TC_Interrupt_EnableId            = tInterrupt_A_Enable::kG0_TC_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kAI_FIFO_Interrupt_EnableId          = tInterrupt_A_Enable::kAI_FIFO_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kG0_Gate_Interrupt_EnableId          = tInterrupt_A_Enable::kG0_Gate_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,
		kPass_Thru_0_Interrupt_EnableId      = tInterrupt_A_Enable::kPass_Thru_0_Interrupt_EnableId << 27 | kInterrupt_A_EnableId,

		kSecond_Irq_A_EnableId               = 4,
		kAI_SC_TC_Second_Irq_EnableId        = tSecond_Irq_A_Enable::kAI_SC_TC_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kAI_START1_Second_Irq_EnableId       = tSecond_Irq_A_Enable::kAI_START1_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kAI_START2_Second_Irq_EnableId       = tSecond_Irq_A_Enable::kAI_START2_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kAI_START_Second_Irq_EnableId        = tSecond_Irq_A_Enable::kAI_START_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kAI_STOP_Second_Irq_EnableId         = tSecond_Irq_A_Enable::kAI_STOP_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kAI_Error_Second_Irq_EnableId        = tSecond_Irq_A_Enable::kAI_Error_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kG0_TC_Second_Irq_EnableId           = tSecond_Irq_A_Enable::kG0_TC_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kAI_FIFO_Second_Irq_EnableId         = tSecond_Irq_A_Enable::kAI_FIFO_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kG0_Gate_Second_Irq_EnableId         = tSecond_Irq_A_Enable::kG0_Gate_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,
		kPass_Thru_0_Second_Irq_EnableId     = tSecond_Irq_A_Enable::kPass_Thru_0_Second_Irq_EnableId << 27 | kSecond_Irq_A_EnableId,

		kAI_PersonalId                       = 5,
		kAI_AIFREQ_PolarityId                = tAI_Personal::kAI_AIFREQ_PolarityId << 27 | kAI_PersonalId,
		kAI_LOCALMUX_CLK_Pulse_WidthId       = tAI_Personal::kAI_LOCALMUX_CLK_Pulse_WidthId << 27 | kAI_PersonalId,
		kAI_EXTMUX_CLK_Pulse_WidthId         = tAI_Personal::kAI_EXTMUX_CLK_Pulse_WidthId << 27 | kAI_PersonalId,
		kAI_Overrun_ModeId                   = tAI_Personal::kAI_Overrun_ModeId << 27 | kAI_PersonalId,
		kAI_FIFO_Flags_PolarityId            = tAI_Personal::kAI_FIFO_Flags_PolarityId << 27 | kAI_PersonalId,
		kAI_CONVERT_Original_PulseId         = tAI_Personal::kAI_CONVERT_Original_PulseId << 27 | kAI_PersonalId,
		kAI_CONVERT_Pulse_WidthId            = tAI_Personal::kAI_CONVERT_Pulse_WidthId << 27 | kAI_PersonalId,
		kAI_CONVERT_Pulse_TimebaseId         = tAI_Personal::kAI_CONVERT_Pulse_TimebaseId << 27 | kAI_PersonalId,
		kAI_SHIFTIN_PolarityId               = tAI_Personal::kAI_SHIFTIN_PolarityId << 27 | kAI_PersonalId,
		kAI_SOC_PolarityId                   = tAI_Personal::kAI_SOC_PolarityId << 27 | kAI_PersonalId,
		kAI_EOC_PolarityId                   = tAI_Personal::kAI_EOC_PolarityId << 27 | kAI_PersonalId,
		kAI_SHIFTIN_Pulse_WidthId            = tAI_Personal::kAI_SHIFTIN_Pulse_WidthId << 27 | kAI_PersonalId,

		kAI_Mode_1Id                         = 6,
		kAI_Trigger_OnceId                   = tAI_Mode_1::kAI_Trigger_OnceId << 27 | kAI_Mode_1Id,
		kAI_ContinuousId                     = tAI_Mode_1::kAI_ContinuousId << 27 | kAI_Mode_1Id,
		kReserved_OneId                      = tAI_Mode_1::kReserved_OneId << 27 | kAI_Mode_1Id,
		kAI_Start_StopId                     = tAI_Mode_1::kAI_Start_StopId << 27 | kAI_Mode_1Id,
		kAI_SI_Source_PolarityId             = tAI_Mode_1::kAI_SI_Source_PolarityId << 27 | kAI_Mode_1Id,
		kAI_CONVERT_Source_PolarityId        = tAI_Mode_1::kAI_CONVERT_Source_PolarityId << 27 | kAI_Mode_1Id,
		kAI_SI_Source_SelectId               = tAI_Mode_1::kAI_SI_Source_SelectId << 27 | kAI_Mode_1Id,
		kAI_CONVERT_Source_SelectId          = tAI_Mode_1::kAI_CONVERT_Source_SelectId << 27 | kAI_Mode_1Id,

		kAI_Mode_2Id                         = 7,
		kAI_SC_Write_SwitchId                = tAI_Mode_2::kAI_SC_Write_SwitchId << 27 | kAI_Mode_2Id,
		kAI_SC_Reload_ModeId                 = tAI_Mode_2::kAI_SC_Reload_ModeId << 27 | kAI_Mode_2Id,
		kAI_SC_Initial_Load_SourceId         = tAI_Mode_2::kAI_SC_Initial_Load_SourceId << 27 | kAI_Mode_2Id,
		kAI_SI_Write_SwitchId                = tAI_Mode_2::kAI_SI_Write_SwitchId << 27 | kAI_Mode_2Id,
		kAI_SI_Reload_ModeId                 = tAI_Mode_2::kAI_SI_Reload_ModeId << 27 | kAI_Mode_2Id,
		kAI_SI_Initial_Load_SourceId         = tAI_Mode_2::kAI_SI_Initial_Load_SourceId << 27 | kAI_Mode_2Id,
		kAI_SI2_Reload_ModeId                = tAI_Mode_2::kAI_SI2_Reload_ModeId << 27 | kAI_Mode_2Id,
		kAI_SI2_Initial_Load_SourceId        = tAI_Mode_2::kAI_SI2_Initial_Load_SourceId << 27 | kAI_Mode_2Id,
		kAI_External_MUX_PresentId           = tAI_Mode_2::kAI_External_MUX_PresentId << 27 | kAI_Mode_2Id,
		kAI_Pre_TriggerId                    = tAI_Mode_2::kAI_Pre_TriggerId << 27 | kAI_Mode_2Id,
		kAI_Start_Stop_Gate_EnableId         = tAI_Mode_2::kAI_Start_Stop_Gate_EnableId << 27 | kAI_Mode_2Id,
		kAI_SC_Gate_EnableId                 = tAI_Mode_2::kAI_SC_Gate_EnableId << 27 | kAI_Mode_2Id,

		kAI_Output_ControlId                 = 8,
		kAI_CONVERT_Output_SelectId          = tAI_Output_Control::kAI_CONVERT_Output_SelectId << 27 | kAI_Output_ControlId,
		kAI_SC_TC_Output_SelectId            = tAI_Output_Control::kAI_SC_TC_Output_SelectId << 27 | kAI_Output_ControlId,
		kAI_LOCALMUX_CLK_Output_SelectId     = tAI_Output_Control::kAI_LOCALMUX_CLK_Output_SelectId << 27 | kAI_Output_ControlId,
		kAI_EXTMUX_CLK_Output_SelectId       = tAI_Output_Control::kAI_EXTMUX_CLK_Output_SelectId << 27 | kAI_Output_ControlId,
		kAI_SCAN_IN_PROG_Output_SelectId     = tAI_Output_Control::kAI_SCAN_IN_PROG_Output_SelectId << 27 | kAI_Output_ControlId,
		kAI_START_Output_SelectId            = tAI_Output_Control::kAI_START_Output_SelectId << 27 | kAI_Output_ControlId,

		kAI_Mode_3Id                         = 9,
		kAI_External_Gate_SelectId           = tAI_Mode_3::kAI_External_Gate_SelectId << 27 | kAI_Mode_3Id,
		kAI_External_Gate_PolarityId         = tAI_Mode_3::kAI_External_Gate_PolarityId << 27 | kAI_Mode_3Id,
		kAI_FIFO_ModeId                      = tAI_Mode_3::kAI_FIFO_ModeId << 27 | kAI_Mode_3Id,
		kAI_External_Gate_ModeId             = tAI_Mode_3::kAI_External_Gate_ModeId << 27 | kAI_Mode_3Id,
		kAI_Delayed_START1Id                 = tAI_Mode_3::kAI_Delayed_START1Id << 27 | kAI_Mode_3Id,
		kAI_Delayed_START2Id                 = tAI_Mode_3::kAI_Delayed_START2Id << 27 | kAI_Mode_3Id,
		kAI_SI2_Source_SelectId              = tAI_Mode_3::kAI_SI2_Source_SelectId << 27 | kAI_Mode_3Id,
		kAI_SI_Special_Trigger_DelayId       = tAI_Mode_3::kAI_SI_Special_Trigger_DelayId << 27 | kAI_Mode_3Id,
		kAI_Software_GateId                  = tAI_Mode_3::kAI_Software_GateId << 27 | kAI_Mode_3Id,
		kAI_Delay_STARTId                    = tAI_Mode_3::kAI_Delay_STARTId << 27 | kAI_Mode_3Id,
		kAI_Trigger_LengthId                 = tAI_Mode_3::kAI_Trigger_LengthId << 27 | kAI_Mode_3Id,

		kAI_START_STOP_SelectId              = 10,
		kAI_START_SelectId                   = tAI_START_STOP_Select::kAI_START_SelectId << 27 | kAI_START_STOP_SelectId,
		kAI_START_EdgeId                     = tAI_START_STOP_Select::kAI_START_EdgeId << 27 | kAI_START_STOP_SelectId,
		kAI_START_SyncId                     = tAI_START_STOP_Select::kAI_START_SyncId << 27 | kAI_START_STOP_SelectId,
		kAI_STOP_SelectId                    = tAI_START_STOP_Select::kAI_STOP_SelectId << 27 | kAI_START_STOP_SelectId,
		kAI_STOP_EdgeId                      = tAI_START_STOP_Select::kAI_STOP_EdgeId << 27 | kAI_START_STOP_SelectId,
		kAI_STOP_SyncId                      = tAI_START_STOP_Select::kAI_STOP_SyncId << 27 | kAI_START_STOP_SelectId,
		kAI_STOP_PolarityId                  = tAI_START_STOP_Select::kAI_STOP_PolarityId << 27 | kAI_START_STOP_SelectId,
		kAI_START_PolarityId                 = tAI_START_STOP_Select::kAI_START_PolarityId << 27 | kAI_START_STOP_SelectId,

		kAI_Trigger_SelectId                 = 11,
		kAI_START1_SelectId                  = tAI_Trigger_Select::kAI_START1_SelectId << 27 | kAI_Trigger_SelectId,
		kAI_START1_EdgeId                    = tAI_Trigger_Select::kAI_START1_EdgeId << 27 | kAI_Trigger_SelectId,
		kAI_START1_SyncId                    = tAI_Trigger_Select::kAI_START1_SyncId << 27 | kAI_Trigger_SelectId,
		kAI_START2_SelectId                  = tAI_Trigger_Select::kAI_START2_SelectId << 27 | kAI_Trigger_SelectId,
		kAI_START2_EdgeId                    = tAI_Trigger_Select::kAI_START2_EdgeId << 27 | kAI_Trigger_SelectId,
		kAI_START2_SyncId                    = tAI_Trigger_Select::kAI_START2_SyncId << 27 | kAI_Trigger_SelectId,
		kAI_START2_PolarityId                = tAI_Trigger_Select::kAI_START2_PolarityId << 27 | kAI_Trigger_SelectId,
		kAI_START1_PolarityId                = tAI_Trigger_Select::kAI_START1_PolarityId << 27 | kAI_Trigger_SelectId,

		kAI_SI_Load_AId                      = 12,
		kAI_SI_Load_ADefaultId                                  = tAI_SI_Load_A::kDefaultId << 27 | kAI_SI_Load_AId,

		kAI_SI_Load_BId                      = 13,
		kAI_SI_Load_BDefaultId                                  = tAI_SI_Load_B::kDefaultId << 27 | kAI_SI_Load_BId,

		kAI_SI2_Load_AId                     = 14,
		kAI_SI2_Load_ADefaultId                                  = tAI_SI2_Load_A::kDefaultId << 27 | kAI_SI2_Load_AId,

		kAI_SI2_Load_BId                     = 15,
		kAI_SI2_Load_BDefaultId                                  = tAI_SI2_Load_B::kDefaultId << 27 | kAI_SI2_Load_BId,

		kAI_SC_Load_AId                      = 16,
		kAI_SC_Load_ADefaultId                                  = tAI_SC_Load_A::kDefaultId << 27 | kAI_SC_Load_AId,

		kAI_SC_Load_BId                      = 17,
		kAI_SC_Load_BDefaultId                                  = tAI_SC_Load_B::kDefaultId << 27 | kAI_SC_Load_BId,

		kAI_DIV_Load_AId                     = 18,
		kAI_DIV_Load_ADefaultId                                  = tAI_DIV_Load_A::kDefaultId << 27 | kAI_DIV_Load_AId,

		kAO_PersonalId                       = 19,
		kAO_UPDATE2_Pulse_WidthId            = tAO_Personal::kAO_UPDATE2_Pulse_WidthId << 27 | kAO_PersonalId,
		kAO_UPDATE2_Pulse_TimebaseId         = tAO_Personal::kAO_UPDATE2_Pulse_TimebaseId << 27 | kAO_PersonalId,
		kAO_UPDATE2_Original_PulseId         = tAO_Personal::kAO_UPDATE2_Original_PulseId << 27 | kAO_PersonalId,
		kAO_Interval_Buffer_ModeId           = tAO_Personal::kAO_Interval_Buffer_ModeId << 27 | kAO_PersonalId,
		kAO_BC_Source_SelectId               = tAO_Personal::kAO_BC_Source_SelectId << 27 | kAO_PersonalId,
		kAO_UPDATE_Pulse_WidthId             = tAO_Personal::kAO_UPDATE_Pulse_WidthId << 27 | kAO_PersonalId,
		kAO_UPDATE_Pulse_TimebaseId          = tAO_Personal::kAO_UPDATE_Pulse_TimebaseId << 27 | kAO_PersonalId,
		kAO_UPDATE_Original_PulseId          = tAO_Personal::kAO_UPDATE_Original_PulseId << 27 | kAO_PersonalId,
		kAO_DMA_PIO_ControlId                = tAO_Personal::kAO_DMA_PIO_ControlId << 27 | kAO_PersonalId,
		kAO_AOFREQ_PolarityId                = tAO_Personal::kAO_AOFREQ_PolarityId << 27 | kAO_PersonalId,
		kAO_FIFO_EnableId                    = tAO_Personal::kAO_FIFO_EnableId << 27 | kAO_PersonalId,
		kAO_FIFO_Flags_PolarityId            = tAO_Personal::kAO_FIFO_Flags_PolarityId << 27 | kAO_PersonalId,
		kAO_TMRDACWR_Pulse_WidthId           = tAO_Personal::kAO_TMRDACWR_Pulse_WidthId << 27 | kAO_PersonalId,
		kAO_Fast_CPUId                       = tAO_Personal::kAO_Fast_CPUId << 27 | kAO_PersonalId,
		kAO_Number_Of_DAC_PackagesId         = tAO_Personal::kAO_Number_Of_DAC_PackagesId << 27 | kAO_PersonalId,

		kAO_Command_1Id                      = 20,
		kAO_UPDATE_PulseId                   = tAO_Command_1::kAO_UPDATE_PulseId << 27 | kAO_Command_1Id,
		kAO_LDAC0_Source_SelectId            = tAO_Command_1::kAO_LDAC0_Source_SelectId << 27 | kAO_Command_1Id,
		kAO_DAC0_Update_ModeId               = tAO_Command_1::kAO_DAC0_Update_ModeId << 27 | kAO_Command_1Id,
		kAO_LDAC1_Source_SelectId            = tAO_Command_1::kAO_LDAC1_Source_SelectId << 27 | kAO_Command_1Id,
		kAO_DAC1_Update_ModeId               = tAO_Command_1::kAO_DAC1_Update_ModeId << 27 | kAO_Command_1Id,
		kAO_BC_LoadId                        = tAO_Command_1::kAO_BC_LoadId << 27 | kAO_Command_1Id,
		kAO_BC_ArmId                         = tAO_Command_1::kAO_BC_ArmId << 27 | kAO_Command_1Id,
		kAO_UC_LoadId                        = tAO_Command_1::kAO_UC_LoadId << 27 | kAO_Command_1Id,
		kAO_UC_ArmId                         = tAO_Command_1::kAO_UC_ArmId << 27 | kAO_Command_1Id,
		kAO_UI_LoadId                        = tAO_Command_1::kAO_UI_LoadId << 27 | kAO_Command_1Id,
		kAO_UI_ArmId                         = tAO_Command_1::kAO_UI_ArmId << 27 | kAO_Command_1Id,
		kAO_UI2_LoadId                       = tAO_Command_1::kAO_UI2_LoadId << 27 | kAO_Command_1Id,
		kAO_UI2_Arm_DisarmId                 = tAO_Command_1::kAO_UI2_Arm_DisarmId << 27 | kAO_Command_1Id,
		kAO_DisarmId                         = tAO_Command_1::kAO_DisarmId << 27 | kAO_Command_1Id,
		kAO_START_PulseId                    = tAO_Command_1::kAO_START_PulseId << 27 | kAO_Command_1Id,
		kAO_Analog_Trigger_ResetId           = tAO_Command_1::kAO_Analog_Trigger_ResetId << 27 | kAO_Command_1Id,

		kAO_Command_2Id                      = 21,
		kAO_START1_PulseId                   = tAO_Command_2::kAO_START1_PulseId << 27 | kAO_Command_2Id,
		kAO_UPDATE2_PulseId                  = tAO_Command_2::kAO_UPDATE2_PulseId << 27 | kAO_Command_2Id,
		kAO_Mute_AId                         = tAO_Command_2::kAO_Mute_AId << 27 | kAO_Command_2Id,
		kAO_Mute_BId                         = tAO_Command_2::kAO_Mute_BId << 27 | kAO_Command_2Id,
		kAO_BC_Switch_Load_On_TCId           = tAO_Command_2::kAO_BC_Switch_Load_On_TCId << 27 | kAO_Command_2Id,
		kAO_UC_Switch_Load_On_TCId           = tAO_Command_2::kAO_UC_Switch_Load_On_TCId << 27 | kAO_Command_2Id,
		kAO_UC_Switch_Load_On_BC_TCId        = tAO_Command_2::kAO_UC_Switch_Load_On_BC_TCId << 27 | kAO_Command_2Id,
		kAO_UI_Switch_Load_On_TCId           = tAO_Command_2::kAO_UI_Switch_Load_On_TCId << 27 | kAO_Command_2Id,
		kAO_UI_Switch_Load_On_StopId         = tAO_Command_2::kAO_UI_Switch_Load_On_StopId << 27 | kAO_Command_2Id,
		kAO_UI_Switch_Load_On_BC_TCId        = tAO_Command_2::kAO_UI_Switch_Load_On_BC_TCId << 27 | kAO_Command_2Id,
		kAO_BC_Save_TraceId                  = tAO_Command_2::kAO_BC_Save_TraceId << 27 | kAO_Command_2Id,
		kAO_BC_Gate_EnableId                 = tAO_Command_2::kAO_BC_Gate_EnableId << 27 | kAO_Command_2Id,
		kAO_UC_Save_TraceId                  = tAO_Command_2::kAO_UC_Save_TraceId << 27 | kAO_Command_2Id,
		kAO_Start_Stop_Gate_EnableId         = tAO_Command_2::kAO_Start_Stop_Gate_EnableId << 27 | kAO_Command_2Id,
		kAO_End_On_UC_TCId                   = tAO_Command_2::kAO_End_On_UC_TCId << 27 | kAO_Command_2Id,
		kAO_End_On_BC_TCId                   = tAO_Command_2::kAO_End_On_BC_TCId << 27 | kAO_Command_2Id,

		kInterrupt_B_AckId                   = 22,
		kG1_Gate_Error_ConfirmId             = tInterrupt_B_Ack::kG1_Gate_Error_ConfirmId << 27 | kInterrupt_B_AckId,
		kG1_TC_Error_ConfirmId               = tInterrupt_B_Ack::kG1_TC_Error_ConfirmId << 27 | kInterrupt_B_AckId,
		kAO_BC_TC_Trigger_Error_ConfirmId    = tInterrupt_B_Ack::kAO_BC_TC_Trigger_Error_ConfirmId << 27 | kInterrupt_B_AckId,
		kAO_BC_TC_Error_ConfirmId            = tInterrupt_B_Ack::kAO_BC_TC_Error_ConfirmId << 27 | kInterrupt_B_AckId,
		kAO_UI2_TC_Error_ConfirmId           = tInterrupt_B_Ack::kAO_UI2_TC_Error_ConfirmId << 27 | kInterrupt_B_AckId,
		kAO_UI2_TC_Interrupt_AckId           = tInterrupt_B_Ack::kAO_UI2_TC_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kAO_UC_TC_Interrupt_AckId            = tInterrupt_B_Ack::kAO_UC_TC_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kAO_BC_TC_Interrupt_AckId            = tInterrupt_B_Ack::kAO_BC_TC_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kAO_START1_Interrupt_AckId           = tInterrupt_B_Ack::kAO_START1_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kAO_UPDATE_Interrupt_AckId           = tInterrupt_B_Ack::kAO_UPDATE_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kAO_START_Interrupt_AckId            = tInterrupt_B_Ack::kAO_START_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kAO_STOP_Interrupt_AckId             = tInterrupt_B_Ack::kAO_STOP_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kAO_Error_Interrupt_AckId            = tInterrupt_B_Ack::kAO_Error_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kG1_TC_Interrupt_AckId               = tInterrupt_B_Ack::kG1_TC_Interrupt_AckId << 27 | kInterrupt_B_AckId,
		kG1_Gate_Interrupt_AckId             = tInterrupt_B_Ack::kG1_Gate_Interrupt_AckId << 27 | kInterrupt_B_AckId,

		kInterrupt_B_EnableId                = 23,
		kAO_BC_TC_Interrupt_EnableId         = tInterrupt_B_Enable::kAO_BC_TC_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_START1_Interrupt_EnableId        = tInterrupt_B_Enable::kAO_START1_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_UPDATE_Interrupt_EnableId        = tInterrupt_B_Enable::kAO_UPDATE_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_START_Interrupt_EnableId         = tInterrupt_B_Enable::kAO_START_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_STOP_Interrupt_EnableId          = tInterrupt_B_Enable::kAO_STOP_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_Error_Interrupt_EnableId         = tInterrupt_B_Enable::kAO_Error_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_UC_TC_Interrupt_EnableId         = tInterrupt_B_Enable::kAO_UC_TC_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_UI2_TC_Interrupt_EnableId        = tInterrupt_B_Enable::kAO_UI2_TC_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kAO_FIFO_Interrupt_EnableId          = tInterrupt_B_Enable::kAO_FIFO_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kG1_TC_Interrupt_EnableId            = tInterrupt_B_Enable::kG1_TC_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kG1_Gate_Interrupt_EnableId          = tInterrupt_B_Enable::kG1_Gate_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,
		kPass_Thru_1_Interrupt_EnableId      = tInterrupt_B_Enable::kPass_Thru_1_Interrupt_EnableId << 27 | kInterrupt_B_EnableId,

		kSecond_Irq_B_EnableId               = 24,
		kAO_BC_TC_Second_Irq_EnableId        = tSecond_Irq_B_Enable::kAO_BC_TC_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_START1_Second_Irq_EnableId       = tSecond_Irq_B_Enable::kAO_START1_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_UPDATE_Second_Irq_EnableId       = tSecond_Irq_B_Enable::kAO_UPDATE_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_START_Second_Irq_EnableId        = tSecond_Irq_B_Enable::kAO_START_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_STOP_Second_Irq_EnableId         = tSecond_Irq_B_Enable::kAO_STOP_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_Error_Second_Irq_EnableId        = tSecond_Irq_B_Enable::kAO_Error_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_UC_TC_Second_Irq_EnableId        = tSecond_Irq_B_Enable::kAO_UC_TC_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_UI2_TC_Second_Irq_EnableId       = tSecond_Irq_B_Enable::kAO_UI2_TC_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kAO_FIFO_Second_Irq_EnableId         = tSecond_Irq_B_Enable::kAO_FIFO_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kG1_TC_Second_Irq_EnableId           = tSecond_Irq_B_Enable::kG1_TC_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kG1_Gate_Second_Irq_EnableId         = tSecond_Irq_B_Enable::kG1_Gate_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,
		kPass_Thru_1_Second_Irq_EnableId     = tSecond_Irq_B_Enable::kPass_Thru_1_Second_Irq_EnableId << 27 | kSecond_Irq_B_EnableId,

		kAO_Mode_1Id                         = 25,
		kAO_Trigger_OnceId                   = tAO_Mode_1::kAO_Trigger_OnceId << 27 | kAO_Mode_1Id,
		kAO_ContinuousId                     = tAO_Mode_1::kAO_ContinuousId << 27 | kAO_Mode_1Id,
		kAO_UC_Switch_Load_Every_TCId        = tAO_Mode_1::kAO_UC_Switch_Load_Every_TCId << 27 | kAO_Mode_1Id,
		kAO_UI_Source_PolarityId             = tAO_Mode_1::kAO_UI_Source_PolarityId << 27 | kAO_Mode_1Id,
		kAO_UPDATE_Source_PolarityId         = tAO_Mode_1::kAO_UPDATE_Source_PolarityId << 27 | kAO_Mode_1Id,
		kAO_Multiple_ChannelsId              = tAO_Mode_1::kAO_Multiple_ChannelsId << 27 | kAO_Mode_1Id,
		kAO_UI_Source_SelectId               = tAO_Mode_1::kAO_UI_Source_SelectId << 27 | kAO_Mode_1Id,
		kAO_UPDATE_Source_SelectId           = tAO_Mode_1::kAO_UPDATE_Source_SelectId << 27 | kAO_Mode_1Id,

		kAO_Mode_2Id                         = 26,
		kAO_BC_Write_SwitchId                = tAO_Mode_2::kAO_BC_Write_SwitchId << 27 | kAO_Mode_2Id,
		kAO_BC_Reload_ModeId                 = tAO_Mode_2::kAO_BC_Reload_ModeId << 27 | kAO_Mode_2Id,
		kAO_BC_Initial_Load_SourceId         = tAO_Mode_2::kAO_BC_Initial_Load_SourceId << 27 | kAO_Mode_2Id,
		kAO_UI_Write_SwitchId                = tAO_Mode_2::kAO_UI_Write_SwitchId << 27 | kAO_Mode_2Id,
		kAO_UI_Reload_ModeId                 = tAO_Mode_2::kAO_UI_Reload_ModeId << 27 | kAO_Mode_2Id,
		kAO_UI_Initial_Load_SourceId         = tAO_Mode_2::kAO_UI_Initial_Load_SourceId << 27 | kAO_Mode_2Id,
		kAO_UI2_Reload_ModeId                = tAO_Mode_2::kAO_UI2_Reload_ModeId << 27 | kAO_Mode_2Id,
		kAO_UI2_Initial_Load_SourceId        = tAO_Mode_2::kAO_UI2_Initial_Load_SourceId << 27 | kAO_Mode_2Id,
		kAO_UC_Write_SwitchId                = tAO_Mode_2::kAO_UC_Write_SwitchId << 27 | kAO_Mode_2Id,
		kAO_UC_Initial_Load_SourceId         = tAO_Mode_2::kAO_UC_Initial_Load_SourceId << 27 | kAO_Mode_2Id,
		kAO_START1_DisableId                 = tAO_Mode_2::kAO_START1_DisableId << 27 | kAO_Mode_2Id,
		kAO_FIFO_Retransmit_EnableId         = tAO_Mode_2::kAO_FIFO_Retransmit_EnableId << 27 | kAO_Mode_2Id,
		kAO_FIFO_ModeId                      = tAO_Mode_2::kAO_FIFO_ModeId << 27 | kAO_Mode_2Id,

		kAO_Output_ControlId                 = 27,
		kAO_UPDATE_Output_SelectId           = tAO_Output_Control::kAO_UPDATE_Output_SelectId << 27 | kAO_Output_ControlId,
		kAO_UPDATE2_Output_ToggleId          = tAO_Output_Control::kAO_UPDATE2_Output_ToggleId << 27 | kAO_Output_ControlId,
		kAO_External_Gate_PolarityId         = tAO_Output_Control::kAO_External_Gate_PolarityId << 27 | kAO_Output_ControlId,
		kAO_UPDATE2_Output_SelectId          = tAO_Output_Control::kAO_UPDATE2_Output_SelectId << 27 | kAO_Output_ControlId,
		kAO_Number_Of_ChannelsId             = tAO_Output_Control::kAO_Number_Of_ChannelsId << 27 | kAO_Output_ControlId,
		kAO_External_Gate_SelectId           = tAO_Output_Control::kAO_External_Gate_SelectId << 27 | kAO_Output_ControlId,
		kAO_External_Gate_EnableId           = tAO_Output_Control::kAO_External_Gate_EnableId << 27 | kAO_Output_ControlId,

		kAO_Mode_3Id                         = 28,
		kAO_Software_GateId                  = tAO_Mode_3::kAO_Software_GateId << 27 | kAO_Mode_3Id,
		kAO_Not_An_UPDATEId                  = tAO_Mode_3::kAO_Not_An_UPDATEId << 27 | kAO_Mode_3Id,
		kAO_Stop_On_BC_TC_ErrorId            = tAO_Mode_3::kAO_Stop_On_BC_TC_ErrorId << 27 | kAO_Mode_3Id,
		kAO_Stop_On_BC_TC_Trigger_ErrorId    = tAO_Mode_3::kAO_Stop_On_BC_TC_Trigger_ErrorId << 27 | kAO_Mode_3Id,
		kAO_Stop_On_Overrun_ErrorId          = tAO_Mode_3::kAO_Stop_On_Overrun_ErrorId << 27 | kAO_Mode_3Id,
		kAO_Trigger_LengthId                 = tAO_Mode_3::kAO_Trigger_LengthId << 27 | kAO_Mode_3Id,
		kAO_UC_Switch_Load_Every_BC_TCId     = tAO_Mode_3::kAO_UC_Switch_Load_Every_BC_TCId << 27 | kAO_Mode_3Id,
		kAO_UI2_Switch_Load_Next_TCId        = tAO_Mode_3::kAO_UI2_Switch_Load_Next_TCId << 27 | kAO_Mode_3Id,

		kAO_START_SelectId                   = 29,
		kAO_START_SelectDefaultId                                  = tAO_START_Select::kDefaultId << 27 | kAO_START_SelectId,
		kAO_START_EdgeId                     = tAO_START_Select::kAO_START_EdgeId << 27 | kAO_START_SelectId,
		kAO_START_SyncId                     = tAO_START_Select::kAO_START_SyncId << 27 | kAO_START_SelectId,
		kAO_UI2_External_Gate_SelectId       = tAO_START_Select::kAO_UI2_External_Gate_SelectId << 27 | kAO_START_SelectId,
		kAO_AOFREQ_EnableId                  = tAO_START_Select::kAO_AOFREQ_EnableId << 27 | kAO_START_SelectId,
		kAO_START_PolarityId                 = tAO_START_Select::kAO_START_PolarityId << 27 | kAO_START_SelectId,
		kAO_UI2_External_Gate_PolarityId     = tAO_START_Select::kAO_UI2_External_Gate_PolarityId << 27 | kAO_START_SelectId,
		kAO_UI2_Software_GateId              = tAO_START_Select::kAO_UI2_Software_GateId << 27 | kAO_START_SelectId,

		kAO_Trigger_SelectId                 = 30,
		kAO_START1_SelectId                  = tAO_Trigger_Select::kAO_START1_SelectId << 27 | kAO_Trigger_SelectId,
		kAO_START1_EdgeId                    = tAO_Trigger_Select::kAO_START1_EdgeId << 27 | kAO_Trigger_SelectId,
		kAO_START1_SyncId                    = tAO_Trigger_Select::kAO_START1_SyncId << 27 | kAO_Trigger_SelectId,
		kAO_UI2_Source_SelectId              = tAO_Trigger_Select::kAO_UI2_Source_SelectId << 27 | kAO_Trigger_SelectId,
		kAO_UI2_Source_PolarityId            = tAO_Trigger_Select::kAO_UI2_Source_PolarityId << 27 | kAO_Trigger_SelectId,
		kAO_START1_PolarityId                = tAO_Trigger_Select::kAO_START1_PolarityId << 27 | kAO_Trigger_SelectId,
		kAO_Delayed_START1Id                 = tAO_Trigger_Select::kAO_Delayed_START1Id << 27 | kAO_Trigger_SelectId,
		kAO_UI2_External_Gate_EnableId       = tAO_Trigger_Select::kAO_UI2_External_Gate_EnableId << 27 | kAO_Trigger_SelectId,

		kAO_UI_Load_AId                      = 31,
		kAO_UI_Load_ADefaultId                                  = tAO_UI_Load_A::kDefaultId << 27 | kAO_UI_Load_AId,

		kAO_UI_Load_BId                      = 32,
		kAO_UI_Load_BDefaultId                                  = tAO_UI_Load_B::kDefaultId << 27 | kAO_UI_Load_BId,

		kAO_UI2_Load_AId                     = 33,
		kAO_UI2_Load_ADefaultId                                  = tAO_UI2_Load_A::kDefaultId << 27 | kAO_UI2_Load_AId,

		kAO_UI2_Load_BId                     = 34,
		kAO_UI2_Load_BDefaultId                                  = tAO_UI2_Load_B::kDefaultId << 27 | kAO_UI2_Load_BId,

		kAO_BC_Load_AId                      = 35,
		kAO_BC_Load_ADefaultId                                  = tAO_BC_Load_A::kDefaultId << 27 | kAO_BC_Load_AId,

		kAO_BC_Load_BId                      = 36,
		kAO_BC_Load_BDefaultId                                  = tAO_BC_Load_B::kDefaultId << 27 | kAO_BC_Load_BId,

		kAO_UC_Load_AId                      = 37,
		kAO_UC_Load_ADefaultId                                  = tAO_UC_Load_A::kDefaultId << 27 | kAO_UC_Load_AId,

		kAO_UC_Load_BId                      = 38,
		kAO_UC_Load_BDefaultId                                  = tAO_UC_Load_B::kDefaultId << 27 | kAO_UC_Load_BId,

		kDIO_ControlId                       = 39,
		kDIO_Pins_DirId                      = tDIO_Control::kDIO_Pins_DirId << 27 | kDIO_ControlId,
		kDIO_HW_Serial_StartId               = tDIO_Control::kDIO_HW_Serial_StartId << 27 | kDIO_ControlId,
		kDIO_HW_Serial_EnableId              = tDIO_Control::kDIO_HW_Serial_EnableId << 27 | kDIO_ControlId,
		kDIO_HW_Serial_TimebaseId            = tDIO_Control::kDIO_HW_Serial_TimebaseId << 27 | kDIO_ControlId,
		kDIO_Software_Serial_ControlId       = tDIO_Control::kDIO_Software_Serial_ControlId << 27 | kDIO_ControlId,

		kDIO_OutputId                        = 40,
		kDIO_Parallel_Data_OutId             = tDIO_Output::kDIO_Parallel_Data_OutId << 27 | kDIO_OutputId,
		kDIO_Serial_Data_OutId               = tDIO_Output::kDIO_Serial_Data_OutId << 27 | kDIO_OutputId,

		kG0_ModeId                           = 41,
		kG0_Gating_ModeId                    = tG0_Mode::kG0_Gating_ModeId << 27 | kG0_ModeId,
		kG0_Gate_On_Both_EdgesId             = tG0_Mode::kG0_Gate_On_Both_EdgesId << 27 | kG0_ModeId,
		kG0_Trigger_Mode_For_Edge_GateId     = tG0_Mode::kG0_Trigger_Mode_For_Edge_GateId << 27 | kG0_ModeId,
		kG0_Stop_ModeId                      = tG0_Mode::kG0_Stop_ModeId << 27 | kG0_ModeId,
		kG0_Load_Source_SelectId             = tG0_Mode::kG0_Load_Source_SelectId << 27 | kG0_ModeId,
		kG0_Output_ModeId                    = tG0_Mode::kG0_Output_ModeId << 27 | kG0_ModeId,
		kG0_Counting_OnceId                  = tG0_Mode::kG0_Counting_OnceId << 27 | kG0_ModeId,
		kG0_Loading_On_TCId                  = tG0_Mode::kG0_Loading_On_TCId << 27 | kG0_ModeId,
		kG0_Gate_PolarityId                  = tG0_Mode::kG0_Gate_PolarityId << 27 | kG0_ModeId,
		kG0_Loading_On_GateId                = tG0_Mode::kG0_Loading_On_GateId << 27 | kG0_ModeId,
		kG0_Reload_Source_SwitchingId        = tG0_Mode::kG0_Reload_Source_SwitchingId << 27 | kG0_ModeId,

		kG1_ModeId                           = 42,
		kG1_Gating_ModeId                    = tG1_Mode::kG1_Gating_ModeId << 27 | kG1_ModeId,
		kG1_Gate_On_Both_EdgesId             = tG1_Mode::kG1_Gate_On_Both_EdgesId << 27 | kG1_ModeId,
		kG1_Trigger_Mode_For_Edge_GateId     = tG1_Mode::kG1_Trigger_Mode_For_Edge_GateId << 27 | kG1_ModeId,
		kG1_Stop_ModeId                      = tG1_Mode::kG1_Stop_ModeId << 27 | kG1_ModeId,
		kG1_Load_Source_SelectId             = tG1_Mode::kG1_Load_Source_SelectId << 27 | kG1_ModeId,
		kG1_Output_ModeId                    = tG1_Mode::kG1_Output_ModeId << 27 | kG1_ModeId,
		kG1_Counting_OnceId                  = tG1_Mode::kG1_Counting_OnceId << 27 | kG1_ModeId,
		kG1_Loading_On_TCId                  = tG1_Mode::kG1_Loading_On_TCId << 27 | kG1_ModeId,
		kG1_Gate_PolarityId                  = tG1_Mode::kG1_Gate_PolarityId << 27 | kG1_ModeId,
		kG1_Loading_On_GateId                = tG1_Mode::kG1_Loading_On_GateId << 27 | kG1_ModeId,
		kG1_Reload_Source_SwitchingId        = tG1_Mode::kG1_Reload_Source_SwitchingId << 27 | kG1_ModeId,

		kG0_CommandId                        = 43,
		kG0_ArmId                            = tG0_Command::kG0_ArmId << 27 | kG0_CommandId,
		kG0_Save_TraceId                     = tG0_Command::kG0_Save_TraceId << 27 | kG0_CommandId,
		kG0_LoadId                           = tG0_Command::kG0_LoadId << 27 | kG0_CommandId,
		kG0_Analog_Trigger_ResetId           = tG0_Command::kG0_Analog_Trigger_ResetId << 27 | kG0_CommandId,
		kG0_DisarmId                         = tG0_Command::kG0_DisarmId << 27 | kG0_CommandId,
		kG0_Up_DownId                        = tG0_Command::kG0_Up_DownId << 27 | kG0_CommandId,
		kG0_Write_SwitchId                   = tG0_Command::kG0_Write_SwitchId << 27 | kG0_CommandId,
		kG0_Synchronized_GateId              = tG0_Command::kG0_Synchronized_GateId << 27 | kG0_CommandId,
		kG0_Little_Big_EndianId              = tG0_Command::kG0_Little_Big_EndianId << 27 | kG0_CommandId,
		kG0_Bank_Switch_StartId              = tG0_Command::kG0_Bank_Switch_StartId << 27 | kG0_CommandId,
		kG0_Bank_Switch_ModeId               = tG0_Command::kG0_Bank_Switch_ModeId << 27 | kG0_CommandId,
		kG0_Bank_Switch_EnableId             = tG0_Command::kG0_Bank_Switch_EnableId << 27 | kG0_CommandId,
		kG1_Arm_CopyId                       = tG0_Command::kG1_Arm_CopyId << 27 | kG0_CommandId,
		kG1_Save_Trace_CopyId                = tG0_Command::kG1_Save_Trace_CopyId << 27 | kG0_CommandId,
		kG1_Disarm_CopyId                    = tG0_Command::kG1_Disarm_CopyId << 27 | kG0_CommandId,

		kG1_CommandId                        = 44,
		kG1_ArmId                            = tG1_Command::kG1_ArmId << 27 | kG1_CommandId,
		kG1_Save_TraceId                     = tG1_Command::kG1_Save_TraceId << 27 | kG1_CommandId,
		kG1_LoadId                           = tG1_Command::kG1_LoadId << 27 | kG1_CommandId,
		kG1_Analog_Trigger_ResetId           = tG1_Command::kG1_Analog_Trigger_ResetId << 27 | kG1_CommandId,
		kG1_DisarmId                         = tG1_Command::kG1_DisarmId << 27 | kG1_CommandId,
		kG1_Up_DownId                        = tG1_Command::kG1_Up_DownId << 27 | kG1_CommandId,
		kG1_Write_SwitchId                   = tG1_Command::kG1_Write_SwitchId << 27 | kG1_CommandId,
		kG1_Synchronized_GateId              = tG1_Command::kG1_Synchronized_GateId << 27 | kG1_CommandId,
		kG1_Little_Big_EndianId              = tG1_Command::kG1_Little_Big_EndianId << 27 | kG1_CommandId,
		kG1_Bank_Switch_StartId              = tG1_Command::kG1_Bank_Switch_StartId << 27 | kG1_CommandId,
		kG1_Bank_Switch_ModeId               = tG1_Command::kG1_Bank_Switch_ModeId << 27 | kG1_CommandId,
		kG1_Bank_Switch_EnableId             = tG1_Command::kG1_Bank_Switch_EnableId << 27 | kG1_CommandId,
		kG0_Arm_CopyId                       = tG1_Command::kG0_Arm_CopyId << 27 | kG1_CommandId,
		kG0_Save_Trace_CopyId                = tG1_Command::kG0_Save_Trace_CopyId << 27 | kG1_CommandId,
		kG0_Disarm_CopyId                    = tG1_Command::kG0_Disarm_CopyId << 27 | kG1_CommandId,

		kG0_Input_SelectId                   = 45,
		kG0_Read_Acknowledges_IrqId          = tG0_Input_Select::kG0_Read_Acknowledges_IrqId << 27 | kG0_Input_SelectId,
		kG0_Write_Acknowledges_IrqId         = tG0_Input_Select::kG0_Write_Acknowledges_IrqId << 27 | kG0_Input_SelectId,
		kG0_Source_SelectId                  = tG0_Input_Select::kG0_Source_SelectId << 27 | kG0_Input_SelectId,
		kG0_Gate_SelectId                    = tG0_Input_Select::kG0_Gate_SelectId << 27 | kG0_Input_SelectId,
		kG0_Gate_Select_Load_SourceId        = tG0_Input_Select::kG0_Gate_Select_Load_SourceId << 27 | kG0_Input_SelectId,
		kG0_OR_GateId                        = tG0_Input_Select::kG0_OR_GateId << 27 | kG0_Input_SelectId,
		kG0_Output_PolarityId                = tG0_Input_Select::kG0_Output_PolarityId << 27 | kG0_Input_SelectId,
		kG0_Source_PolarityId                = tG0_Input_Select::kG0_Source_PolarityId << 27 | kG0_Input_SelectId,

		kG1_Input_SelectId                   = 46,
		kG1_Read_Acknowledges_IrqId          = tG1_Input_Select::kG1_Read_Acknowledges_IrqId << 27 | kG1_Input_SelectId,
		kG1_Write_Acknowledges_IrqId         = tG1_Input_Select::kG1_Write_Acknowledges_IrqId << 27 | kG1_Input_SelectId,
		kG1_Source_SelectId                  = tG1_Input_Select::kG1_Source_SelectId << 27 | kG1_Input_SelectId,
		kG1_Gate_SelectId                    = tG1_Input_Select::kG1_Gate_SelectId << 27 | kG1_Input_SelectId,
		kG1_Gate_Select_Load_SourceId        = tG1_Input_Select::kG1_Gate_Select_Load_SourceId << 27 | kG1_Input_SelectId,
		kG1_OR_GateId                        = tG1_Input_Select::kG1_OR_GateId << 27 | kG1_Input_SelectId,
		kG1_Output_PolarityId                = tG1_Input_Select::kG1_Output_PolarityId << 27 | kG1_Input_SelectId,
		kG1_Source_PolarityId                = tG1_Input_Select::kG1_Source_PolarityId << 27 | kG1_Input_SelectId,

		kG0_Load_AId                         = 47,
		kG0_Load_ADefaultId                                  = tG0_Load_A::kDefaultId << 27 | kG0_Load_AId,

		kG0_AutoincrementId                  = 48,
		kG0_AutoincrementDefaultId                                  = tG0_Autoincrement::kDefaultId << 27 | kG0_AutoincrementId,

		kG0_Load_BId                         = 49,
		kG0_Load_BDefaultId                                  = tG0_Load_B::kDefaultId << 27 | kG0_Load_BId,

		kG1_Load_AId                         = 50,
		kG1_Load_ADefaultId                                  = tG1_Load_A::kDefaultId << 27 | kG1_Load_AId,

		kG1_AutoincrementId                  = 51,
		kG1_AutoincrementDefaultId                                  = tG1_Autoincrement::kDefaultId << 27 | kG1_AutoincrementId,

		kG1_Load_BId                         = 52,
		kG1_Load_BDefaultId                                  = tG1_Load_B::kDefaultId << 27 | kG1_Load_BId,

		kGeneric_ControlId                   = 53,
		kControlId                           = tGeneric_Control::kControlId << 27 | kGeneric_ControlId,

		kIO_Bidirection_PinId                = 54,
		kBD_0_Pin_DirId                      = tIO_Bidirection_Pin::kBD_0_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_1_Pin_DirId                      = tIO_Bidirection_Pin::kBD_1_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_2_Pin_DirId                      = tIO_Bidirection_Pin::kBD_2_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_3_Pin_DirId                      = tIO_Bidirection_Pin::kBD_3_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_4_Pin_DirId                      = tIO_Bidirection_Pin::kBD_4_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_5_Pin_DirId                      = tIO_Bidirection_Pin::kBD_5_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_6_Pin_DirId                      = tIO_Bidirection_Pin::kBD_6_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_7_Pin_DirId                      = tIO_Bidirection_Pin::kBD_7_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_8_Pin_DirId                      = tIO_Bidirection_Pin::kBD_8_Pin_DirId << 27 | kIO_Bidirection_PinId,
		kBD_9_Pin_DirId                      = tIO_Bidirection_Pin::kBD_9_Pin_DirId << 27 | kIO_Bidirection_PinId,

		kAnalog_Trigger_EtcId                = 55,
		kAnalog_Trigger_ModeId               = tAnalog_Trigger_Etc::kAnalog_Trigger_ModeId << 27 | kAnalog_Trigger_EtcId,
		kAnalog_Trigger_EnableId             = tAnalog_Trigger_Etc::kAnalog_Trigger_EnableId << 27 | kAnalog_Trigger_EtcId,
		kAnalog_Trigger_DriveId              = tAnalog_Trigger_Etc::kAnalog_Trigger_DriveId << 27 | kAnalog_Trigger_EtcId,
		kSoftware_TestId                     = tAnalog_Trigger_Etc::kSoftware_TestId << 27 | kAnalog_Trigger_EtcId,
		kMisc_Counter_TCs_Output_EnableId    = tAnalog_Trigger_Etc::kMisc_Counter_TCs_Output_EnableId << 27 | kAnalog_Trigger_EtcId,
		kGPFO_1_Output_SelectId              = tAnalog_Trigger_Etc::kGPFO_1_Output_SelectId << 27 | kAnalog_Trigger_EtcId,
		kGPFO_0_Output_SelectId              = tAnalog_Trigger_Etc::kGPFO_0_Output_SelectId << 27 | kAnalog_Trigger_EtcId,
		kGPFO_0_Output_EnableId              = tAnalog_Trigger_Etc::kGPFO_0_Output_EnableId << 27 | kAnalog_Trigger_EtcId,
		kGPFO_1_Output_EnableId              = tAnalog_Trigger_Etc::kGPFO_1_Output_EnableId << 27 | kAnalog_Trigger_EtcId,

		kInterrupt_ControlId                 = 56,
		kInterrupt_Output_PolarityId         = tInterrupt_Control::kInterrupt_Output_PolarityId << 27 | kInterrupt_ControlId,
		kInterrupt_Output_On_3_PinsId        = tInterrupt_Control::kInterrupt_Output_On_3_PinsId << 27 | kInterrupt_ControlId,
		kPass_Thru_1_Interrupt_PolarityId    = tInterrupt_Control::kPass_Thru_1_Interrupt_PolarityId << 27 | kInterrupt_ControlId,
		kPass_Thru_0_Interrupt_PolarityId    = tInterrupt_Control::kPass_Thru_0_Interrupt_PolarityId << 27 | kInterrupt_ControlId,
		kGroup_Interrupt_A_Output_SelectId         = tInterrupt_Control::kInterrupt_A_Output_SelectId << 27 | kInterrupt_ControlId,
		kGroup_Interrupt_A_EnableId                = tInterrupt_Control::kInterrupt_A_EnableId << 27 | kInterrupt_ControlId,
		kGroup_Interrupt_B_Output_SelectId         = tInterrupt_Control::kInterrupt_B_Output_SelectId << 27 | kInterrupt_ControlId,
		kGroup_Interrupt_B_EnableId                = tInterrupt_Control::kInterrupt_B_EnableId << 27 | kInterrupt_ControlId,

		kClock_and_FOUTId                    = 57,
		kFOUT_DividerId                      = tClock_and_FOUT::kFOUT_DividerId << 27 | kClock_and_FOUTId,
		kAO_Source_Divide_By_2Id             = tClock_and_FOUT::kAO_Source_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kAO_Output_Divide_By_2Id             = tClock_and_FOUT::kAO_Output_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kAI_Source_Divide_By_2Id             = tClock_and_FOUT::kAI_Source_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kAI_Output_Divide_By_2Id             = tClock_and_FOUT::kAI_Output_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kClock_To_BoardId                    = tClock_and_FOUT::kClock_To_BoardId << 27 | kClock_and_FOUTId,
		kClock_To_Board_Divide_By_2Id        = tClock_and_FOUT::kClock_To_Board_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kG_Source_Divide_By_2Id              = tClock_and_FOUT::kG_Source_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kSlow_Internal_TimebaseId            = tClock_and_FOUT::kSlow_Internal_TimebaseId << 27 | kClock_and_FOUTId,
		kSlow_Internal_Time_Divide_By_2Id    = tClock_and_FOUT::kSlow_Internal_Time_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kDIO_Serial_Out_Divide_By_2Id        = tClock_and_FOUT::kDIO_Serial_Out_Divide_By_2Id << 27 | kClock_and_FOUTId,
		kFOUT_Timebase_SelectId              = tClock_and_FOUT::kFOUT_Timebase_SelectId << 27 | kClock_and_FOUTId,
		kFOUT_EnableId                       = tClock_and_FOUT::kFOUT_EnableId << 27 | kClock_and_FOUTId,

		kJoint_ResetId                       = 58,
		kAI_ResetId                          = tJoint_Reset::kAI_ResetId << 27 | kJoint_ResetId,
		kAO_ResetId                          = tJoint_Reset::kAO_ResetId << 27 | kJoint_ResetId,
		kG0_ResetId                          = tJoint_Reset::kG0_ResetId << 27 | kJoint_ResetId,
		kG1_ResetId                          = tJoint_Reset::kG1_ResetId << 27 | kJoint_ResetId,
		kAI_Configuration_StartId            = tJoint_Reset::kAI_Configuration_StartId << 27 | kJoint_ResetId,
		kAO_Configuration_StartId            = tJoint_Reset::kAO_Configuration_StartId << 27 | kJoint_ResetId,
		kAO_UI2_Configuration_StartId        = tJoint_Reset::kAO_UI2_Configuration_StartId << 27 | kJoint_ResetId,
		kAI_Configuration_EndId              = tJoint_Reset::kAI_Configuration_EndId << 27 | kJoint_ResetId,
		kAO_Configuration_EndId              = tJoint_Reset::kAO_Configuration_EndId << 27 | kJoint_ResetId,
		kAO_UI2_Configuration_EndId          = tJoint_Reset::kAO_UI2_Configuration_EndId << 27 | kJoint_ResetId,
		kSoftware_ResetId                    = tJoint_Reset::kSoftware_ResetId << 27 | kJoint_ResetId,

		kRTSI_Trig_DirectionId               = 59,
		kRTSI_Clock_ModeId                   = tRTSI_Trig_Direction::kRTSI_Clock_ModeId << 27 | kRTSI_Trig_DirectionId,
		kRTSI_Trig_0_Pin_DirId               = tRTSI_Trig_Direction::kRTSI_Trig_0_Pin_DirId << 27 | kRTSI_Trig_DirectionId,
		kRTSI_Trig_1_Pin_DirId               = tRTSI_Trig_Direction::kRTSI_Trig_1_Pin_DirId << 27 | kRTSI_Trig_DirectionId,
		kRTSI_Trig_2_Pin_DirId               = tRTSI_Trig_Direction::kRTSI_Trig_2_Pin_DirId << 27 | kRTSI_Trig_DirectionId,
		kRTSI_Trig_3_Pin_DirId               = tRTSI_Trig_Direction::kRTSI_Trig_3_Pin_DirId << 27 | kRTSI_Trig_DirectionId,
		kRTSI_Trig_4_Pin_DirId               = tRTSI_Trig_Direction::kRTSI_Trig_4_Pin_DirId << 27 | kRTSI_Trig_DirectionId,
		kRTSI_Trig_5_Pin_DirId               = tRTSI_Trig_Direction::kRTSI_Trig_5_Pin_DirId << 27 | kRTSI_Trig_DirectionId,
		kRTSI_Trig_6_Pin_DirId               = tRTSI_Trig_Direction::kRTSI_Trig_6_Pin_DirId << 27 | kRTSI_Trig_DirectionId,

		kRTSI_Trig_A_OutputId                = 60,
		kRTSI_Trig_0_Output_SelectId         = tRTSI_Trig_A_Output::kRTSI_Trig_0_Output_SelectId << 27 | kRTSI_Trig_A_OutputId,
		kRTSI_Trig_1_Output_SelectId         = tRTSI_Trig_A_Output::kRTSI_Trig_1_Output_SelectId << 27 | kRTSI_Trig_A_OutputId,
		kRTSI_Trig_2_Output_SelectId         = tRTSI_Trig_A_Output::kRTSI_Trig_2_Output_SelectId << 27 | kRTSI_Trig_A_OutputId,
		kRTSI_Trig_3_Output_SelectId         = tRTSI_Trig_A_Output::kRTSI_Trig_3_Output_SelectId << 27 | kRTSI_Trig_A_OutputId,

		kRTSI_Trig_B_OutputId                = 61,
		kRTSI_Trig_4_Output_SelectId         = tRTSI_Trig_B_Output::kRTSI_Trig_4_Output_SelectId << 27 | kRTSI_Trig_B_OutputId,
		kRTSI_Trig_5_Output_SelectId         = tRTSI_Trig_B_Output::kRTSI_Trig_5_Output_SelectId << 27 | kRTSI_Trig_B_OutputId,
		kRTSI_Trig_6_Output_SelectId         = tRTSI_Trig_B_Output::kRTSI_Trig_6_Output_SelectId << 27 | kRTSI_Trig_B_OutputId,
		kRTSI_Sub_Selection_1Id              = tRTSI_Trig_B_Output::kRTSI_Sub_Selection_1Id << 27 | kRTSI_Trig_B_OutputId,

		kRTSI_BoardId                        = 62,
		kRTSI_Board_0_Output_SelectId        = tRTSI_Board::kRTSI_Board_0_Output_SelectId << 27 | kRTSI_BoardId,
		kRTSI_Board_1_Output_SelectId        = tRTSI_Board::kRTSI_Board_1_Output_SelectId << 27 | kRTSI_BoardId,
		kRTSI_Board_2_Output_SelectId        = tRTSI_Board::kRTSI_Board_2_Output_SelectId << 27 | kRTSI_BoardId,
		kRTSI_Board_3_Output_SelectId        = tRTSI_Board::kRTSI_Board_3_Output_SelectId << 27 | kRTSI_BoardId,
		kRTSI_Board_0_Pin_DirId              = tRTSI_Board::kRTSI_Board_0_Pin_DirId << 27 | kRTSI_BoardId,
		kRTSI_Board_1_Pin_DirId              = tRTSI_Board::kRTSI_Board_1_Pin_DirId << 27 | kRTSI_BoardId,
		kRTSI_Board_2_Pin_DirId              = tRTSI_Board::kRTSI_Board_2_Pin_DirId << 27 | kRTSI_BoardId,
		kRTSI_Board_3_Pin_DirId              = tRTSI_Board::kRTSI_Board_3_Pin_DirId << 27 | kRTSI_BoardId,

		kWrite_Strobe_0Id                    = 63,
		kWrite_Strobe_0DefaultId                                  = tWrite_Strobe_0::kDefaultId << 27 | kWrite_Strobe_0Id,

		kWrite_Strobe_1Id                    = 64,
		kWrite_Strobe_1DefaultId                                  = tWrite_Strobe_1::kDefaultId << 27 | kWrite_Strobe_1Id,

		kWrite_Strobe_2Id                    = 65,
		kWrite_Strobe_2DefaultId                                  = tWrite_Strobe_2::kDefaultId << 27 | kWrite_Strobe_2Id,

		kWrite_Strobe_3Id                    = 66,
		kWrite_Strobe_3DefaultId                                  = tWrite_Strobe_3::kDefaultId << 27 | kWrite_Strobe_3Id,

		kAI_DIV_SaveId                       = 67,
		kAI_DIV_SaveDefaultId                                  = tAI_DIV_Save::kDefaultId << 27 | kAI_DIV_SaveId,

		kAI_SC_SaveId                        = 68,
		kAI_SC_SaveDefaultId                                  = tAI_SC_Save::kDefaultId << 27 | kAI_SC_SaveId,

		kAI_SI_SaveId                        = 69,
		kAI_SI_SaveDefaultId                                  = tAI_SI_Save::kDefaultId << 27 | kAI_SI_SaveId,

		kAI_SI2_SaveId                       = 70,
		kAI_SI2_SaveDefaultId                                  = tAI_SI2_Save::kDefaultId << 27 | kAI_SI2_SaveId,

		kAI_Status_1Id                       = 71,
		kPass_Thru_0_Interrupt_StId          = tAI_Status_1::kPass_Thru_0_Interrupt_StId << 27 | kAI_Status_1Id,
		kAI_FIFO_Request_StId                = tAI_Status_1::kAI_FIFO_Request_StId << 27 | kAI_Status_1Id,
		kG0_Gate_Interrupt_StId              = tAI_Status_1::kG0_Gate_Interrupt_StId << 27 | kAI_Status_1Id,
		kG0_TC_StId                          = tAI_Status_1::kG0_TC_StId << 27 | kAI_Status_1Id,
		kAI_STOP_StId                        = tAI_Status_1::kAI_STOP_StId << 27 | kAI_Status_1Id,
		kAI_START_StId                       = tAI_Status_1::kAI_START_StId << 27 | kAI_Status_1Id,
		kAI_SC_TC_StId                       = tAI_Status_1::kAI_SC_TC_StId << 27 | kAI_Status_1Id,
		kAI_START1_StId                      = tAI_Status_1::kAI_START1_StId << 27 | kAI_Status_1Id,
		kAI_START2_StId                      = tAI_Status_1::kAI_START2_StId << 27 | kAI_Status_1Id,
		kAI_SC_TC_Error_StId                 = tAI_Status_1::kAI_SC_TC_Error_StId << 27 | kAI_Status_1Id,
		kAI_Overflow_StId                    = tAI_Status_1::kAI_Overflow_StId << 27 | kAI_Status_1Id,
		kAI_Overrun_StId                     = tAI_Status_1::kAI_Overrun_StId << 27 | kAI_Status_1Id,
		kAI_FIFO_Empty_StId                  = tAI_Status_1::kAI_FIFO_Empty_StId << 27 | kAI_Status_1Id,
		kAI_FIFO_Half_Full_StId              = tAI_Status_1::kAI_FIFO_Half_Full_StId << 27 | kAI_Status_1Id,
		kAI_FIFO_Full_StId                   = tAI_Status_1::kAI_FIFO_Full_StId << 27 | kAI_Status_1Id,
		kInterrupt_A_StId                    = tAI_Status_1::kInterrupt_A_StId << 27 | kAI_Status_1Id,

		kAI_Status_2Id                       = 72,
		kAI_SC_Armed_StId                    = tAI_Status_2::kAI_SC_Armed_StId << 27 | kAI_Status_2Id,
		kAI_SC_Next_Load_Source_StId         = tAI_Status_2::kAI_SC_Next_Load_Source_StId << 27 | kAI_Status_2Id,
		kAI_SC_Save_StId                     = tAI_Status_2::kAI_SC_Save_StId << 27 | kAI_Status_2Id,
		kAI_SC_Q_StId                        = tAI_Status_2::kAI_SC_Q_StId << 27 | kAI_Status_2Id,
		kAI_SI_Armed_StId                    = tAI_Status_2::kAI_SI_Armed_StId << 27 | kAI_Status_2Id,
		kAI_SI_Next_Load_Source_StId         = tAI_Status_2::kAI_SI_Next_Load_Source_StId << 27 | kAI_Status_2Id,
		kAI_SI_Count_Enable_StId             = tAI_Status_2::kAI_SI_Count_Enable_StId << 27 | kAI_Status_2Id,
		kAI_SI_Q_StId                        = tAI_Status_2::kAI_SI_Q_StId << 27 | kAI_Status_2Id,
		kAI_SI2_Armed_StId                   = tAI_Status_2::kAI_SI2_Armed_StId << 27 | kAI_Status_2Id,
		kAI_SI2_Next_Load_Source_StId        = tAI_Status_2::kAI_SI2_Next_Load_Source_StId << 27 | kAI_Status_2Id,
		kAI_DIV_Q_StId                       = tAI_Status_2::kAI_DIV_Q_StId << 27 | kAI_Status_2Id,
		kAI_DIV_Armed_StId                   = tAI_Status_2::kAI_DIV_Armed_StId << 27 | kAI_Status_2Id,
		kReserved_2000_StId                  = tAI_Status_2::kReserved_2000_StId << 27 | kAI_Status_2Id,

		kAO_BC_SaveId                        = 73,
		kAO_BC_SaveDefaultId                                  = tAO_BC_Save::kDefaultId << 27 | kAO_BC_SaveId,

		kAO_Status_1Id                       = 74,
		kPass_Thru_1_Interrupt_StId          = tAO_Status_1::kPass_Thru_1_Interrupt_StId << 27 | kAO_Status_1Id,
		kAO_FIFO_Request_StId                = tAO_Status_1::kAO_FIFO_Request_StId << 27 | kAO_Status_1Id,
		kG1_Gate_Interrupt_StId              = tAO_Status_1::kG1_Gate_Interrupt_StId << 27 | kAO_Status_1Id,
		kG1_TC_StId                          = tAO_Status_1::kG1_TC_StId << 27 | kAO_Status_1Id,
		kAO_UI2_TC_StId                      = tAO_Status_1::kAO_UI2_TC_StId << 27 | kAO_Status_1Id,
		kAO_UPDATE_StId                      = tAO_Status_1::kAO_UPDATE_StId << 27 | kAO_Status_1Id,
		kAO_UC_TC_StId                       = tAO_Status_1::kAO_UC_TC_StId << 27 | kAO_Status_1Id,
		kAO_BC_TC_StId                       = tAO_Status_1::kAO_BC_TC_StId << 27 | kAO_Status_1Id,
		kAO_START1_StId                      = tAO_Status_1::kAO_START1_StId << 27 | kAO_Status_1Id,
		kAO_Overrun_StId                     = tAO_Status_1::kAO_Overrun_StId << 27 | kAO_Status_1Id,
		kAO_START_StId                       = tAO_Status_1::kAO_START_StId << 27 | kAO_Status_1Id,
		kAO_BC_TC_Error_StId                 = tAO_Status_1::kAO_BC_TC_Error_StId << 27 | kAO_Status_1Id,
		kAO_FIFO_Empty_StId                  = tAO_Status_1::kAO_FIFO_Empty_StId << 27 | kAO_Status_1Id,
		kAO_FIFO_Half_Full_StId              = tAO_Status_1::kAO_FIFO_Half_Full_StId << 27 | kAO_Status_1Id,
		kAO_FIFO_Full_StId                   = tAO_Status_1::kAO_FIFO_Full_StId << 27 | kAO_Status_1Id,
		kInterrupt_B_StId                    = tAO_Status_1::kInterrupt_B_StId << 27 | kAO_Status_1Id,

		kAO_Status_2Id                       = 75,
		kAO_BC_Armed_StId                    = tAO_Status_2::kAO_BC_Armed_StId << 27 | kAO_Status_2Id,
		kAO_BC_Next_Load_Source_StId         = tAO_Status_2::kAO_BC_Next_Load_Source_StId << 27 | kAO_Status_2Id,
		kAO_BC_Save_StId                     = tAO_Status_2::kAO_BC_Save_StId << 27 | kAO_Status_2Id,
		kAO_BC_Q_StId                        = tAO_Status_2::kAO_BC_Q_StId << 27 | kAO_Status_2Id,
		kAO_BC_TC_Trigger_Error_StId         = tAO_Status_2::kAO_BC_TC_Trigger_Error_StId << 27 | kAO_Status_2Id,
		kAO_UI_Armed_StId                    = tAO_Status_2::kAO_UI_Armed_StId << 27 | kAO_Status_2Id,
		kAO_UI_Next_Load_Source_StId         = tAO_Status_2::kAO_UI_Next_Load_Source_StId << 27 | kAO_Status_2Id,
		kAO_UC_Save_StId                     = tAO_Status_2::kAO_UC_Save_StId << 27 | kAO_Status_2Id,
		kAO_UI_Counting_StId                 = tAO_Status_2::kAO_UI_Counting_StId << 27 | kAO_Status_2Id,
		kAO_UI_Q_StId                        = tAO_Status_2::kAO_UI_Q_StId << 27 | kAO_Status_2Id,
		kAO_UI2_TC_Error_StId                = tAO_Status_2::kAO_UI2_TC_Error_StId << 27 | kAO_Status_2Id,
		kAO_UI2_Armed_StId                   = tAO_Status_2::kAO_UI2_Armed_StId << 27 | kAO_Status_2Id,
		kAO_UI2_Next_Load_Source_StId        = tAO_Status_2::kAO_UI2_Next_Load_Source_StId << 27 | kAO_Status_2Id,
		kAO_UI2_Counting_StId                = tAO_Status_2::kAO_UI2_Counting_StId << 27 | kAO_Status_2Id,
		kAO_UC_Armed_StId                    = tAO_Status_2::kAO_UC_Armed_StId << 27 | kAO_Status_2Id,
		kAO_UC_Next_Load_Source_StId         = tAO_Status_2::kAO_UC_Next_Load_Source_StId << 27 | kAO_Status_2Id,

		kAO_UC_SaveId                        = 76,
		kAO_UC_SaveDefaultId                                  = tAO_UC_Save::kDefaultId << 27 | kAO_UC_SaveId,

		kAO_UI_SaveId                        = 77,
		kAO_UI_SaveDefaultId                                  = tAO_UI_Save::kDefaultId << 27 | kAO_UI_SaveId,

		kAO_UI2_SaveId                       = 78,
		kAO_UI2_SaveDefaultId                                  = tAO_UI2_Save::kDefaultId << 27 | kAO_UI2_SaveId,

		kDIO_Parallel_InputId                = 79,
		kDIO_Parallel_Data_In_StId           = tDIO_Parallel_Input::kDIO_Parallel_Data_In_StId << 27 | kDIO_Parallel_InputId,
		kReserved_1_StId                     = tDIO_Parallel_Input::kReserved_1_StId << 27 | kDIO_Parallel_InputId,

		kDIO_Serial_InputId                  = 80,
		kDIO_Serial_Data_In_StId             = tDIO_Serial_Input::kDIO_Serial_Data_In_StId << 27 | kDIO_Serial_InputId,
		kReserved_2_StId                     = tDIO_Serial_Input::kReserved_2_StId << 27 | kDIO_Serial_InputId,

		kG0_HW_SaveId                        = 81,
		kG0_HW_SaveDefaultId                                  = tG0_HW_Save::kDefaultId << 27 | kG0_HW_SaveId,

		kG0_SaveId                           = 82,
		kG0_SaveDefaultId                                  = tG0_Save::kDefaultId << 27 | kG0_SaveId,

		kG1_HW_SaveId                        = 83,
		kG1_HW_SaveDefaultId                                  = tG1_HW_Save::kDefaultId << 27 | kG1_HW_SaveId,

		kG1_SaveId                           = 84,
		kG1_SaveDefaultId                                  = tG1_Save::kDefaultId << 27 | kG1_SaveId,

		kG_StatusId                          = 85,
		kG0_Save_StId                        = tG_Status::kG0_Save_StId << 27 | kG_StatusId,
		kG1_Save_StId                        = tG_Status::kG1_Save_StId << 27 | kG_StatusId,
		kG0_Counting_StId                    = tG_Status::kG0_Counting_StId << 27 | kG_StatusId,
		kG1_Counting_StId                    = tG_Status::kG1_Counting_StId << 27 | kG_StatusId,
		kG0_Next_Load_Source_StId            = tG_Status::kG0_Next_Load_Source_StId << 27 | kG_StatusId,
		kG1_Next_Load_Source_StId            = tG_Status::kG1_Next_Load_Source_StId << 27 | kG_StatusId,
		kG0_Stale_Data_StId                  = tG_Status::kG0_Stale_Data_StId << 27 | kG_StatusId,
		kG1_Stale_Data_StId                  = tG_Status::kG1_Stale_Data_StId << 27 | kG_StatusId,
		kG0_Armed_StId                       = tG_Status::kG0_Armed_StId << 27 | kG_StatusId,
		kG1_Armed_StId                       = tG_Status::kG1_Armed_StId << 27 | kG_StatusId,
		kG0_No_Load_Between_Gates_StId       = tG_Status::kG0_No_Load_Between_Gates_StId << 27 | kG_StatusId,
		kG1_No_Load_Between_Gates_StId       = tG_Status::kG1_No_Load_Between_Gates_StId << 27 | kG_StatusId,
		kG0_TC_Error_StId                    = tG_Status::kG0_TC_Error_StId << 27 | kG_StatusId,
		kG1_TC_Error_StId                    = tG_Status::kG1_TC_Error_StId << 27 | kG_StatusId,
		kG0_Gate_Error_StId                  = tG_Status::kG0_Gate_Error_StId << 27 | kG_StatusId,
		kG1_Gate_Error_StId                  = tG_Status::kG1_Gate_Error_StId << 27 | kG_StatusId,

		kJoint_Status_1Id                    = 86,
		kG0_Bank_StId                        = tJoint_Status_1::kG0_Bank_StId << 27 | kJoint_Status_1Id,
		kG1_Bank_StId                        = tJoint_Status_1::kG1_Bank_StId << 27 | kJoint_Status_1Id,
		kG0_Gate_StId                        = tJoint_Status_1::kG0_Gate_StId << 27 | kJoint_Status_1Id,
		kG1_Gate_StId                        = tJoint_Status_1::kG1_Gate_StId << 27 | kJoint_Status_1Id,
		kAI_Sc_Gate_StId                     = tJoint_Status_1::kAI_Sc_Gate_StId << 27 | kJoint_Status_1Id,
		kAI_Start_Stop_Gate_StId             = tJoint_Status_1::kAI_Start_Stop_Gate_StId << 27 | kJoint_Status_1Id,
		kAO_BC_Gate_StId                     = tJoint_Status_1::kAO_BC_Gate_StId << 27 | kJoint_Status_1Id,
		kAO_Start_Stop_Gate_StId             = tJoint_Status_1::kAO_Start_Stop_Gate_StId << 27 | kJoint_Status_1Id,
		kAI_SI2_Q_StId                       = tJoint_Status_1::kAI_SI2_Q_StId << 27 | kJoint_Status_1Id,
		kAI_External_Gate_StId               = tJoint_Status_1::kAI_External_Gate_StId << 27 | kJoint_Status_1Id,
		kAO_External_Gate_StId               = tJoint_Status_1::kAO_External_Gate_StId << 27 | kJoint_Status_1Id,
		kDIO_Serial_IO_In_Progress_StId      = tJoint_Status_1::kDIO_Serial_IO_In_Progress_StId << 27 | kJoint_Status_1Id,
		kAO_UI2_Gate_StId                    = tJoint_Status_1::kAO_UI2_Gate_StId << 27 | kJoint_Status_1Id,
		kAO_UC_Q_StId                        = tJoint_Status_1::kAO_UC_Q_StId << 27 | kJoint_Status_1Id,
		kAI_Last_Shiftin_StId                = tJoint_Status_1::kAI_Last_Shiftin_StId << 27 | kJoint_Status_1Id,

		kJoint_Status_2Id                    = 87,
		kG0_Output_StId                      = tJoint_Status_2::kG0_Output_StId << 27 | kJoint_Status_2Id,
		kG1_Output_StId                      = tJoint_Status_2::kG1_Output_StId << 27 | kJoint_Status_2Id,
		kAO_STOP_StId                        = tJoint_Status_2::kAO_STOP_StId << 27 | kJoint_Status_2Id,
		kAI_SOC_StId                         = tJoint_Status_2::kAI_SOC_StId << 27 | kJoint_Status_2Id,
		kAI_EOC_StId                         = tJoint_Status_2::kAI_EOC_StId << 27 | kJoint_Status_2Id,
		kAO_TMRDACWRs_In_Progress_StId       = tJoint_Status_2::kAO_TMRDACWRs_In_Progress_StId << 27 | kJoint_Status_2Id,
		kAI_Config_Memory_Empty_StId         = tJoint_Status_2::kAI_Config_Memory_Empty_StId << 27 | kJoint_Status_2Id,
		kAI_Scan_In_Progress_StId            = tJoint_Status_2::kAI_Scan_In_Progress_StId << 27 | kJoint_Status_2Id,
		kGeneric_StatusId                    = tJoint_Status_2::kGeneric_StatusId << 27 | kJoint_Status_2Id,
		kG0_HW_Save_StId                     = tJoint_Status_2::kG0_HW_Save_StId << 27 | kJoint_Status_2Id,
		kG1_Hw_Save_StId                     = tJoint_Status_2::kG1_Hw_Save_StId << 27 | kJoint_Status_2Id,
		kG0_Permanent_Stale_Data_StId        = tJoint_Status_2::kG0_Permanent_Stale_Data_StId << 27 | kJoint_Status_2Id,
		kG1_Permanent_Stale_Data_StId        = tJoint_Status_2::kG1_Permanent_Stale_Data_StId << 27 | kJoint_Status_2Id,


		kMaxRegisterId = 87

	} tId;

	tSTC(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
	void reset(nMDBG::tStatus2* statusChain = NULL);
	virtual ~tSTC();

	inline tBusSpaceReference getBusSpaceReference(void) const;

	inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
	inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
	inline void flushBus(nMDBG::tStatus2* statusChain = NULL);
private:
	void _initialize(nMDBG::tStatus2* statusChain = NULL);
	tBusSpaceReference _addrSpace;
	tBoolean _deallocateBus;
	u32 _addressOffset;

};

#ifndef ___tSTC_ipp___
#ifndef ___tSTC_h_no_inline___
#include "tSTC.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

