/* ! \file include/edp/ati6284/ni/tSTC.ipp
    * \brief plik nag³ówkowy NI
    * Ostatnia modyfikacja: 04.2006 */
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tSTC_ipp___
#define ___tSTC_ipp___

#ifndef ___tSTC_h___
#include "tSTC.h"
#endif

#include "trace.h"
inline void tSTC::tReg16IODirect16::write(
	tBusSpaceReference addrSpace,
	u32 offset,
	u16 value,
	nMDBG::tStatus2* s)
{
	if (s && s->isFatal()) return;
	addrSpace.write16(offset, u16(value));
}

inline u16 tSTC::tReg16IODirect16::read(
	tBusSpaceReference addrSpace,
	u32 offset,
	nMDBG::tStatus2* s)
{
	u16 value;   if (s && s->isFatal()) return ~0;
	value = (u16)addrSpace.read16(offset);
	return value;
}

inline void tSTC::tReg16IOWindowed16::write(
	tBusSpaceReference addrSpace,
	u32 offset,
	u16 value,
	nMDBG::tStatus2* s)
{
	if (s && s->isFatal()) return;
	addrSpace.write16(kAddressOffset, offset );
	addrSpace.write16(kDataOffset, value );
}

inline u16 tSTC::tReg16IOWindowed16::read(
	tBusSpaceReference addrSpace,
	u32 offset,
	nMDBG::tStatus2* s)
{	
	u16 value;   if (s && s->isFatal()) return ~0;
	addrSpace.write16(kAddressOffset, offset );
	value = addrSpace.read16(kDataOffset);
	return value;
}

inline void tSTC::tReg32IOWindowed16::write(
	tBusSpaceReference addrSpace,
	u32 offset,
	u32 value,
	nMDBG::tStatus2* s)
{
	if (s && s->isFatal()) return;
	addrSpace.write16(kAddressOffset, offset );
	addrSpace.write16(kDataOffset, value >> 16);
	addrSpace.write16(kAddressOffset, offset + 1 );
	addrSpace.write16(kDataOffset, value);
}

inline u32 tSTC::tReg32IOWindowed16::read(
	tBusSpaceReference addrSpace,
	u32 offset,
	nMDBG::tStatus2* s)
{
	u32 value0;
	u32 value1;
	
	if (s && s->isFatal()) return ~0;

	addrSpace.write16(kAddressOffset, offset );
	value1 = addrSpace.read16(kDataOffset);
	addrSpace.write16(kAddressOffset, offset + 1 );
	value0 = addrSpace.read16(kDataOffset);
	return value1 << 16 | value0;
}

inline tBusSpaceReference tSTC::getBusSpaceReference(void) const
{
	return _addrSpace;
}

inline void tSTC::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
	_addressOffset = value;
}
inline u32  tSTC::getAddressOffset(nMDBG::tStatus2* s)
{
	return _addressOffset;
}
inline void tSTC::flushBus(nMDBG::tStatus2* s)
{

}

inline tSTC::tAI_Command_1::tAI_Command_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Command_1::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Command_1::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Command_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Command_1::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0000);
}

inline void tSTC::tAI_Command_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Command_1::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_CONVERT_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_CONVERT_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAI_Command_1::writeAI_CONVERT_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_CONVERT_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_CONVERT_Pulse(nMDBG::tStatus2* s)
{
	return getAI_CONVERT_Pulse(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SC_TC_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SC_TC_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAI_Command_1::writeAI_SC_TC_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_TC_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SC_TC_Pulse(nMDBG::tStatus2* s)
{
	return getAI_SC_TC_Pulse(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_LOCALMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_LOCALMUX_CLK_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAI_Command_1::writeAI_LOCALMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_LOCALMUX_CLK_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_LOCALMUX_CLK_Pulse(nMDBG::tStatus2* s)
{
	return getAI_LOCALMUX_CLK_Pulse(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_EXTMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_EXTMUX_CLK_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAI_Command_1::writeAI_EXTMUX_CLK_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_EXTMUX_CLK_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_EXTMUX_CLK_Pulse(nMDBG::tStatus2* s)
{
	return getAI_EXTMUX_CLK_Pulse(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SCAN_IN_PROG_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SCAN_IN_PROG_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAI_Command_1::writeAI_SCAN_IN_PROG_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SCAN_IN_PROG_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SCAN_IN_PROG_Pulse(nMDBG::tStatus2* s)
{
	return getAI_SCAN_IN_PROG_Pulse(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SC_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAI_Command_1::writeAI_SC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SC_Load(nMDBG::tStatus2* s)
{
	return getAI_SC_Load(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SC_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAI_Command_1::writeAI_SC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SC_Arm(nMDBG::tStatus2* s)
{
	return getAI_SC_Arm(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_DIV_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_DIV_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAI_Command_1::writeAI_DIV_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_DIV_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_DIV_Load(nMDBG::tStatus2* s)
{
	return getAI_DIV_Load(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_DIV_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_DIV_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAI_Command_1::writeAI_DIV_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_DIV_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_DIV_Arm(nMDBG::tStatus2* s)
{
	return getAI_DIV_Arm(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SI_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAI_Command_1::writeAI_SI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SI_Load(nMDBG::tStatus2* s)
{
	return getAI_SI_Load(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SI_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAI_Command_1::writeAI_SI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SI_Arm(nMDBG::tStatus2* s)
{
	return getAI_SI_Arm(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SI2_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SI2_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAI_Command_1::writeAI_SI2_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI2_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SI2_Load(nMDBG::tStatus2* s)
{
	return getAI_SI2_Load(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_SI2_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_SI2_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAI_Command_1::writeAI_SI2_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI2_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_SI2_Arm(nMDBG::tStatus2* s)
{
	return getAI_SI2_Arm(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_Disarm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAI_Command_1::writeAI_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Disarm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_Disarm(nMDBG::tStatus2* s)
{
	return getAI_Disarm(s);
}

inline tSTC::tAI_Command_1& tSTC::tAI_Command_1::setAI_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_1::getAI_Analog_Trigger_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAI_Command_1::writeAI_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Analog_Trigger_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_1::readAI_Analog_Trigger_Reset(nMDBG::tStatus2* s)
{
	return getAI_Analog_Trigger_Reset(s);
}

inline void tSTC::tAI_Command_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Command_2::tAI_Command_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Command_2::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Command_2::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Command_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Command_2::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff3c00);
}

inline void tSTC::tAI_Command_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Command_2::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_START1_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAI_Command_2::writeAI_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_START1_Pulse(nMDBG::tStatus2* s)
{
	return getAI_START1_Pulse(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_START2_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_START2_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAI_Command_2::writeAI_START2_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_START2_Pulse(nMDBG::tStatus2* s)
{
	return getAI_START2_Pulse(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_START_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAI_Command_2::writeAI_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_START_Pulse(nMDBG::tStatus2* s)
{
	return getAI_START_Pulse(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_STOP_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_STOP_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAI_Command_2::writeAI_STOP_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_STOP_Pulse(nMDBG::tStatus2* s)
{
	return getAI_STOP_Pulse(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_SC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_SC_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAI_Command_2::writeAI_SC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Switch_Load_On_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_SC_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
	return getAI_SC_Switch_Load_On_TC(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_SI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_SI_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAI_Command_2::writeAI_SI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Switch_Load_On_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_SI_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
	return getAI_SI_Switch_Load_On_TC(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_SI_Switch_Load_On_STOP(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_SI_Switch_Load_On_STOP(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAI_Command_2::writeAI_SI_Switch_Load_On_STOP(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Switch_Load_On_STOP(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_SI_Switch_Load_On_STOP(nMDBG::tStatus2* s)
{
	return getAI_SI_Switch_Load_On_STOP(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_SI_Switch_Load_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_SI_Switch_Load_On_SC_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAI_Command_2::writeAI_SI_Switch_Load_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Switch_Load_On_SC_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_SI_Switch_Load_On_SC_TC(nMDBG::tStatus2* s)
{
	return getAI_SI_Switch_Load_On_SC_TC(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_SC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_SC_Save_Trace(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAI_Command_2::writeAI_SC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Save_Trace(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_SC_Save_Trace(nMDBG::tStatus2* s)
{
	return getAI_SC_Save_Trace(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_START1_Disable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAI_Command_2::writeAI_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Disable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_START1_Disable(nMDBG::tStatus2* s)
{
	return getAI_START1_Disable(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_End_On_End_Of_Scan(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_End_On_End_Of_Scan(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAI_Command_2::writeAI_End_On_End_Of_Scan(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_End_On_End_Of_Scan(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_End_On_End_Of_Scan(nMDBG::tStatus2* s)
{
	return getAI_End_On_End_Of_Scan(s);
}

inline tSTC::tAI_Command_2& tSTC::tAI_Command_2::setAI_End_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Command_2::getAI_End_On_SC_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAI_Command_2::writeAI_End_On_SC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_End_On_SC_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Command_2::readAI_End_On_SC_TC(nMDBG::tStatus2* s)
{
	return getAI_End_On_SC_TC(s);
}

inline void tSTC::tAI_Command_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tInterrupt_A_Ack::tInterrupt_A_Ack()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tInterrupt_A_Ack::registerMap(void)
{
	return _STC;
}

inline void tSTC::tInterrupt_A_Ack::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tInterrupt_A_Ack::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0000);
}

inline void tSTC::tInterrupt_A_Ack::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tInterrupt_A_Ack::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getG0_Gate_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tInterrupt_A_Ack::writeG0_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readG0_Gate_Error_Confirm(nMDBG::tStatus2* s)
{
	return getG0_Gate_Error_Confirm(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getG0_TC_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tInterrupt_A_Ack::writeG0_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_TC_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readG0_TC_Error_Confirm(nMDBG::tStatus2* s)
{
	return getG0_TC_Error_Confirm(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setAI_SC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getAI_SC_TC_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tInterrupt_A_Ack::writeAI_SC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_TC_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readAI_SC_TC_Error_Confirm(nMDBG::tStatus2* s)
{
	return getAI_SC_TC_Error_Confirm(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setAI_SC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getAI_SC_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tInterrupt_A_Ack::writeAI_SC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_TC_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readAI_SC_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAI_SC_TC_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setAI_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getAI_START1_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tInterrupt_A_Ack::writeAI_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readAI_START1_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAI_START1_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setAI_START2_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getAI_START2_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tInterrupt_A_Ack::writeAI_START2_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readAI_START2_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAI_START2_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setAI_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getAI_START_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tInterrupt_A_Ack::writeAI_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readAI_START_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAI_START_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setAI_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getAI_STOP_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tInterrupt_A_Ack::writeAI_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readAI_STOP_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAI_STOP_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setAI_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getAI_Error_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tInterrupt_A_Ack::writeAI_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Error_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readAI_Error_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAI_Error_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getG0_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tInterrupt_A_Ack::writeG0_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_TC_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readG0_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getG0_TC_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_A_Ack& tSTC::tInterrupt_A_Ack::setG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_A_Ack::getG0_Gate_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tInterrupt_A_Ack::writeG0_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_A_Ack::readG0_Gate_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getG0_Gate_Interrupt_Ack(s);
}

inline void tSTC::tInterrupt_A_Ack::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tInterrupt_A_Enable::tInterrupt_A_Enable()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tInterrupt_A_Enable::registerMap(void)
{
	return _STC;
}

inline void tSTC::tInterrupt_A_Enable::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tInterrupt_A_Enable::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tInterrupt_A_Enable::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tInterrupt_A_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tInterrupt_A_Enable::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setAI_SC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getAI_SC_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tInterrupt_A_Enable::writeAI_SC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_TC_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readAI_SC_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAI_SC_TC_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setAI_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getAI_START1_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tInterrupt_A_Enable::writeAI_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readAI_START1_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAI_START1_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setAI_START2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getAI_START2_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tInterrupt_A_Enable::writeAI_START2_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readAI_START2_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAI_START2_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setAI_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getAI_START_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tInterrupt_A_Enable::writeAI_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readAI_START_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAI_START_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setAI_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getAI_STOP_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tInterrupt_A_Enable::writeAI_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readAI_STOP_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAI_STOP_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setAI_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getAI_Error_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tInterrupt_A_Enable::writeAI_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Error_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readAI_Error_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAI_Error_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setG0_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getG0_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tInterrupt_A_Enable::writeG0_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setG0_TC_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readG0_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getG0_TC_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setAI_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getAI_FIFO_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tInterrupt_A_Enable::writeAI_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_FIFO_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readAI_FIFO_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAI_FIFO_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setG0_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getG0_Gate_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tInterrupt_A_Enable::writeG0_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readG0_Gate_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getG0_Gate_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_A_Enable& tSTC::tInterrupt_A_Enable::setPass_Thru_0_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_A_Enable::getPass_Thru_0_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tInterrupt_A_Enable::writePass_Thru_0_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setPass_Thru_0_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_A_Enable::readPass_Thru_0_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getPass_Thru_0_Interrupt_Enable(s);
}

inline void tSTC::tInterrupt_A_Enable::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tSecond_Irq_A_Enable::tSecond_Irq_A_Enable()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tSecond_Irq_A_Enable::registerMap(void)
{
	return _STC;
}

inline void tSTC::tSecond_Irq_A_Enable::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tSecond_Irq_A_Enable::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tSecond_Irq_A_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tSecond_Irq_A_Enable::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setAI_SC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getAI_SC_TC_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tSecond_Irq_A_Enable::writeAI_SC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_TC_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readAI_SC_TC_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAI_SC_TC_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setAI_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getAI_START1_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tSecond_Irq_A_Enable::writeAI_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readAI_START1_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAI_START1_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setAI_START2_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getAI_START2_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tSecond_Irq_A_Enable::writeAI_START2_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readAI_START2_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAI_START2_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setAI_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getAI_START_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tSecond_Irq_A_Enable::writeAI_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readAI_START_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAI_START_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setAI_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getAI_STOP_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tSecond_Irq_A_Enable::writeAI_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readAI_STOP_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAI_STOP_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setAI_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getAI_Error_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tSecond_Irq_A_Enable::writeAI_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Error_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readAI_Error_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAI_Error_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setG0_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getG0_TC_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tSecond_Irq_A_Enable::writeG0_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_TC_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readG0_TC_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getG0_TC_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setAI_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getAI_FIFO_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tSecond_Irq_A_Enable::writeAI_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_FIFO_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readAI_FIFO_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAI_FIFO_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setG0_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getG0_Gate_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tSecond_Irq_A_Enable::writeG0_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readG0_Gate_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getG0_Gate_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_A_Enable& tSTC::tSecond_Irq_A_Enable::setPass_Thru_0_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_A_Enable::getPass_Thru_0_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tSecond_Irq_A_Enable::writePass_Thru_0_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setPass_Thru_0_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_A_Enable::readPass_Thru_0_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getPass_Thru_0_Second_Irq_Enable(s);
}

inline void tSTC::tSecond_Irq_A_Enable::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Personal::tAI_Personal()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Personal::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Personal::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Personal::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Personal::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_Personal::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Personal::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_AIFREQ_Polarity(tAI_AIFREQ_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_AIFREQ_Polarity tSTC::tAI_Personal::getAI_AIFREQ_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_AIFREQ_Polarity)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAI_Personal::writeAI_AIFREQ_Polarity(tAI_AIFREQ_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_AIFREQ_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_AIFREQ_Polarity tSTC::tAI_Personal::readAI_AIFREQ_Polarity(nMDBG::tStatus2* s)
{
	return getAI_AIFREQ_Polarity(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_LOCALMUX_CLK_Pulse_Width(tAI_LOCALMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_LOCALMUX_CLK_Pulse_Width tSTC::tAI_Personal::getAI_LOCALMUX_CLK_Pulse_Width(nMDBG::tStatus2*) const
{
	return (tAI_LOCALMUX_CLK_Pulse_Width)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAI_Personal::writeAI_LOCALMUX_CLK_Pulse_Width(tAI_LOCALMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	setAI_LOCALMUX_CLK_Pulse_Width(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_LOCALMUX_CLK_Pulse_Width tSTC::tAI_Personal::readAI_LOCALMUX_CLK_Pulse_Width(nMDBG::tStatus2* s)
{
	return getAI_LOCALMUX_CLK_Pulse_Width(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_EXTMUX_CLK_Pulse_Width(tAI_EXTMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_EXTMUX_CLK_Pulse_Width tSTC::tAI_Personal::getAI_EXTMUX_CLK_Pulse_Width(nMDBG::tStatus2*) const
{
	return (tAI_EXTMUX_CLK_Pulse_Width)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAI_Personal::writeAI_EXTMUX_CLK_Pulse_Width(tAI_EXTMUX_CLK_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	setAI_EXTMUX_CLK_Pulse_Width(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_EXTMUX_CLK_Pulse_Width tSTC::tAI_Personal::readAI_EXTMUX_CLK_Pulse_Width(nMDBG::tStatus2* s)
{
	return getAI_EXTMUX_CLK_Pulse_Width(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_Overrun_Mode(tAI_Overrun_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_Overrun_Mode tSTC::tAI_Personal::getAI_Overrun_Mode(nMDBG::tStatus2*) const
{
	return (tAI_Overrun_Mode)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAI_Personal::writeAI_Overrun_Mode(tAI_Overrun_Mode fieldValue, nMDBG::tStatus2* s)
{
	setAI_Overrun_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_Overrun_Mode tSTC::tAI_Personal::readAI_Overrun_Mode(nMDBG::tStatus2* s)
{
	return getAI_Overrun_Mode(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_FIFO_Flags_Polarity(tAI_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_FIFO_Flags_Polarity tSTC::tAI_Personal::getAI_FIFO_Flags_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_FIFO_Flags_Polarity)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAI_Personal::writeAI_FIFO_Flags_Polarity(tAI_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_FIFO_Flags_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_FIFO_Flags_Polarity tSTC::tAI_Personal::readAI_FIFO_Flags_Polarity(nMDBG::tStatus2* s)
{
	return getAI_FIFO_Flags_Polarity(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_CONVERT_Original_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Personal::getAI_CONVERT_Original_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAI_Personal::writeAI_CONVERT_Original_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_CONVERT_Original_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Personal::readAI_CONVERT_Original_Pulse(nMDBG::tStatus2* s)
{
	return getAI_CONVERT_Original_Pulse(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_CONVERT_Pulse_Width(tAI_CONVERT_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_CONVERT_Pulse_Width tSTC::tAI_Personal::getAI_CONVERT_Pulse_Width(nMDBG::tStatus2*) const
{
	return (tAI_CONVERT_Pulse_Width)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAI_Personal::writeAI_CONVERT_Pulse_Width(tAI_CONVERT_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	setAI_CONVERT_Pulse_Width(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_CONVERT_Pulse_Width tSTC::tAI_Personal::readAI_CONVERT_Pulse_Width(nMDBG::tStatus2* s)
{
	return getAI_CONVERT_Pulse_Width(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_CONVERT_Pulse_Timebase(tAI_CONVERT_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_CONVERT_Pulse_Timebase tSTC::tAI_Personal::getAI_CONVERT_Pulse_Timebase(nMDBG::tStatus2*) const
{
	return (tAI_CONVERT_Pulse_Timebase)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAI_Personal::writeAI_CONVERT_Pulse_Timebase(tAI_CONVERT_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
	setAI_CONVERT_Pulse_Timebase(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_CONVERT_Pulse_Timebase tSTC::tAI_Personal::readAI_CONVERT_Pulse_Timebase(nMDBG::tStatus2* s)
{
	return getAI_CONVERT_Pulse_Timebase(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_SHIFTIN_Polarity(tAI_SHIFTIN_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_SHIFTIN_Polarity tSTC::tAI_Personal::getAI_SHIFTIN_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_SHIFTIN_Polarity)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAI_Personal::writeAI_SHIFTIN_Polarity(tAI_SHIFTIN_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_SHIFTIN_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_SHIFTIN_Polarity tSTC::tAI_Personal::readAI_SHIFTIN_Polarity(nMDBG::tStatus2* s)
{
	return getAI_SHIFTIN_Polarity(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_SOC_Polarity(tAI_SOC_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_SOC_Polarity tSTC::tAI_Personal::getAI_SOC_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_SOC_Polarity)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAI_Personal::writeAI_SOC_Polarity(tAI_SOC_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_SOC_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_SOC_Polarity tSTC::tAI_Personal::readAI_SOC_Polarity(nMDBG::tStatus2* s)
{
	return getAI_SOC_Polarity(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_EOC_Polarity(tAI_EOC_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_EOC_Polarity tSTC::tAI_Personal::getAI_EOC_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_EOC_Polarity)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAI_Personal::writeAI_EOC_Polarity(tAI_EOC_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_EOC_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_EOC_Polarity tSTC::tAI_Personal::readAI_EOC_Polarity(nMDBG::tStatus2* s)
{
	return getAI_EOC_Polarity(s);
}

inline tSTC::tAI_Personal& tSTC::tAI_Personal::setAI_SHIFTIN_Pulse_Width(tAI_SHIFTIN_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Personal::tAI_SHIFTIN_Pulse_Width tSTC::tAI_Personal::getAI_SHIFTIN_Pulse_Width(nMDBG::tStatus2*) const
{
	return (tAI_SHIFTIN_Pulse_Width)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAI_Personal::writeAI_SHIFTIN_Pulse_Width(tAI_SHIFTIN_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	setAI_SHIFTIN_Pulse_Width(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Personal::tAI_SHIFTIN_Pulse_Width tSTC::tAI_Personal::readAI_SHIFTIN_Pulse_Width(nMDBG::tStatus2* s)
{
	return getAI_SHIFTIN_Pulse_Width(s);
}

inline void tSTC::tAI_Personal::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Mode_1::tAI_Mode_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Mode_1::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Mode_1::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Mode_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Mode_1::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_Mode_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Mode_1::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setAI_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Mode_1::getAI_Trigger_Once(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAI_Mode_1::writeAI_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Trigger_Once(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Mode_1::readAI_Trigger_Once(nMDBG::tStatus2* s)
{
	return getAI_Trigger_Once(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setAI_Continuous(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Mode_1::getAI_Continuous(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAI_Mode_1::writeAI_Continuous(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Continuous(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Mode_1::readAI_Continuous(nMDBG::tStatus2* s)
{
	return getAI_Continuous(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setReserved_One(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_1::getReserved_One(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAI_Mode_1::writeReserved_One(u16 fieldValue, nMDBG::tStatus2* s)
{
	setReserved_One(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_1::readReserved_One(nMDBG::tStatus2* s)
{
	return getReserved_One(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setAI_Start_Stop(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Mode_1::getAI_Start_Stop(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAI_Mode_1::writeAI_Start_Stop(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Start_Stop(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Mode_1::readAI_Start_Stop(nMDBG::tStatus2* s)
{
	return getAI_Start_Stop(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setAI_SI_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_1::getAI_SI_Source_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAI_Mode_1::writeAI_SI_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Source_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_1::readAI_SI_Source_Polarity(nMDBG::tStatus2* s)
{
	return getAI_SI_Source_Polarity(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setAI_CONVERT_Source_Polarity(tAI_CONVERT_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_1::tAI_CONVERT_Source_Polarity tSTC::tAI_Mode_1::getAI_CONVERT_Source_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_CONVERT_Source_Polarity)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAI_Mode_1::writeAI_CONVERT_Source_Polarity(tAI_CONVERT_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_CONVERT_Source_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_1::tAI_CONVERT_Source_Polarity tSTC::tAI_Mode_1::readAI_CONVERT_Source_Polarity(nMDBG::tStatus2* s)
{
	return getAI_CONVERT_Source_Polarity(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setAI_SI_Source_Select(tAI_SI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf83f) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_1::tAI_SI_Source_Select tSTC::tAI_Mode_1::getAI_SI_Source_Select(nMDBG::tStatus2*) const
{
	return (tAI_SI_Source_Select)((_softCopy & ~0xf83f) >> 0x6);
}

inline void tSTC::tAI_Mode_1::writeAI_SI_Source_Select(tAI_SI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Source_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_1::tAI_SI_Source_Select tSTC::tAI_Mode_1::readAI_SI_Source_Select(nMDBG::tStatus2* s)
{
	return getAI_SI_Source_Select(s);
}

inline tSTC::tAI_Mode_1& tSTC::tAI_Mode_1::setAI_CONVERT_Source_Select(tAI_CONVERT_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_1::tAI_CONVERT_Source_Select tSTC::tAI_Mode_1::getAI_CONVERT_Source_Select(nMDBG::tStatus2*) const
{
	return (tAI_CONVERT_Source_Select)((_softCopy & ~0x7ff) >> 0xb);
}

inline void tSTC::tAI_Mode_1::writeAI_CONVERT_Source_Select(tAI_CONVERT_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_CONVERT_Source_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_1::tAI_CONVERT_Source_Select tSTC::tAI_Mode_1::readAI_CONVERT_Source_Select(nMDBG::tStatus2* s)
{
	return getAI_CONVERT_Source_Select(s);
}

inline void tSTC::tAI_Mode_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Mode_2::tAI_Mode_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Mode_2::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Mode_2::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Mode_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Mode_2::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_Mode_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Mode_2::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_2::getAI_SC_Write_Switch(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAI_Mode_2::writeAI_SC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Write_Switch(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_2::readAI_SC_Write_Switch(nMDBG::tStatus2* s)
{
	return getAI_SC_Write_Switch(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SC_Reload_Mode(tAI_SC_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_2::tAI_SC_Reload_Mode tSTC::tAI_Mode_2::getAI_SC_Reload_Mode(nMDBG::tStatus2*) const
{
	return (tAI_SC_Reload_Mode)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAI_Mode_2::writeAI_SC_Reload_Mode(tAI_SC_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Reload_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_2::tAI_SC_Reload_Mode tSTC::tAI_Mode_2::readAI_SC_Reload_Mode(nMDBG::tStatus2* s)
{
	return getAI_SC_Reload_Mode(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SC_Initial_Load_Source(tAI_SC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_2::tAI_SC_Initial_Load_Source tSTC::tAI_Mode_2::getAI_SC_Initial_Load_Source(nMDBG::tStatus2*) const
{
	return (tAI_SC_Initial_Load_Source)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAI_Mode_2::writeAI_SC_Initial_Load_Source(tAI_SC_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Initial_Load_Source(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_2::tAI_SC_Initial_Load_Source tSTC::tAI_Mode_2::readAI_SC_Initial_Load_Source(nMDBG::tStatus2* s)
{
	return getAI_SC_Initial_Load_Source(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_2::getAI_SI_Write_Switch(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAI_Mode_2::writeAI_SI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Write_Switch(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_2::readAI_SI_Write_Switch(nMDBG::tStatus2* s)
{
	return getAI_SI_Write_Switch(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SI_Reload_Mode(tAI_SI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff8f) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_2::tAI_SI_Reload_Mode tSTC::tAI_Mode_2::getAI_SI_Reload_Mode(nMDBG::tStatus2*) const
{
	return (tAI_SI_Reload_Mode)((_softCopy & ~0xff8f) >> 0x4);
}

inline void tSTC::tAI_Mode_2::writeAI_SI_Reload_Mode(tAI_SI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Reload_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_2::tAI_SI_Reload_Mode tSTC::tAI_Mode_2::readAI_SI_Reload_Mode(nMDBG::tStatus2* s)
{
	return getAI_SI_Reload_Mode(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SI_Initial_Load_Source(tAI_SI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_2::tAI_SI_Initial_Load_Source tSTC::tAI_Mode_2::getAI_SI_Initial_Load_Source(nMDBG::tStatus2*) const
{
	return (tAI_SI_Initial_Load_Source)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAI_Mode_2::writeAI_SI_Initial_Load_Source(tAI_SI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Initial_Load_Source(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_2::tAI_SI_Initial_Load_Source tSTC::tAI_Mode_2::readAI_SI_Initial_Load_Source(nMDBG::tStatus2* s)
{
	return getAI_SI_Initial_Load_Source(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SI2_Reload_Mode(tAI_SI2_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_2::tAI_SI2_Reload_Mode tSTC::tAI_Mode_2::getAI_SI2_Reload_Mode(nMDBG::tStatus2*) const
{
	return (tAI_SI2_Reload_Mode)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAI_Mode_2::writeAI_SI2_Reload_Mode(tAI_SI2_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI2_Reload_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_2::tAI_SI2_Reload_Mode tSTC::tAI_Mode_2::readAI_SI2_Reload_Mode(nMDBG::tStatus2* s)
{
	return getAI_SI2_Reload_Mode(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SI2_Initial_Load_Source(tAI_SI2_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_2::tAI_SI2_Initial_Load_Source tSTC::tAI_Mode_2::getAI_SI2_Initial_Load_Source(nMDBG::tStatus2*) const
{
	return (tAI_SI2_Initial_Load_Source)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAI_Mode_2::writeAI_SI2_Initial_Load_Source(tAI_SI2_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI2_Initial_Load_Source(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_2::tAI_SI2_Initial_Load_Source tSTC::tAI_Mode_2::readAI_SI2_Initial_Load_Source(nMDBG::tStatus2* s)
{
	return getAI_SI2_Initial_Load_Source(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_External_MUX_Present(tAI_External_MUX_Present fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_2::tAI_External_MUX_Present tSTC::tAI_Mode_2::getAI_External_MUX_Present(nMDBG::tStatus2*) const
{
	return (tAI_External_MUX_Present)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAI_Mode_2::writeAI_External_MUX_Present(tAI_External_MUX_Present fieldValue, nMDBG::tStatus2* s)
{
	setAI_External_MUX_Present(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_2::tAI_External_MUX_Present tSTC::tAI_Mode_2::readAI_External_MUX_Present(nMDBG::tStatus2* s)
{
	return getAI_External_MUX_Present(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_Pre_Trigger(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Mode_2::getAI_Pre_Trigger(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAI_Mode_2::writeAI_Pre_Trigger(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Pre_Trigger(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Mode_2::readAI_Pre_Trigger(nMDBG::tStatus2* s)
{
	return getAI_Pre_Trigger(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_Start_Stop_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Mode_2::getAI_Start_Stop_Gate_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAI_Mode_2::writeAI_Start_Stop_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Start_Stop_Gate_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Mode_2::readAI_Start_Stop_Gate_Enable(nMDBG::tStatus2* s)
{
	return getAI_Start_Stop_Gate_Enable(s);
}

inline tSTC::tAI_Mode_2& tSTC::tAI_Mode_2::setAI_SC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Mode_2::getAI_SC_Gate_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAI_Mode_2::writeAI_SC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_Gate_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Mode_2::readAI_SC_Gate_Enable(nMDBG::tStatus2* s)
{
	return getAI_SC_Gate_Enable(s);
}

inline void tSTC::tAI_Mode_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Output_Control::tAI_Output_Control()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Output_Control::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Output_Control::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Output_Control& tSTC::tAI_Output_Control::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Output_Control::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Output_Control::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_Output_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Output_Control::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Output_Control& tSTC::tAI_Output_Control::setAI_CONVERT_Output_Select(tAI_CONVERT_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffc) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Output_Control::tAI_CONVERT_Output_Select tSTC::tAI_Output_Control::getAI_CONVERT_Output_Select(nMDBG::tStatus2*) const
{
	return (tAI_CONVERT_Output_Select)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tSTC::tAI_Output_Control::writeAI_CONVERT_Output_Select(tAI_CONVERT_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_CONVERT_Output_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Output_Control::tAI_CONVERT_Output_Select tSTC::tAI_Output_Control::readAI_CONVERT_Output_Select(nMDBG::tStatus2* s)
{
	return getAI_CONVERT_Output_Select(s);
}

inline tSTC::tAI_Output_Control& tSTC::tAI_Output_Control::setAI_SC_TC_Output_Select(tAI_SC_TC_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff3) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Output_Control::tAI_SC_TC_Output_Select tSTC::tAI_Output_Control::getAI_SC_TC_Output_Select(nMDBG::tStatus2*) const
{
	return (tAI_SC_TC_Output_Select)((_softCopy & ~0xfff3) >> 0x2);
}

inline void tSTC::tAI_Output_Control::writeAI_SC_TC_Output_Select(tAI_SC_TC_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_SC_TC_Output_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Output_Control::tAI_SC_TC_Output_Select tSTC::tAI_Output_Control::readAI_SC_TC_Output_Select(nMDBG::tStatus2* s)
{
	return getAI_SC_TC_Output_Select(s);
}

inline tSTC::tAI_Output_Control& tSTC::tAI_Output_Control::setAI_LOCALMUX_CLK_Output_Select(tAI_LOCALMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffcf) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Output_Control::tAI_LOCALMUX_CLK_Output_Select tSTC::tAI_Output_Control::getAI_LOCALMUX_CLK_Output_Select(nMDBG::tStatus2*) const
{
	return (tAI_LOCALMUX_CLK_Output_Select)((_softCopy & ~0xffcf) >> 0x4);
}

inline void tSTC::tAI_Output_Control::writeAI_LOCALMUX_CLK_Output_Select(tAI_LOCALMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_LOCALMUX_CLK_Output_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Output_Control::tAI_LOCALMUX_CLK_Output_Select tSTC::tAI_Output_Control::readAI_LOCALMUX_CLK_Output_Select(nMDBG::tStatus2* s)
{
	return getAI_LOCALMUX_CLK_Output_Select(s);
}

inline tSTC::tAI_Output_Control& tSTC::tAI_Output_Control::setAI_EXTMUX_CLK_Output_Select(tAI_EXTMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff3f) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Output_Control::tAI_EXTMUX_CLK_Output_Select tSTC::tAI_Output_Control::getAI_EXTMUX_CLK_Output_Select(nMDBG::tStatus2*) const
{
	return (tAI_EXTMUX_CLK_Output_Select)((_softCopy & ~0xff3f) >> 0x6);
}

inline void tSTC::tAI_Output_Control::writeAI_EXTMUX_CLK_Output_Select(tAI_EXTMUX_CLK_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_EXTMUX_CLK_Output_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Output_Control::tAI_EXTMUX_CLK_Output_Select tSTC::tAI_Output_Control::readAI_EXTMUX_CLK_Output_Select(nMDBG::tStatus2* s)
{
	return getAI_EXTMUX_CLK_Output_Select(s);
}

inline tSTC::tAI_Output_Control& tSTC::tAI_Output_Control::setAI_SCAN_IN_PROG_Output_Select(tAI_SCAN_IN_PROG_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfcff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Output_Control::tAI_SCAN_IN_PROG_Output_Select tSTC::tAI_Output_Control::getAI_SCAN_IN_PROG_Output_Select(nMDBG::tStatus2*) const
{
	return (tAI_SCAN_IN_PROG_Output_Select)((_softCopy & ~0xfcff) >> 0x8);
}

inline void tSTC::tAI_Output_Control::writeAI_SCAN_IN_PROG_Output_Select(tAI_SCAN_IN_PROG_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_SCAN_IN_PROG_Output_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Output_Control::tAI_SCAN_IN_PROG_Output_Select tSTC::tAI_Output_Control::readAI_SCAN_IN_PROG_Output_Select(nMDBG::tStatus2* s)
{
	return getAI_SCAN_IN_PROG_Output_Select(s);
}

inline tSTC::tAI_Output_Control& tSTC::tAI_Output_Control::setAI_START_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Output_Control::getAI_START_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAI_Output_Control::writeAI_START_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Output_Control::readAI_START_Output_Select(nMDBG::tStatus2* s)
{
	return getAI_START_Output_Select(s);
}

inline void tSTC::tAI_Output_Control::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Mode_3::tAI_Mode_3()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Mode_3::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Mode_3::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Mode_3::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_Mode_3::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Mode_3::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_External_Gate_Select(tAI_External_Gate_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_3::tAI_External_Gate_Select tSTC::tAI_Mode_3::getAI_External_Gate_Select(nMDBG::tStatus2*) const
{
	return (tAI_External_Gate_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tSTC::tAI_Mode_3::writeAI_External_Gate_Select(tAI_External_Gate_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_External_Gate_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_3::tAI_External_Gate_Select tSTC::tAI_Mode_3::readAI_External_Gate_Select(nMDBG::tStatus2* s)
{
	return getAI_External_Gate_Select(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getAI_External_Gate_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAI_Mode_3::writeAI_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_External_Gate_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_3::readAI_External_Gate_Polarity(nMDBG::tStatus2* s)
{
	return getAI_External_Gate_Polarity(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_FIFO_Mode(tAI_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff3f) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_3::tAI_FIFO_Mode tSTC::tAI_Mode_3::getAI_FIFO_Mode(nMDBG::tStatus2*) const
{
	return (tAI_FIFO_Mode)((_softCopy & ~0xff3f) >> 0x6);
}

inline void tSTC::tAI_Mode_3::writeAI_FIFO_Mode(tAI_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
	setAI_FIFO_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_3::tAI_FIFO_Mode tSTC::tAI_Mode_3::readAI_FIFO_Mode(nMDBG::tStatus2* s)
{
	return getAI_FIFO_Mode(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_External_Gate_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getAI_External_Gate_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAI_Mode_3::writeAI_External_Gate_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_External_Gate_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_3::readAI_External_Gate_Mode(nMDBG::tStatus2* s)
{
	return getAI_External_Gate_Mode(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_Delayed_START1(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getAI_Delayed_START1(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAI_Mode_3::writeAI_Delayed_START1(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Delayed_START1(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_3::readAI_Delayed_START1(nMDBG::tStatus2* s)
{
	return getAI_Delayed_START1(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_Delayed_START2(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getAI_Delayed_START2(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAI_Mode_3::writeAI_Delayed_START2(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Delayed_START2(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_3::readAI_Delayed_START2(nMDBG::tStatus2* s)
{
	return getAI_Delayed_START2(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_SI2_Source_Select(tAI_SI2_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Mode_3::tAI_SI2_Source_Select tSTC::tAI_Mode_3::getAI_SI2_Source_Select(nMDBG::tStatus2*) const
{
	return (tAI_SI2_Source_Select)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAI_Mode_3::writeAI_SI2_Source_Select(tAI_SI2_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI2_Source_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Mode_3::tAI_SI2_Source_Select tSTC::tAI_Mode_3::readAI_SI2_Source_Select(nMDBG::tStatus2* s)
{
	return getAI_SI2_Source_Select(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_SI_Special_Trigger_Delay(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Mode_3::getAI_SI_Special_Trigger_Delay(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAI_Mode_3::writeAI_SI_Special_Trigger_Delay(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_SI_Special_Trigger_Delay(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Mode_3::readAI_SI_Special_Trigger_Delay(nMDBG::tStatus2* s)
{
	return getAI_SI_Special_Trigger_Delay(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getAI_Software_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAI_Mode_3::writeAI_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Software_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_3::readAI_Software_Gate(nMDBG::tStatus2* s)
{
	return getAI_Software_Gate(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_Delay_START(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getAI_Delay_START(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAI_Mode_3::writeAI_Delay_START(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Delay_START(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_3::readAI_Delay_START(nMDBG::tStatus2* s)
{
	return getAI_Delay_START(s);
}

inline tSTC::tAI_Mode_3& tSTC::tAI_Mode_3::setAI_Trigger_Length(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Mode_3::getAI_Trigger_Length(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAI_Mode_3::writeAI_Trigger_Length(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Trigger_Length(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_Mode_3::readAI_Trigger_Length(nMDBG::tStatus2* s)
{
	return getAI_Trigger_Length(s);
}

inline void tSTC::tAI_Mode_3::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_START_STOP_Select::tAI_START_STOP_Select()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_START_STOP_Select::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_START_STOP_Select::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_START_STOP_Select::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_START_STOP_Select::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_START_STOP_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_START_STOP_Select::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_START_Select(tAI_START_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_START_STOP_Select::tAI_START_Select tSTC::tAI_START_STOP_Select::getAI_START_Select(nMDBG::tStatus2*) const
{
	return (tAI_START_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_START_Select(tAI_START_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_START_STOP_Select::tAI_START_Select tSTC::tAI_START_STOP_Select::readAI_START_Select(nMDBG::tStatus2* s)
{
	return getAI_START_Select(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_START_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_START_STOP_Select::getAI_START_Edge(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_START_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Edge(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_START_STOP_Select::readAI_START_Edge(nMDBG::tStatus2* s)
{
	return getAI_START_Edge(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_START_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_START_STOP_Select::getAI_START_Sync(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_START_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Sync(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_START_STOP_Select::readAI_START_Sync(nMDBG::tStatus2* s)
{
	return getAI_START_Sync(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_STOP_Select(tAI_STOP_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf07f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_START_STOP_Select::tAI_STOP_Select tSTC::tAI_START_STOP_Select::getAI_STOP_Select(nMDBG::tStatus2*) const
{
	return (tAI_STOP_Select)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_STOP_Select(tAI_STOP_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_START_STOP_Select::tAI_STOP_Select tSTC::tAI_START_STOP_Select::readAI_STOP_Select(nMDBG::tStatus2* s)
{
	return getAI_STOP_Select(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_STOP_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_START_STOP_Select::getAI_STOP_Edge(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_STOP_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Edge(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_START_STOP_Select::readAI_STOP_Edge(nMDBG::tStatus2* s)
{
	return getAI_STOP_Edge(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_STOP_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_START_STOP_Select::getAI_STOP_Sync(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_STOP_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Sync(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_START_STOP_Select::readAI_STOP_Sync(nMDBG::tStatus2* s)
{
	return getAI_STOP_Sync(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_STOP_Polarity(tAI_STOP_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_START_STOP_Select::tAI_STOP_Polarity tSTC::tAI_START_STOP_Select::getAI_STOP_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_STOP_Polarity)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_STOP_Polarity(tAI_STOP_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_STOP_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_START_STOP_Select::tAI_STOP_Polarity tSTC::tAI_START_STOP_Select::readAI_STOP_Polarity(nMDBG::tStatus2* s)
{
	return getAI_STOP_Polarity(s);
}

inline tSTC::tAI_START_STOP_Select& tSTC::tAI_START_STOP_Select::setAI_START_Polarity(tAI_START_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_START_STOP_Select::tAI_START_Polarity tSTC::tAI_START_STOP_Select::getAI_START_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_START_Polarity)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAI_START_STOP_Select::writeAI_START_Polarity(tAI_START_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_START_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_START_STOP_Select::tAI_START_Polarity tSTC::tAI_START_STOP_Select::readAI_START_Polarity(nMDBG::tStatus2* s)
{
	return getAI_START_Polarity(s);
}

inline void tSTC::tAI_START_STOP_Select::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Trigger_Select::tAI_Trigger_Select()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Trigger_Select::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_Trigger_Select::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Trigger_Select::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Trigger_Select::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_Trigger_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_Trigger_Select::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START1_Select(tAI_START1_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Trigger_Select::tAI_START1_Select tSTC::tAI_Trigger_Select::getAI_START1_Select(nMDBG::tStatus2*) const
{
	return (tAI_START1_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START1_Select(tAI_START1_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Trigger_Select::tAI_START1_Select tSTC::tAI_Trigger_Select::readAI_START1_Select(nMDBG::tStatus2* s)
{
	return getAI_START1_Select(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Trigger_Select::getAI_START1_Edge(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Edge(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Trigger_Select::readAI_START1_Edge(nMDBG::tStatus2* s)
{
	return getAI_START1_Edge(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Trigger_Select::getAI_START1_Sync(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Sync(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Trigger_Select::readAI_START1_Sync(nMDBG::tStatus2* s)
{
	return getAI_START1_Sync(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START2_Select(tAI_START2_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf07f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Trigger_Select::tAI_START2_Select tSTC::tAI_Trigger_Select::getAI_START2_Select(nMDBG::tStatus2*) const
{
	return (tAI_START2_Select)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START2_Select(tAI_START2_Select fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Trigger_Select::tAI_START2_Select tSTC::tAI_Trigger_Select::readAI_START2_Select(nMDBG::tStatus2* s)
{
	return getAI_START2_Select(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START2_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Trigger_Select::getAI_START2_Edge(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START2_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Edge(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Trigger_Select::readAI_START2_Edge(nMDBG::tStatus2* s)
{
	return getAI_START2_Edge(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START2_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Trigger_Select::getAI_START2_Sync(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START2_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Sync(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAI_Trigger_Select::readAI_START2_Sync(nMDBG::tStatus2* s)
{
	return getAI_START2_Sync(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START2_Polarity(tAI_START2_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Trigger_Select::tAI_START2_Polarity tSTC::tAI_Trigger_Select::getAI_START2_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_START2_Polarity)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START2_Polarity(tAI_START2_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_START2_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Trigger_Select::tAI_START2_Polarity tSTC::tAI_Trigger_Select::readAI_START2_Polarity(nMDBG::tStatus2* s)
{
	return getAI_START2_Polarity(s);
}

inline tSTC::tAI_Trigger_Select& tSTC::tAI_Trigger_Select::setAI_START1_Polarity(tAI_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Trigger_Select::tAI_START1_Polarity tSTC::tAI_Trigger_Select::getAI_START1_Polarity(nMDBG::tStatus2*) const
{
	return (tAI_START1_Polarity)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAI_Trigger_Select::writeAI_START1_Polarity(tAI_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAI_START1_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAI_Trigger_Select::tAI_START1_Polarity tSTC::tAI_Trigger_Select::readAI_START1_Polarity(nMDBG::tStatus2* s)
{
	return getAI_START1_Polarity(s);
}

inline void tSTC::tAI_Trigger_Select::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SI_Load_A::tAI_SI_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SI_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_SI_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_SI_Load_A& tSTC::tAI_SI_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAI_SI_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SI_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAI_SI_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAI_SI_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_SI_Load_A& tSTC::tAI_SI_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAI_SI_Load_A::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAI_SI_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAI_SI_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAI_SI_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SI_Load_B::tAI_SI_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SI_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_SI_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_SI_Load_B& tSTC::tAI_SI_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAI_SI_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SI_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAI_SI_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAI_SI_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_SI_Load_B& tSTC::tAI_SI_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAI_SI_Load_B::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAI_SI_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAI_SI_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAI_SI_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SI2_Load_A::tAI_SI2_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SI2_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_SI2_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_SI2_Load_A& tSTC::tAI_SI2_Load_A::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_SI2_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SI2_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_SI2_Load_A::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_SI2_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_SI2_Load_A& tSTC::tAI_SI2_Load_A::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_SI2_Load_A::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tSTC::tAI_SI2_Load_A::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_SI2_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAI_SI2_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SI2_Load_B::tAI_SI2_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SI2_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_SI2_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_SI2_Load_B& tSTC::tAI_SI2_Load_B::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_SI2_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SI2_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_SI2_Load_B::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_SI2_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_SI2_Load_B& tSTC::tAI_SI2_Load_B::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_SI2_Load_B::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tSTC::tAI_SI2_Load_B::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_SI2_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAI_SI2_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SC_Load_A::tAI_SC_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SC_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_SC_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_SC_Load_A& tSTC::tAI_SC_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAI_SC_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SC_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAI_SC_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAI_SC_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_SC_Load_A& tSTC::tAI_SC_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAI_SC_Load_A::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAI_SC_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAI_SC_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAI_SC_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SC_Load_B::tAI_SC_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SC_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_SC_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_SC_Load_B& tSTC::tAI_SC_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAI_SC_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SC_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAI_SC_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAI_SC_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_SC_Load_B& tSTC::tAI_SC_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAI_SC_Load_B::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAI_SC_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAI_SC_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAI_SC_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_DIV_Load_A::tAI_DIV_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_DIV_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAI_DIV_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAI_DIV_Load_A& tSTC::tAI_DIV_Load_A::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_DIV_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_DIV_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAI_DIV_Load_A::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAI_DIV_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAI_DIV_Load_A& tSTC::tAI_DIV_Load_A::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_DIV_Load_A::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tSTC::tAI_DIV_Load_A::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAI_DIV_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAI_DIV_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Personal::tAO_Personal()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Personal::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Personal::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Personal::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Personal::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_Personal::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Personal::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_UPDATE2_Pulse_Width(tAO_UPDATE2_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_UPDATE2_Pulse_Width tSTC::tAO_Personal::getAO_UPDATE2_Pulse_Width(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE2_Pulse_Width)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAO_Personal::writeAO_UPDATE2_Pulse_Width(tAO_UPDATE2_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE2_Pulse_Width(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_UPDATE2_Pulse_Width tSTC::tAO_Personal::readAO_UPDATE2_Pulse_Width(nMDBG::tStatus2* s)
{
	return getAO_UPDATE2_Pulse_Width(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_UPDATE2_Pulse_Timebase(tAO_UPDATE2_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_UPDATE2_Pulse_Timebase tSTC::tAO_Personal::getAO_UPDATE2_Pulse_Timebase(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE2_Pulse_Timebase)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAO_Personal::writeAO_UPDATE2_Pulse_Timebase(tAO_UPDATE2_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE2_Pulse_Timebase(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_UPDATE2_Pulse_Timebase tSTC::tAO_Personal::readAO_UPDATE2_Pulse_Timebase(nMDBG::tStatus2* s)
{
	return getAO_UPDATE2_Pulse_Timebase(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_UPDATE2_Original_Pulse(tAO_UPDATE2_Original_Pulse fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_UPDATE2_Original_Pulse tSTC::tAO_Personal::getAO_UPDATE2_Original_Pulse(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE2_Original_Pulse)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAO_Personal::writeAO_UPDATE2_Original_Pulse(tAO_UPDATE2_Original_Pulse fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE2_Original_Pulse(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_UPDATE2_Original_Pulse tSTC::tAO_Personal::readAO_UPDATE2_Original_Pulse(nMDBG::tStatus2* s)
{
	return getAO_UPDATE2_Original_Pulse(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_Interval_Buffer_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Personal::getAO_Interval_Buffer_Mode(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAO_Personal::writeAO_Interval_Buffer_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Interval_Buffer_Mode(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Personal::readAO_Interval_Buffer_Mode(nMDBG::tStatus2* s)
{
	return getAO_Interval_Buffer_Mode(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_BC_Source_Select(tAO_BC_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_BC_Source_Select tSTC::tAO_Personal::getAO_BC_Source_Select(nMDBG::tStatus2*) const
{
	return (tAO_BC_Source_Select)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAO_Personal::writeAO_BC_Source_Select(tAO_BC_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Source_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_BC_Source_Select tSTC::tAO_Personal::readAO_BC_Source_Select(nMDBG::tStatus2* s)
{
	return getAO_BC_Source_Select(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_UPDATE_Pulse_Width(tAO_UPDATE_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_UPDATE_Pulse_Width tSTC::tAO_Personal::getAO_UPDATE_Pulse_Width(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE_Pulse_Width)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAO_Personal::writeAO_UPDATE_Pulse_Width(tAO_UPDATE_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Pulse_Width(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_UPDATE_Pulse_Width tSTC::tAO_Personal::readAO_UPDATE_Pulse_Width(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Pulse_Width(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_UPDATE_Pulse_Timebase(tAO_UPDATE_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_UPDATE_Pulse_Timebase tSTC::tAO_Personal::getAO_UPDATE_Pulse_Timebase(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE_Pulse_Timebase)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAO_Personal::writeAO_UPDATE_Pulse_Timebase(tAO_UPDATE_Pulse_Timebase fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Pulse_Timebase(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_UPDATE_Pulse_Timebase tSTC::tAO_Personal::readAO_UPDATE_Pulse_Timebase(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Pulse_Timebase(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_UPDATE_Original_Pulse(tAO_UPDATE_Original_Pulse fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_UPDATE_Original_Pulse tSTC::tAO_Personal::getAO_UPDATE_Original_Pulse(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE_Original_Pulse)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAO_Personal::writeAO_UPDATE_Original_Pulse(tAO_UPDATE_Original_Pulse fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Original_Pulse(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_UPDATE_Original_Pulse tSTC::tAO_Personal::readAO_UPDATE_Original_Pulse(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Original_Pulse(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_DMA_PIO_Control(tAO_DMA_PIO_Control fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_DMA_PIO_Control tSTC::tAO_Personal::getAO_DMA_PIO_Control(nMDBG::tStatus2*) const
{
	return (tAO_DMA_PIO_Control)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAO_Personal::writeAO_DMA_PIO_Control(tAO_DMA_PIO_Control fieldValue, nMDBG::tStatus2* s)
{
	setAO_DMA_PIO_Control(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_DMA_PIO_Control tSTC::tAO_Personal::readAO_DMA_PIO_Control(nMDBG::tStatus2* s)
{
	return getAO_DMA_PIO_Control(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_AOFREQ_Polarity(tAO_AOFREQ_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_AOFREQ_Polarity tSTC::tAO_Personal::getAO_AOFREQ_Polarity(nMDBG::tStatus2*) const
{
	return (tAO_AOFREQ_Polarity)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAO_Personal::writeAO_AOFREQ_Polarity(tAO_AOFREQ_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAO_AOFREQ_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_AOFREQ_Polarity tSTC::tAO_Personal::readAO_AOFREQ_Polarity(nMDBG::tStatus2* s)
{
	return getAO_AOFREQ_Polarity(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_FIFO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Personal::getAO_FIFO_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAO_Personal::writeAO_FIFO_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_FIFO_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Personal::readAO_FIFO_Enable(nMDBG::tStatus2* s)
{
	return getAO_FIFO_Enable(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_FIFO_Flags_Polarity(tAO_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_FIFO_Flags_Polarity tSTC::tAO_Personal::getAO_FIFO_Flags_Polarity(nMDBG::tStatus2*) const
{
	return (tAO_FIFO_Flags_Polarity)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAO_Personal::writeAO_FIFO_Flags_Polarity(tAO_FIFO_Flags_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAO_FIFO_Flags_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_FIFO_Flags_Polarity tSTC::tAO_Personal::readAO_FIFO_Flags_Polarity(nMDBG::tStatus2* s)
{
	return getAO_FIFO_Flags_Polarity(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_TMRDACWR_Pulse_Width(tAO_TMRDACWR_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_TMRDACWR_Pulse_Width tSTC::tAO_Personal::getAO_TMRDACWR_Pulse_Width(nMDBG::tStatus2*) const
{
	return (tAO_TMRDACWR_Pulse_Width)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAO_Personal::writeAO_TMRDACWR_Pulse_Width(tAO_TMRDACWR_Pulse_Width fieldValue, nMDBG::tStatus2* s)
{
	setAO_TMRDACWR_Pulse_Width(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_TMRDACWR_Pulse_Width tSTC::tAO_Personal::readAO_TMRDACWR_Pulse_Width(nMDBG::tStatus2* s)
{
	return getAO_TMRDACWR_Pulse_Width(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_Fast_CPU(tAO_Fast_CPU fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_Fast_CPU tSTC::tAO_Personal::getAO_Fast_CPU(nMDBG::tStatus2*) const
{
	return (tAO_Fast_CPU)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAO_Personal::writeAO_Fast_CPU(tAO_Fast_CPU fieldValue, nMDBG::tStatus2* s)
{
	setAO_Fast_CPU(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_Fast_CPU tSTC::tAO_Personal::readAO_Fast_CPU(nMDBG::tStatus2* s)
{
	return getAO_Fast_CPU(s);
}

inline tSTC::tAO_Personal& tSTC::tAO_Personal::setAO_Number_Of_DAC_Packages(tAO_Number_Of_DAC_Packages fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Personal::tAO_Number_Of_DAC_Packages tSTC::tAO_Personal::getAO_Number_Of_DAC_Packages(nMDBG::tStatus2*) const
{
	return (tAO_Number_Of_DAC_Packages)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAO_Personal::writeAO_Number_Of_DAC_Packages(tAO_Number_Of_DAC_Packages fieldValue, nMDBG::tStatus2* s)
{
	setAO_Number_Of_DAC_Packages(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Personal::tAO_Number_Of_DAC_Packages tSTC::tAO_Personal::readAO_Number_Of_DAC_Packages(nMDBG::tStatus2* s)
{
	return getAO_Number_Of_DAC_Packages(s);
}

inline void tSTC::tAO_Personal::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Command_1::tAO_Command_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Command_1::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Command_1::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Command_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Command_1::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff101e);
}

inline void tSTC::tAO_Command_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Command_1::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_UPDATE_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_UPDATE_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAO_Command_1::writeAO_UPDATE_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_UPDATE_Pulse(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Pulse(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_LDAC0_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_LDAC0_Source_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAO_Command_1::writeAO_LDAC0_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_LDAC0_Source_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_LDAC0_Source_Select(nMDBG::tStatus2* s)
{
	return getAO_LDAC0_Source_Select(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_DAC0_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Command_1::getAO_DAC0_Update_Mode(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAO_Command_1::writeAO_DAC0_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_DAC0_Update_Mode(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Command_1::readAO_DAC0_Update_Mode(nMDBG::tStatus2* s)
{
	return getAO_DAC0_Update_Mode(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_LDAC1_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_LDAC1_Source_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAO_Command_1::writeAO_LDAC1_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_LDAC1_Source_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_LDAC1_Source_Select(nMDBG::tStatus2* s)
{
	return getAO_LDAC1_Source_Select(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_DAC1_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Command_1::getAO_DAC1_Update_Mode(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAO_Command_1::writeAO_DAC1_Update_Mode(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_DAC1_Update_Mode(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Command_1::readAO_DAC1_Update_Mode(nMDBG::tStatus2* s)
{
	return getAO_DAC1_Update_Mode(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_BC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_BC_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAO_Command_1::writeAO_BC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_BC_Load(nMDBG::tStatus2* s)
{
	return getAO_BC_Load(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_BC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_BC_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAO_Command_1::writeAO_BC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_BC_Arm(nMDBG::tStatus2* s)
{
	return getAO_BC_Arm(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_UC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_UC_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAO_Command_1::writeAO_UC_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_UC_Load(nMDBG::tStatus2* s)
{
	return getAO_UC_Load(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_UC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_UC_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAO_Command_1::writeAO_UC_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_UC_Arm(nMDBG::tStatus2* s)
{
	return getAO_UC_Arm(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_UI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_UI_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAO_Command_1::writeAO_UI_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_UI_Load(nMDBG::tStatus2* s)
{
	return getAO_UI_Load(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_UI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_UI_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAO_Command_1::writeAO_UI_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_UI_Arm(nMDBG::tStatus2* s)
{
	return getAO_UI_Arm(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_UI2_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_UI2_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAO_Command_1::writeAO_UI2_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_UI2_Load(nMDBG::tStatus2* s)
{
	return getAO_UI2_Load(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_UI2_Arm_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_UI2_Arm_Disarm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAO_Command_1::writeAO_UI2_Arm_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Arm_Disarm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_UI2_Arm_Disarm(nMDBG::tStatus2* s)
{
	return getAO_UI2_Arm_Disarm(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_Disarm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAO_Command_1::writeAO_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Disarm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_Disarm(nMDBG::tStatus2* s)
{
	return getAO_Disarm(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_START_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAO_Command_1::writeAO_START_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_START_Pulse(nMDBG::tStatus2* s)
{
	return getAO_START_Pulse(s);
}

inline tSTC::tAO_Command_1& tSTC::tAO_Command_1::setAO_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_1::getAO_Analog_Trigger_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAO_Command_1::writeAO_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Analog_Trigger_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_1::readAO_Analog_Trigger_Reset(nMDBG::tStatus2* s)
{
	return getAO_Analog_Trigger_Reset(s);
}

inline void tSTC::tAO_Command_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Command_2::tAO_Command_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Command_2::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Command_2::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Command_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Command_2::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff3c0c);
}

inline void tSTC::tAO_Command_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Command_2::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_START1_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAO_Command_2::writeAO_START1_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_START1_Pulse(nMDBG::tStatus2* s)
{
	return getAO_START1_Pulse(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_UPDATE2_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_UPDATE2_Pulse(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAO_Command_2::writeAO_UPDATE2_Pulse(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE2_Pulse(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_UPDATE2_Pulse(nMDBG::tStatus2* s)
{
	return getAO_UPDATE2_Pulse(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_Mute_A(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_Mute_A(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAO_Command_2::writeAO_Mute_A(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Mute_A(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_Mute_A(nMDBG::tStatus2* s)
{
	return getAO_Mute_A(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_Mute_B(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_Mute_B(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAO_Command_2::writeAO_Mute_B(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Mute_B(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_Mute_B(nMDBG::tStatus2* s)
{
	return getAO_Mute_B(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_BC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_BC_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAO_Command_2::writeAO_BC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Switch_Load_On_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_BC_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
	return getAO_BC_Switch_Load_On_TC(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_UC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_UC_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAO_Command_2::writeAO_UC_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Switch_Load_On_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_UC_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
	return getAO_UC_Switch_Load_On_TC(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_UC_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_UC_Switch_Load_On_BC_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAO_Command_2::writeAO_UC_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Switch_Load_On_BC_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_UC_Switch_Load_On_BC_TC(nMDBG::tStatus2* s)
{
	return getAO_UC_Switch_Load_On_BC_TC(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_UI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_UI_Switch_Load_On_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAO_Command_2::writeAO_UI_Switch_Load_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Switch_Load_On_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_UI_Switch_Load_On_TC(nMDBG::tStatus2* s)
{
	return getAO_UI_Switch_Load_On_TC(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_UI_Switch_Load_On_Stop(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_UI_Switch_Load_On_Stop(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAO_Command_2::writeAO_UI_Switch_Load_On_Stop(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Switch_Load_On_Stop(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_UI_Switch_Load_On_Stop(nMDBG::tStatus2* s)
{
	return getAO_UI_Switch_Load_On_Stop(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_UI_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_UI_Switch_Load_On_BC_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAO_Command_2::writeAO_UI_Switch_Load_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Switch_Load_On_BC_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_UI_Switch_Load_On_BC_TC(nMDBG::tStatus2* s)
{
	return getAO_UI_Switch_Load_On_BC_TC(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_BC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_BC_Save_Trace(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAO_Command_2::writeAO_BC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Save_Trace(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_BC_Save_Trace(nMDBG::tStatus2* s)
{
	return getAO_BC_Save_Trace(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_BC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Command_2::getAO_BC_Gate_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAO_Command_2::writeAO_BC_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Gate_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Command_2::readAO_BC_Gate_Enable(nMDBG::tStatus2* s)
{
	return getAO_BC_Gate_Enable(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_UC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_UC_Save_Trace(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAO_Command_2::writeAO_UC_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Save_Trace(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_UC_Save_Trace(nMDBG::tStatus2* s)
{
	return getAO_UC_Save_Trace(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_Start_Stop_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_Start_Stop_Gate_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAO_Command_2::writeAO_Start_Stop_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Start_Stop_Gate_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_Start_Stop_Gate_Enable(nMDBG::tStatus2* s)
{
	return getAO_Start_Stop_Gate_Enable(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_End_On_UC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_End_On_UC_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAO_Command_2::writeAO_End_On_UC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_End_On_UC_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_End_On_UC_TC(nMDBG::tStatus2* s)
{
	return getAO_End_On_UC_TC(s);
}

inline tSTC::tAO_Command_2& tSTC::tAO_Command_2::setAO_End_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Command_2::getAO_End_On_BC_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAO_Command_2::writeAO_End_On_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_End_On_BC_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Command_2::readAO_End_On_BC_TC(nMDBG::tStatus2* s)
{
	return getAO_End_On_BC_TC(s);
}

inline void tSTC::tAO_Command_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tInterrupt_B_Ack::tInterrupt_B_Ack()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tInterrupt_B_Ack::registerMap(void)
{
	return _STC;
}

inline void tSTC::tInterrupt_B_Ack::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tInterrupt_B_Ack::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0000);
}

inline void tSTC::tInterrupt_B_Ack::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tInterrupt_B_Ack::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getG1_Gate_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tInterrupt_B_Ack::writeG1_Gate_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readG1_Gate_Error_Confirm(nMDBG::tStatus2* s)
{
	return getG1_Gate_Error_Confirm(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getG1_TC_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tInterrupt_B_Ack::writeG1_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_TC_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readG1_TC_Error_Confirm(nMDBG::tStatus2* s)
{
	return getG1_TC_Error_Confirm(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_BC_TC_Trigger_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_BC_TC_Trigger_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_BC_TC_Trigger_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_TC_Trigger_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_BC_TC_Trigger_Error_Confirm(nMDBG::tStatus2* s)
{
	return getAO_BC_TC_Trigger_Error_Confirm(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_BC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_BC_TC_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_BC_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_TC_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_BC_TC_Error_Confirm(nMDBG::tStatus2* s)
{
	return getAO_BC_TC_Error_Confirm(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_UI2_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_UI2_TC_Error_Confirm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_UI2_TC_Error_Confirm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_TC_Error_Confirm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_UI2_TC_Error_Confirm(nMDBG::tStatus2* s)
{
	return getAO_UI2_TC_Error_Confirm(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_UI2_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_UI2_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_UI2_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_TC_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_UI2_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_UI2_TC_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_UC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_UC_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_UC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_TC_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_UC_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_UC_TC_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_BC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_BC_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_BC_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_TC_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_BC_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_BC_TC_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_START1_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_START1_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_START1_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_START1_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_UPDATE_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_UPDATE_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_UPDATE_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_UPDATE_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_START_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_START_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_START_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_START_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_STOP_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_STOP_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_STOP_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_STOP_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_STOP_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setAO_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getAO_Error_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tInterrupt_B_Ack::writeAO_Error_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Error_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readAO_Error_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getAO_Error_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getG1_TC_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tInterrupt_B_Ack::writeG1_TC_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_TC_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readG1_TC_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getG1_TC_Interrupt_Ack(s);
}

inline tSTC::tInterrupt_B_Ack& tSTC::tInterrupt_B_Ack::setG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_B_Ack::getG1_Gate_Interrupt_Ack(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tInterrupt_B_Ack::writeG1_Gate_Interrupt_Ack(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_Interrupt_Ack(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_B_Ack::readG1_Gate_Interrupt_Ack(nMDBG::tStatus2* s)
{
	return getG1_Gate_Interrupt_Ack(s);
}

inline void tSTC::tInterrupt_B_Ack::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tInterrupt_B_Enable::tInterrupt_B_Enable()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tInterrupt_B_Enable::registerMap(void)
{
	return _STC;
}

inline void tSTC::tInterrupt_B_Enable::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tInterrupt_B_Enable::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tInterrupt_B_Enable::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tInterrupt_B_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tInterrupt_B_Enable::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_BC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_BC_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_BC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_TC_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_BC_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_BC_TC_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_START1_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_START1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_START1_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_START1_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_UPDATE_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_UPDATE_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_UPDATE_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_UPDATE_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_START_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_START_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_START_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_START_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_START_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_STOP_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_STOP_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_STOP_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_STOP_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_STOP_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_Error_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_Error_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Error_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_Error_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_Error_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_UC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_UC_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_UC_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_TC_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_UC_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_UC_TC_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_UI2_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_UI2_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_UI2_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_TC_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_UI2_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_UI2_TC_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setAO_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getAO_FIFO_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tInterrupt_B_Enable::writeAO_FIFO_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_FIFO_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readAO_FIFO_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getAO_FIFO_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setG1_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getG1_TC_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tInterrupt_B_Enable::writeG1_TC_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setG1_TC_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readG1_TC_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getG1_TC_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setG1_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getG1_Gate_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tInterrupt_B_Enable::writeG1_Gate_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readG1_Gate_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getG1_Gate_Interrupt_Enable(s);
}

inline tSTC::tInterrupt_B_Enable& tSTC::tInterrupt_B_Enable::setPass_Thru_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_B_Enable::getPass_Thru_1_Interrupt_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tInterrupt_B_Enable::writePass_Thru_1_Interrupt_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setPass_Thru_1_Interrupt_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_B_Enable::readPass_Thru_1_Interrupt_Enable(nMDBG::tStatus2* s)
{
	return getPass_Thru_1_Interrupt_Enable(s);
}

inline void tSTC::tInterrupt_B_Enable::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tSecond_Irq_B_Enable::tSecond_Irq_B_Enable()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tSecond_Irq_B_Enable::registerMap(void)
{
	return _STC;
}

inline void tSTC::tSecond_Irq_B_Enable::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tSecond_Irq_B_Enable::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tSecond_Irq_B_Enable::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tSecond_Irq_B_Enable::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_BC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_BC_TC_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_BC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_TC_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_BC_TC_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_BC_TC_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_START1_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_START1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_START1_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_START1_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_UPDATE_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_UPDATE_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_UPDATE_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_UPDATE_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_START_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_START_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_START_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_START_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_STOP_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_STOP_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_STOP_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_STOP_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_STOP_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_Error_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_Error_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Error_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_Error_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_Error_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_UC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_UC_TC_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_UC_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_TC_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_UC_TC_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_UC_TC_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_UI2_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_UI2_TC_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_UI2_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_TC_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_UI2_TC_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_UI2_TC_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setAO_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getAO_FIFO_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tSecond_Irq_B_Enable::writeAO_FIFO_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_FIFO_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readAO_FIFO_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getAO_FIFO_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setG1_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getG1_TC_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tSecond_Irq_B_Enable::writeG1_TC_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_TC_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readG1_TC_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getG1_TC_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setG1_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getG1_Gate_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tSecond_Irq_B_Enable::writeG1_Gate_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readG1_Gate_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getG1_Gate_Second_Irq_Enable(s);
}

inline tSTC::tSecond_Irq_B_Enable& tSTC::tSecond_Irq_B_Enable::setPass_Thru_1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tSecond_Irq_B_Enable::getPass_Thru_1_Second_Irq_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tSecond_Irq_B_Enable::writePass_Thru_1_Second_Irq_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setPass_Thru_1_Second_Irq_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tSecond_Irq_B_Enable::readPass_Thru_1_Second_Irq_Enable(nMDBG::tStatus2* s)
{
	return getPass_Thru_1_Second_Irq_Enable(s);
}

inline void tSTC::tSecond_Irq_B_Enable::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Mode_1::tAO_Mode_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Mode_1::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Mode_1::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Mode_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Mode_1::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_Mode_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Mode_1::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Mode_1::getAO_Trigger_Once(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAO_Mode_1::writeAO_Trigger_Once(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Trigger_Once(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Mode_1::readAO_Trigger_Once(nMDBG::tStatus2* s)
{
	return getAO_Trigger_Once(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_Continuous(tAO_Continuous fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_1::tAO_Continuous tSTC::tAO_Mode_1::getAO_Continuous(nMDBG::tStatus2*) const
{
	return (tAO_Continuous)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAO_Mode_1::writeAO_Continuous(tAO_Continuous fieldValue, nMDBG::tStatus2* s)
{
	setAO_Continuous(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_1::tAO_Continuous tSTC::tAO_Mode_1::readAO_Continuous(nMDBG::tStatus2* s)
{
	return getAO_Continuous(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_UC_Switch_Load_Every_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_1::getAO_UC_Switch_Load_Every_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAO_Mode_1::writeAO_UC_Switch_Load_Every_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Switch_Load_Every_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_1::readAO_UC_Switch_Load_Every_TC(nMDBG::tStatus2* s)
{
	return getAO_UC_Switch_Load_Every_TC(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_UI_Source_Polarity(tAO_UI_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_1::tAO_UI_Source_Polarity tSTC::tAO_Mode_1::getAO_UI_Source_Polarity(nMDBG::tStatus2*) const
{
	return (tAO_UI_Source_Polarity)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAO_Mode_1::writeAO_UI_Source_Polarity(tAO_UI_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Source_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_1::tAO_UI_Source_Polarity tSTC::tAO_Mode_1::readAO_UI_Source_Polarity(nMDBG::tStatus2* s)
{
	return getAO_UI_Source_Polarity(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_UPDATE_Source_Polarity(tAO_UPDATE_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_1::tAO_UPDATE_Source_Polarity tSTC::tAO_Mode_1::getAO_UPDATE_Source_Polarity(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE_Source_Polarity)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAO_Mode_1::writeAO_UPDATE_Source_Polarity(tAO_UPDATE_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Source_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_1::tAO_UPDATE_Source_Polarity tSTC::tAO_Mode_1::readAO_UPDATE_Source_Polarity(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Source_Polarity(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_Multiple_Channels(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Mode_1::getAO_Multiple_Channels(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAO_Mode_1::writeAO_Multiple_Channels(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Multiple_Channels(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Mode_1::readAO_Multiple_Channels(nMDBG::tStatus2* s)
{
	return getAO_Multiple_Channels(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_UI_Source_Select(tAO_UI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf83f) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_1::tAO_UI_Source_Select tSTC::tAO_Mode_1::getAO_UI_Source_Select(nMDBG::tStatus2*) const
{
	return (tAO_UI_Source_Select)((_softCopy & ~0xf83f) >> 0x6);
}

inline void tSTC::tAO_Mode_1::writeAO_UI_Source_Select(tAO_UI_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Source_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_1::tAO_UI_Source_Select tSTC::tAO_Mode_1::readAO_UI_Source_Select(nMDBG::tStatus2* s)
{
	return getAO_UI_Source_Select(s);
}

inline tSTC::tAO_Mode_1& tSTC::tAO_Mode_1::setAO_UPDATE_Source_Select(tAO_UPDATE_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_1::tAO_UPDATE_Source_Select tSTC::tAO_Mode_1::getAO_UPDATE_Source_Select(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE_Source_Select)((_softCopy & ~0x7ff) >> 0xb);
}

inline void tSTC::tAO_Mode_1::writeAO_UPDATE_Source_Select(tAO_UPDATE_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Source_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_1::tAO_UPDATE_Source_Select tSTC::tAO_Mode_1::readAO_UPDATE_Source_Select(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Source_Select(s);
}

inline void tSTC::tAO_Mode_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Mode_2::tAO_Mode_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Mode_2::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Mode_2::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Mode_2::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_Mode_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Mode_2::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_BC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_BC_Write_Switch(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tAO_Mode_2::writeAO_BC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Write_Switch(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_BC_Write_Switch(nMDBG::tStatus2* s)
{
	return getAO_BC_Write_Switch(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_BC_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_BC_Reload_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAO_Mode_2::writeAO_BC_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Reload_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_BC_Reload_Mode(nMDBG::tStatus2* s)
{
	return getAO_BC_Reload_Mode(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_BC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_BC_Initial_Load_Source(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAO_Mode_2::writeAO_BC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_BC_Initial_Load_Source(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_BC_Initial_Load_Source(nMDBG::tStatus2* s)
{
	return getAO_BC_Initial_Load_Source(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_UI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_UI_Write_Switch(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAO_Mode_2::writeAO_UI_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Write_Switch(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_UI_Write_Switch(nMDBG::tStatus2* s)
{
	return getAO_UI_Write_Switch(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_UI_Reload_Mode(tAO_UI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff8f) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_2::tAO_UI_Reload_Mode tSTC::tAO_Mode_2::getAO_UI_Reload_Mode(nMDBG::tStatus2*) const
{
	return (tAO_UI_Reload_Mode)((_softCopy & ~0xff8f) >> 0x4);
}

inline void tSTC::tAO_Mode_2::writeAO_UI_Reload_Mode(tAO_UI_Reload_Mode fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Reload_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_2::tAO_UI_Reload_Mode tSTC::tAO_Mode_2::readAO_UI_Reload_Mode(nMDBG::tStatus2* s)
{
	return getAO_UI_Reload_Mode(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_UI_Initial_Load_Source(tAO_UI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_2::tAO_UI_Initial_Load_Source tSTC::tAO_Mode_2::getAO_UI_Initial_Load_Source(nMDBG::tStatus2*) const
{
	return (tAO_UI_Initial_Load_Source)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAO_Mode_2::writeAO_UI_Initial_Load_Source(tAO_UI_Initial_Load_Source fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI_Initial_Load_Source(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_2::tAO_UI_Initial_Load_Source tSTC::tAO_Mode_2::readAO_UI_Initial_Load_Source(nMDBG::tStatus2* s)
{
	return getAO_UI_Initial_Load_Source(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_UI2_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_UI2_Reload_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tAO_Mode_2::writeAO_UI2_Reload_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Reload_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_UI2_Reload_Mode(nMDBG::tStatus2* s)
{
	return getAO_UI2_Reload_Mode(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_UI2_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_UI2_Initial_Load_Source(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tAO_Mode_2::writeAO_UI2_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Initial_Load_Source(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_UI2_Initial_Load_Source(nMDBG::tStatus2* s)
{
	return getAO_UI2_Initial_Load_Source(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_UC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_UC_Write_Switch(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tAO_Mode_2::writeAO_UC_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Write_Switch(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_UC_Write_Switch(nMDBG::tStatus2* s)
{
	return getAO_UC_Write_Switch(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_UC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_UC_Initial_Load_Source(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAO_Mode_2::writeAO_UC_Initial_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Initial_Load_Source(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_UC_Initial_Load_Source(nMDBG::tStatus2* s)
{
	return getAO_UC_Initial_Load_Source(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_2::getAO_START1_Disable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAO_Mode_2::writeAO_START1_Disable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Disable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_2::readAO_START1_Disable(nMDBG::tStatus2* s)
{
	return getAO_START1_Disable(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_FIFO_Retransmit_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Mode_2::getAO_FIFO_Retransmit_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAO_Mode_2::writeAO_FIFO_Retransmit_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_FIFO_Retransmit_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Mode_2::readAO_FIFO_Retransmit_Enable(nMDBG::tStatus2* s)
{
	return getAO_FIFO_Retransmit_Enable(s);
}

inline tSTC::tAO_Mode_2& tSTC::tAO_Mode_2::setAO_FIFO_Mode(tAO_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x3fff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_2::tAO_FIFO_Mode tSTC::tAO_Mode_2::getAO_FIFO_Mode(nMDBG::tStatus2*) const
{
	return (tAO_FIFO_Mode)((_softCopy & ~0x3fff) >> 0xe);
}

inline void tSTC::tAO_Mode_2::writeAO_FIFO_Mode(tAO_FIFO_Mode fieldValue, nMDBG::tStatus2* s)
{
	setAO_FIFO_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_2::tAO_FIFO_Mode tSTC::tAO_Mode_2::readAO_FIFO_Mode(nMDBG::tStatus2* s)
{
	return getAO_FIFO_Mode(s);
}

inline void tSTC::tAO_Mode_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Output_Control::tAO_Output_Control()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Output_Control::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Output_Control::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Output_Control::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Output_Control::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_Output_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Output_Control::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setAO_UPDATE_Output_Select(tAO_UPDATE_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffc) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Output_Control::tAO_UPDATE_Output_Select tSTC::tAO_Output_Control::getAO_UPDATE_Output_Select(nMDBG::tStatus2*) const
{
	return (tAO_UPDATE_Output_Select)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tSTC::tAO_Output_Control::writeAO_UPDATE_Output_Select(tAO_UPDATE_Output_Select fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE_Output_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Output_Control::tAO_UPDATE_Output_Select tSTC::tAO_Output_Control::readAO_UPDATE_Output_Select(nMDBG::tStatus2* s)
{
	return getAO_UPDATE_Output_Select(s);
}

inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setAO_UPDATE2_Output_Toggle(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Output_Control::getAO_UPDATE2_Output_Toggle(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAO_Output_Control::writeAO_UPDATE2_Output_Toggle(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE2_Output_Toggle(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Output_Control::readAO_UPDATE2_Output_Toggle(nMDBG::tStatus2* s)
{
	return getAO_UPDATE2_Output_Toggle(s);
}

inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setAO_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Output_Control::getAO_External_Gate_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAO_Output_Control::writeAO_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_External_Gate_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Output_Control::readAO_External_Gate_Polarity(nMDBG::tStatus2* s)
{
	return getAO_External_Gate_Polarity(s);
}

inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setAO_UPDATE2_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffcf) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Output_Control::getAO_UPDATE2_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffcf) >> 0x4);
}

inline void tSTC::tAO_Output_Control::writeAO_UPDATE2_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UPDATE2_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Output_Control::readAO_UPDATE2_Output_Select(nMDBG::tStatus2* s)
{
	return getAO_UPDATE2_Output_Select(s);
}

inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setAO_Number_Of_Channels(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfc3f) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Output_Control::getAO_Number_Of_Channels(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfc3f) >> 0x6);
}

inline void tSTC::tAO_Output_Control::writeAO_Number_Of_Channels(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Number_Of_Channels(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Output_Control::readAO_Number_Of_Channels(nMDBG::tStatus2* s)
{
	return getAO_Number_Of_Channels(s);
}

inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setAO_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x83ff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Output_Control::getAO_External_Gate_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x83ff) >> 0xa);
}

inline void tSTC::tAO_Output_Control::writeAO_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_External_Gate_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Output_Control::readAO_External_Gate_Select(nMDBG::tStatus2* s)
{
	return getAO_External_Gate_Select(s);
}

inline tSTC::tAO_Output_Control& tSTC::tAO_Output_Control::setAO_External_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Output_Control::getAO_External_Gate_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAO_Output_Control::writeAO_External_Gate_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_External_Gate_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Output_Control::readAO_External_Gate_Enable(nMDBG::tStatus2* s)
{
	return getAO_External_Gate_Enable(s);
}

inline void tSTC::tAO_Output_Control::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Mode_3::tAO_Mode_3()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Mode_3::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Mode_3::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Mode_3::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Mode_3::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffdfff);
}

inline void tSTC::tAO_Mode_3::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Mode_3::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_3::getAO_Software_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tAO_Mode_3::writeAO_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Software_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_3::readAO_Software_Gate(nMDBG::tStatus2* s)
{
	return getAO_Software_Gate(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_Not_An_UPDATE(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_3::getAO_Not_An_UPDATE(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tAO_Mode_3::writeAO_Not_An_UPDATE(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Not_An_UPDATE(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_3::readAO_Not_An_UPDATE(nMDBG::tStatus2* s)
{
	return getAO_Not_An_UPDATE(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_Stop_On_BC_TC_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Mode_3::getAO_Stop_On_BC_TC_Error(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAO_Mode_3::writeAO_Stop_On_BC_TC_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Stop_On_BC_TC_Error(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Mode_3::readAO_Stop_On_BC_TC_Error(nMDBG::tStatus2* s)
{
	return getAO_Stop_On_BC_TC_Error(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_Stop_On_BC_TC_Trigger_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Mode_3::getAO_Stop_On_BC_TC_Trigger_Error(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAO_Mode_3::writeAO_Stop_On_BC_TC_Trigger_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Stop_On_BC_TC_Trigger_Error(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Mode_3::readAO_Stop_On_BC_TC_Trigger_Error(nMDBG::tStatus2* s)
{
	return getAO_Stop_On_BC_TC_Trigger_Error(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_Stop_On_Overrun_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Mode_3::getAO_Stop_On_Overrun_Error(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAO_Mode_3::writeAO_Stop_On_Overrun_Error(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Stop_On_Overrun_Error(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Mode_3::readAO_Stop_On_Overrun_Error(nMDBG::tStatus2* s)
{
	return getAO_Stop_On_Overrun_Error(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_Trigger_Length(tAO_Trigger_Length fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Mode_3::tAO_Trigger_Length tSTC::tAO_Mode_3::getAO_Trigger_Length(nMDBG::tStatus2*) const
{
	return (tAO_Trigger_Length)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tAO_Mode_3::writeAO_Trigger_Length(tAO_Trigger_Length fieldValue, nMDBG::tStatus2* s)
{
	setAO_Trigger_Length(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Mode_3::tAO_Trigger_Length tSTC::tAO_Mode_3::readAO_Trigger_Length(nMDBG::tStatus2* s)
{
	return getAO_Trigger_Length(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_UC_Switch_Load_Every_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_3::getAO_UC_Switch_Load_Every_BC_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAO_Mode_3::writeAO_UC_Switch_Load_Every_BC_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UC_Switch_Load_Every_BC_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_3::readAO_UC_Switch_Load_Every_BC_TC(nMDBG::tStatus2* s)
{
	return getAO_UC_Switch_Load_Every_BC_TC(s);
}

inline tSTC::tAO_Mode_3& tSTC::tAO_Mode_3::setAO_UI2_Switch_Load_Next_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Mode_3::getAO_UI2_Switch_Load_Next_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAO_Mode_3::writeAO_UI2_Switch_Load_Next_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Switch_Load_Next_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_Mode_3::readAO_UI2_Switch_Load_Next_TC(nMDBG::tStatus2* s)
{
	return getAO_UI2_Switch_Load_Next_TC(s);
}

inline void tSTC::tAO_Mode_3::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_START_Select::tAO_START_Select()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_START_Select::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_START_Select::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_START_Select::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_START_Select::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_START_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_START_Select::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_START_Select::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tSTC::tAO_START_Select::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_START_Select::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setAO_START_Edge(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_START_Select::getAO_START_Edge(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAO_START_Select::writeAO_START_Edge(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START_Edge(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_START_Select::readAO_START_Edge(nMDBG::tStatus2* s)
{
	return getAO_START_Edge(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setAO_START_Sync(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_START_Select::getAO_START_Sync(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAO_START_Select::writeAO_START_Sync(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START_Sync(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_START_Select::readAO_START_Sync(nMDBG::tStatus2* s)
{
	return getAO_START_Sync(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setAO_UI2_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf07f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_START_Select::getAO_UI2_External_Gate_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tSTC::tAO_START_Select::writeAO_UI2_External_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_External_Gate_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_START_Select::readAO_UI2_External_Gate_Select(nMDBG::tStatus2* s)
{
	return getAO_UI2_External_Gate_Select(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setAO_AOFREQ_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_START_Select::getAO_AOFREQ_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAO_START_Select::writeAO_AOFREQ_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_AOFREQ_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_START_Select::readAO_AOFREQ_Enable(nMDBG::tStatus2* s)
{
	return getAO_AOFREQ_Enable(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setAO_START_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_START_Select::getAO_START_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAO_START_Select::writeAO_START_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_START_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_START_Select::readAO_START_Polarity(nMDBG::tStatus2* s)
{
	return getAO_START_Polarity(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setAO_UI2_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_START_Select::getAO_UI2_External_Gate_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAO_START_Select::writeAO_UI2_External_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_External_Gate_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_START_Select::readAO_UI2_External_Gate_Polarity(nMDBG::tStatus2* s)
{
	return getAO_UI2_External_Gate_Polarity(s);
}

inline tSTC::tAO_START_Select& tSTC::tAO_START_Select::setAO_UI2_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_START_Select::getAO_UI2_Software_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAO_START_Select::writeAO_UI2_Software_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Software_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_START_Select::readAO_UI2_Software_Gate(nMDBG::tStatus2* s)
{
	return getAO_UI2_Software_Gate(s);
}

inline void tSTC::tAO_START_Select::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Trigger_Select::tAO_Trigger_Select()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Trigger_Select::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_Trigger_Select::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Trigger_Select::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Trigger_Select::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_Trigger_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_Trigger_Select::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_START1_Select(tAO_START1_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Trigger_Select::tAO_START1_Select tSTC::tAO_Trigger_Select::getAO_START1_Select(nMDBG::tStatus2*) const
{
	return (tAO_START1_Select)((_softCopy & ~0xffe0) >> 0x0);
}

inline void tSTC::tAO_Trigger_Select::writeAO_START1_Select(tAO_START1_Select fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Trigger_Select::tAO_START1_Select tSTC::tAO_Trigger_Select::readAO_START1_Select(nMDBG::tStatus2* s)
{
	return getAO_START1_Select(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Trigger_Select::getAO_START1_Edge(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAO_Trigger_Select::writeAO_START1_Edge(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Edge(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Trigger_Select::readAO_START1_Edge(nMDBG::tStatus2* s)
{
	return getAO_START1_Edge(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Trigger_Select::getAO_START1_Sync(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAO_Trigger_Select::writeAO_START1_Sync(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Sync(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Trigger_Select::readAO_START1_Sync(nMDBG::tStatus2* s)
{
	return getAO_START1_Sync(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_UI2_Source_Select(tAO_UI2_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf07f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Trigger_Select::tAO_UI2_Source_Select tSTC::tAO_Trigger_Select::getAO_UI2_Source_Select(nMDBG::tStatus2*) const
{
	return (tAO_UI2_Source_Select)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tSTC::tAO_Trigger_Select::writeAO_UI2_Source_Select(tAO_UI2_Source_Select fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Source_Select(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Trigger_Select::tAO_UI2_Source_Select tSTC::tAO_Trigger_Select::readAO_UI2_Source_Select(nMDBG::tStatus2* s)
{
	return getAO_UI2_Source_Select(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_UI2_Source_Polarity(tAO_UI2_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Trigger_Select::tAO_UI2_Source_Polarity tSTC::tAO_Trigger_Select::getAO_UI2_Source_Polarity(nMDBG::tStatus2*) const
{
	return (tAO_UI2_Source_Polarity)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tAO_Trigger_Select::writeAO_UI2_Source_Polarity(tAO_UI2_Source_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Source_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Trigger_Select::tAO_UI2_Source_Polarity tSTC::tAO_Trigger_Select::readAO_UI2_Source_Polarity(nMDBG::tStatus2* s)
{
	return getAO_UI2_Source_Polarity(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_START1_Polarity(tAO_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAO_Trigger_Select::tAO_START1_Polarity tSTC::tAO_Trigger_Select::getAO_START1_Polarity(nMDBG::tStatus2*) const
{
	return (tAO_START1_Polarity)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tAO_Trigger_Select::writeAO_START1_Polarity(tAO_START1_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setAO_START1_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tAO_Trigger_Select::tAO_START1_Polarity tSTC::tAO_Trigger_Select::readAO_START1_Polarity(nMDBG::tStatus2* s)
{
	return getAO_START1_Polarity(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Trigger_Select::getAO_Delayed_START1(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAO_Trigger_Select::writeAO_Delayed_START1(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Delayed_START1(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Trigger_Select::readAO_Delayed_START1(nMDBG::tStatus2* s)
{
	return getAO_Delayed_START1(s);
}

inline tSTC::tAO_Trigger_Select& tSTC::tAO_Trigger_Select::setAO_UI2_External_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAO_Trigger_Select::getAO_UI2_External_Gate_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAO_Trigger_Select::writeAO_UI2_External_Gate_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_External_Gate_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tAO_Trigger_Select::readAO_UI2_External_Gate_Enable(nMDBG::tStatus2* s)
{
	return getAO_UI2_External_Gate_Enable(s);
}

inline void tSTC::tAO_Trigger_Select::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UI_Load_A::tAO_UI_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UI_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_UI_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_UI_Load_A& tSTC::tAO_UI_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_UI_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UI_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAO_UI_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAO_UI_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_UI_Load_A& tSTC::tAO_UI_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_UI_Load_A::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAO_UI_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAO_UI_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_UI_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UI_Load_B::tAO_UI_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UI_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_UI_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_UI_Load_B& tSTC::tAO_UI_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_UI_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UI_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAO_UI_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAO_UI_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_UI_Load_B& tSTC::tAO_UI_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_UI_Load_B::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAO_UI_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAO_UI_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_UI_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UI2_Load_A::tAO_UI2_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UI2_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_UI2_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_UI2_Load_A& tSTC::tAO_UI2_Load_A::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_UI2_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UI2_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_UI2_Load_A::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_UI2_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_UI2_Load_A& tSTC::tAO_UI2_Load_A::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_UI2_Load_A::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tSTC::tAO_UI2_Load_A::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_UI2_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_UI2_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UI2_Load_B::tAO_UI2_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UI2_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_UI2_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_UI2_Load_B& tSTC::tAO_UI2_Load_B::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_UI2_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UI2_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAO_UI2_Load_B::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAO_UI2_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_UI2_Load_B& tSTC::tAO_UI2_Load_B::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_UI2_Load_B::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tSTC::tAO_UI2_Load_B::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAO_UI2_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_UI2_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_BC_Load_A::tAO_BC_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_BC_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_BC_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_BC_Load_A& tSTC::tAO_BC_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_BC_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_BC_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAO_BC_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAO_BC_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_BC_Load_A& tSTC::tAO_BC_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_BC_Load_A::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAO_BC_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAO_BC_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_BC_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_BC_Load_B::tAO_BC_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_BC_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_BC_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_BC_Load_B& tSTC::tAO_BC_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_BC_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_BC_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAO_BC_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAO_BC_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_BC_Load_B& tSTC::tAO_BC_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_BC_Load_B::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAO_BC_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAO_BC_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_BC_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UC_Load_A::tAO_UC_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UC_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_UC_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_UC_Load_A& tSTC::tAO_UC_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_UC_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UC_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAO_UC_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAO_UC_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_UC_Load_A& tSTC::tAO_UC_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_UC_Load_A::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAO_UC_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAO_UC_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_UC_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UC_Load_B::tAO_UC_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UC_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAO_UC_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAO_UC_Load_B& tSTC::tAO_UC_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_UC_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UC_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tAO_UC_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tAO_UC_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAO_UC_Load_B& tSTC::tAO_UC_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_UC_Load_B::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tAO_UC_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tAO_UC_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tAO_UC_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tDIO_Control::tDIO_Control()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tDIO_Control::registerMap(void)
{
	return _STC;
}

inline void tSTC::tDIO_Control::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tDIO_Control& tSTC::tDIO_Control::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tDIO_Control::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tDIO_Control::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xfffffeff);
}

inline void tSTC::tDIO_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tDIO_Control::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tDIO_Control& tSTC::tDIO_Control::setDIO_Pins_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff00) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Control::getDIO_Pins_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tSTC::tDIO_Control::writeDIO_Pins_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_Pins_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tDIO_Control::readDIO_Pins_Dir(nMDBG::tStatus2* s)
{
	return getDIO_Pins_Dir(s);
}

inline tSTC::tDIO_Control& tSTC::tDIO_Control::setDIO_HW_Serial_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Control::getDIO_HW_Serial_Start(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tDIO_Control::writeDIO_HW_Serial_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_HW_Serial_Start(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tDIO_Control::readDIO_HW_Serial_Start(nMDBG::tStatus2* s)
{
	return getDIO_HW_Serial_Start(s);
}

inline tSTC::tDIO_Control& tSTC::tDIO_Control::setDIO_HW_Serial_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Control::getDIO_HW_Serial_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tDIO_Control::writeDIO_HW_Serial_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_HW_Serial_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tDIO_Control::readDIO_HW_Serial_Enable(nMDBG::tStatus2* s)
{
	return getDIO_HW_Serial_Enable(s);
}

inline tSTC::tDIO_Control& tSTC::tDIO_Control::setDIO_HW_Serial_Timebase(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Control::getDIO_HW_Serial_Timebase(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tDIO_Control::writeDIO_HW_Serial_Timebase(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_HW_Serial_Timebase(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tDIO_Control::readDIO_HW_Serial_Timebase(nMDBG::tStatus2* s)
{
	return getDIO_HW_Serial_Timebase(s);
}

inline tSTC::tDIO_Control& tSTC::tDIO_Control::setDIO_Software_Serial_Control(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Control::getDIO_Software_Serial_Control(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tDIO_Control::writeDIO_Software_Serial_Control(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_Software_Serial_Control(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tDIO_Control::readDIO_Software_Serial_Control(nMDBG::tStatus2* s)
{
	return getDIO_Software_Serial_Control(s);
}

inline void tSTC::tDIO_Control::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tDIO_Output::tDIO_Output()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tDIO_Output::registerMap(void)
{
	return _STC;
}

inline void tSTC::tDIO_Output::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tDIO_Output& tSTC::tDIO_Output::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tDIO_Output::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tDIO_Output::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tDIO_Output::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tDIO_Output::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tDIO_Output& tSTC::tDIO_Output::setDIO_Parallel_Data_Out(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff00) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Output::getDIO_Parallel_Data_Out(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tSTC::tDIO_Output::writeDIO_Parallel_Data_Out(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_Parallel_Data_Out(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tDIO_Output::readDIO_Parallel_Data_Out(nMDBG::tStatus2* s)
{
	return getDIO_Parallel_Data_Out(s);
}

inline tSTC::tDIO_Output& tSTC::tDIO_Output::setDIO_Serial_Data_Out(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Output::getDIO_Serial_Data_Out(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff) >> 0x8);
}

inline void tSTC::tDIO_Output::writeDIO_Serial_Data_Out(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_Serial_Data_Out(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tDIO_Output::readDIO_Serial_Data_Out(nMDBG::tStatus2* s)
{
	return getDIO_Serial_Data_Out(s);
}

inline void tSTC::tDIO_Output::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_Mode::tG0_Mode()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_Mode::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG0_Mode::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG0_Mode::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_Mode::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tG0_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG0_Mode::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffc) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Gating_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tSTC::tG0_Mode::writeG0_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gating_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Gating_Mode(nMDBG::tStatus2* s)
{
	return getG0_Gating_Mode(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Gate_On_Both_Edges(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tG0_Mode::writeG0_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_On_Both_Edges(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Gate_On_Both_Edges(nMDBG::tStatus2* s)
{
	return getG0_Gate_On_Both_Edges(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffe7) >> 0x3);
}

inline void tSTC::tG0_Mode::writeG0_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Trigger_Mode_For_Edge_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* s)
{
	return getG0_Trigger_Mode_For_Edge_Gate(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff9f) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Stop_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tSTC::tG0_Mode::writeG0_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Stop_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Stop_Mode(nMDBG::tStatus2* s)
{
	return getG0_Stop_Mode(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Load_Source_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tG0_Mode::writeG0_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Load_Source_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Load_Source_Select(nMDBG::tStatus2* s)
{
	return getG0_Load_Source_Select(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Output_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfcff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Output_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfcff) >> 0x8);
}

inline void tSTC::tG0_Mode::writeG0_Output_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Output_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Output_Mode(nMDBG::tStatus2* s)
{
	return getG0_Output_Mode(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Counting_Once(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf3ff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Counting_Once(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf3ff) >> 0xa);
}

inline void tSTC::tG0_Mode::writeG0_Counting_Once(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Counting_Once(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Counting_Once(nMDBG::tStatus2* s)
{
	return getG0_Counting_Once(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Loading_On_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tG0_Mode::writeG0_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Loading_On_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Loading_On_TC(nMDBG::tStatus2* s)
{
	return getG0_Loading_On_TC(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Gate_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tG0_Mode::writeG0_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Gate_Polarity(nMDBG::tStatus2* s)
{
	return getG0_Gate_Polarity(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Loading_On_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tG0_Mode::writeG0_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Loading_On_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Loading_On_Gate(nMDBG::tStatus2* s)
{
	return getG0_Loading_On_Gate(s);
}

inline tSTC::tG0_Mode& tSTC::tG0_Mode::setG0_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Mode::getG0_Reload_Source_Switching(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tG0_Mode::writeG0_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Reload_Source_Switching(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Mode::readG0_Reload_Source_Switching(nMDBG::tStatus2* s)
{
	return getG0_Reload_Source_Switching(s);
}

inline void tSTC::tG0_Mode::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_Mode::tG1_Mode()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_Mode::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG1_Mode::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG1_Mode::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_Mode::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tG1_Mode::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG1_Mode::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffc) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Gating_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tSTC::tG1_Mode::writeG1_Gating_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gating_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Gating_Mode(nMDBG::tStatus2* s)
{
	return getG1_Gating_Mode(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Gate_On_Both_Edges(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tG1_Mode::writeG1_Gate_On_Both_Edges(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_On_Both_Edges(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Gate_On_Both_Edges(nMDBG::tStatus2* s)
{
	return getG1_Gate_On_Both_Edges(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffe7) >> 0x3);
}

inline void tSTC::tG1_Mode::writeG1_Trigger_Mode_For_Edge_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Trigger_Mode_For_Edge_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Trigger_Mode_For_Edge_Gate(nMDBG::tStatus2* s)
{
	return getG1_Trigger_Mode_For_Edge_Gate(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff9f) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Stop_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tSTC::tG1_Mode::writeG1_Stop_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Stop_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Stop_Mode(nMDBG::tStatus2* s)
{
	return getG1_Stop_Mode(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Load_Source_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tG1_Mode::writeG1_Load_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Load_Source_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Load_Source_Select(nMDBG::tStatus2* s)
{
	return getG1_Load_Source_Select(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Output_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfcff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Output_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfcff) >> 0x8);
}

inline void tSTC::tG1_Mode::writeG1_Output_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Output_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Output_Mode(nMDBG::tStatus2* s)
{
	return getG1_Output_Mode(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Counting_Once(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf3ff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Counting_Once(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf3ff) >> 0xa);
}

inline void tSTC::tG1_Mode::writeG1_Counting_Once(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Counting_Once(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Counting_Once(nMDBG::tStatus2* s)
{
	return getG1_Counting_Once(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Loading_On_TC(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tG1_Mode::writeG1_Loading_On_TC(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Loading_On_TC(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Loading_On_TC(nMDBG::tStatus2* s)
{
	return getG1_Loading_On_TC(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Gate_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tG1_Mode::writeG1_Gate_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Gate_Polarity(nMDBG::tStatus2* s)
{
	return getG1_Gate_Polarity(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Loading_On_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tG1_Mode::writeG1_Loading_On_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Loading_On_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Loading_On_Gate(nMDBG::tStatus2* s)
{
	return getG1_Loading_On_Gate(s);
}

inline tSTC::tG1_Mode& tSTC::tG1_Mode::setG1_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Mode::getG1_Reload_Source_Switching(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tG1_Mode::writeG1_Reload_Source_Switching(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Reload_Source_Switching(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Mode::readG1_Reload_Source_Switching(nMDBG::tStatus2* s)
{
	return getG1_Reload_Source_Switching(s);
}

inline void tSTC::tG1_Mode::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_Command::tG0_Command()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_Command::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG0_Command::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG0_Command::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_Command::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff5be2);
}

inline void tSTC::tG0_Command::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG0_Command::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tG0_Command::writeG0_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Arm(nMDBG::tStatus2* s)
{
	return getG0_Arm(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Save_Trace(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tG0_Command::writeG0_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Save_Trace(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Save_Trace(nMDBG::tStatus2* s)
{
	return getG0_Save_Trace(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tG0_Command::writeG0_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Load(nMDBG::tStatus2* s)
{
	return getG0_Load(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Analog_Trigger_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tG0_Command::writeG0_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Analog_Trigger_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Analog_Trigger_Reset(nMDBG::tStatus2* s)
{
	return getG0_Analog_Trigger_Reset(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Disarm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tG0_Command::writeG0_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Disarm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Disarm(nMDBG::tStatus2* s)
{
	return getG0_Disarm(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Up_Down(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff9f) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Up_Down(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tSTC::tG0_Command::writeG0_Up_Down(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Up_Down(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Up_Down(nMDBG::tStatus2* s)
{
	return getG0_Up_Down(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Write_Switch(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tG0_Command::writeG0_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Write_Switch(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Write_Switch(nMDBG::tStatus2* s)
{
	return getG0_Write_Switch(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Synchronized_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tG0_Command::writeG0_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Synchronized_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Synchronized_Gate(nMDBG::tStatus2* s)
{
	return getG0_Synchronized_Gate(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Little_Big_Endian(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tG0_Command::writeG0_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Little_Big_Endian(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Little_Big_Endian(nMDBG::tStatus2* s)
{
	return getG0_Little_Big_Endian(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Bank_Switch_Start(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tG0_Command::writeG0_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Bank_Switch_Start(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Bank_Switch_Start(nMDBG::tStatus2* s)
{
	return getG0_Bank_Switch_Start(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Bank_Switch_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tG0_Command::writeG0_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Bank_Switch_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Bank_Switch_Mode(nMDBG::tStatus2* s)
{
	return getG0_Bank_Switch_Mode(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG0_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG0_Bank_Switch_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tG0_Command::writeG0_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Bank_Switch_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG0_Bank_Switch_Enable(nMDBG::tStatus2* s)
{
	return getG0_Bank_Switch_Enable(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG1_Arm_Copy(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tG0_Command::writeG1_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Arm_Copy(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG1_Arm_Copy(nMDBG::tStatus2* s)
{
	return getG1_Arm_Copy(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG1_Save_Trace_Copy(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tG0_Command::writeG1_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Save_Trace_Copy(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG1_Save_Trace_Copy(nMDBG::tStatus2* s)
{
	return getG1_Save_Trace_Copy(s);
}

inline tSTC::tG0_Command& tSTC::tG0_Command::setG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Command::getG1_Disarm_Copy(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tG0_Command::writeG1_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Disarm_Copy(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Command::readG1_Disarm_Copy(nMDBG::tStatus2* s)
{
	return getG1_Disarm_Copy(s);
}

inline void tSTC::tG0_Command::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_Command::tG1_Command()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_Command::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG1_Command::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG1_Command::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_Command::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff5be2);
}

inline void tSTC::tG1_Command::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG1_Command::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Arm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tG1_Command::writeG1_Arm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Arm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Arm(nMDBG::tStatus2* s)
{
	return getG1_Arm(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Save_Trace(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tG1_Command::writeG1_Save_Trace(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Save_Trace(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Save_Trace(nMDBG::tStatus2* s)
{
	return getG1_Save_Trace(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Load(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tG1_Command::writeG1_Load(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Load(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Load(nMDBG::tStatus2* s)
{
	return getG1_Load(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Analog_Trigger_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tG1_Command::writeG1_Analog_Trigger_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Analog_Trigger_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Analog_Trigger_Reset(nMDBG::tStatus2* s)
{
	return getG1_Analog_Trigger_Reset(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Disarm(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tG1_Command::writeG1_Disarm(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Disarm(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Disarm(nMDBG::tStatus2* s)
{
	return getG1_Disarm(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Up_Down(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff9f) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Up_Down(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff9f) >> 0x5);
}

inline void tSTC::tG1_Command::writeG1_Up_Down(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Up_Down(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Up_Down(nMDBG::tStatus2* s)
{
	return getG1_Up_Down(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Write_Switch(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tG1_Command::writeG1_Write_Switch(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Write_Switch(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Write_Switch(nMDBG::tStatus2* s)
{
	return getG1_Write_Switch(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Synchronized_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tG1_Command::writeG1_Synchronized_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Synchronized_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Synchronized_Gate(nMDBG::tStatus2* s)
{
	return getG1_Synchronized_Gate(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Little_Big_Endian(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tG1_Command::writeG1_Little_Big_Endian(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Little_Big_Endian(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Little_Big_Endian(nMDBG::tStatus2* s)
{
	return getG1_Little_Big_Endian(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Bank_Switch_Start(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tG1_Command::writeG1_Bank_Switch_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Bank_Switch_Start(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Bank_Switch_Start(nMDBG::tStatus2* s)
{
	return getG1_Bank_Switch_Start(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Bank_Switch_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tG1_Command::writeG1_Bank_Switch_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Bank_Switch_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Bank_Switch_Mode(nMDBG::tStatus2* s)
{
	return getG1_Bank_Switch_Mode(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG1_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG1_Bank_Switch_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tG1_Command::writeG1_Bank_Switch_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Bank_Switch_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG1_Bank_Switch_Enable(nMDBG::tStatus2* s)
{
	return getG1_Bank_Switch_Enable(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG0_Arm_Copy(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tG1_Command::writeG0_Arm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Arm_Copy(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG0_Arm_Copy(nMDBG::tStatus2* s)
{
	return getG0_Arm_Copy(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG0_Save_Trace_Copy(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tG1_Command::writeG0_Save_Trace_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Save_Trace_Copy(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG0_Save_Trace_Copy(nMDBG::tStatus2* s)
{
	return getG0_Save_Trace_Copy(s);
}

inline tSTC::tG1_Command& tSTC::tG1_Command::setG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Command::getG0_Disarm_Copy(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tG1_Command::writeG0_Disarm_Copy(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Disarm_Copy(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Command::readG0_Disarm_Copy(nMDBG::tStatus2* s)
{
	return getG0_Disarm_Copy(s);
}

inline void tSTC::tG1_Command::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_Input_Select::tG0_Input_Select()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_Input_Select::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG0_Input_Select::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_Input_Select::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tG0_Input_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG0_Input_Select::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_Read_Acknowledges_Irq(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tG0_Input_Select::writeG0_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Read_Acknowledges_Irq(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_Read_Acknowledges_Irq(nMDBG::tStatus2* s)
{
	return getG0_Read_Acknowledges_Irq(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_Write_Acknowledges_Irq(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tG0_Input_Select::writeG0_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Write_Acknowledges_Irq(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_Write_Acknowledges_Irq(nMDBG::tStatus2* s)
{
	return getG0_Write_Acknowledges_Irq(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff83) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_Source_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff83) >> 0x2);
}

inline void tSTC::tG0_Input_Select::writeG0_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Source_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_Source_Select(nMDBG::tStatus2* s)
{
	return getG0_Source_Select(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf07f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_Gate_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tSTC::tG0_Input_Select::writeG0_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_Gate_Select(nMDBG::tStatus2* s)
{
	return getG0_Gate_Select(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_Gate_Select_Load_Source(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tG0_Input_Select::writeG0_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Gate_Select_Load_Source(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_Gate_Select_Load_Source(nMDBG::tStatus2* s)
{
	return getG0_Gate_Select_Load_Source(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_OR_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tG0_Input_Select::writeG0_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_OR_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_OR_Gate(nMDBG::tStatus2* s)
{
	return getG0_OR_Gate(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_Output_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tG0_Input_Select::writeG0_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Output_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_Output_Polarity(nMDBG::tStatus2* s)
{
	return getG0_Output_Polarity(s);
}

inline tSTC::tG0_Input_Select& tSTC::tG0_Input_Select::setG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Input_Select::getG0_Source_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tG0_Input_Select::writeG0_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Source_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Input_Select::readG0_Source_Polarity(nMDBG::tStatus2* s)
{
	return getG0_Source_Polarity(s);
}

inline void tSTC::tG0_Input_Select::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_Input_Select::tG1_Input_Select()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_Input_Select::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG1_Input_Select::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_Input_Select::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tG1_Input_Select::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG1_Input_Select::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_Read_Acknowledges_Irq(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tG1_Input_Select::writeG1_Read_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Read_Acknowledges_Irq(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_Read_Acknowledges_Irq(nMDBG::tStatus2* s)
{
	return getG1_Read_Acknowledges_Irq(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_Write_Acknowledges_Irq(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tG1_Input_Select::writeG1_Write_Acknowledges_Irq(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Write_Acknowledges_Irq(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_Write_Acknowledges_Irq(nMDBG::tStatus2* s)
{
	return getG1_Write_Acknowledges_Irq(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff83) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_Source_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff83) >> 0x2);
}

inline void tSTC::tG1_Input_Select::writeG1_Source_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Source_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_Source_Select(nMDBG::tStatus2* s)
{
	return getG1_Source_Select(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf07f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_Gate_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf07f) >> 0x7);
}

inline void tSTC::tG1_Input_Select::writeG1_Gate_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_Gate_Select(nMDBG::tStatus2* s)
{
	return getG1_Gate_Select(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_Gate_Select_Load_Source(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tG1_Input_Select::writeG1_Gate_Select_Load_Source(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Gate_Select_Load_Source(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_Gate_Select_Load_Source(nMDBG::tStatus2* s)
{
	return getG1_Gate_Select_Load_Source(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_OR_Gate(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tG1_Input_Select::writeG1_OR_Gate(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_OR_Gate(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_OR_Gate(nMDBG::tStatus2* s)
{
	return getG1_OR_Gate(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_Output_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tG1_Input_Select::writeG1_Output_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Output_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_Output_Polarity(nMDBG::tStatus2* s)
{
	return getG1_Output_Polarity(s);
}

inline tSTC::tG1_Input_Select& tSTC::tG1_Input_Select::setG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Input_Select::getG1_Source_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tG1_Input_Select::writeG1_Source_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Source_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Input_Select::readG1_Source_Polarity(nMDBG::tStatus2* s)
{
	return getG1_Source_Polarity(s);
}

inline void tSTC::tG1_Input_Select::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_Load_A::tG0_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG0_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG0_Load_A& tSTC::tG0_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG0_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tG0_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tG0_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG0_Load_A& tSTC::tG0_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG0_Load_A::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tG0_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tG0_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tG0_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_Autoincrement::tG0_Autoincrement()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_Autoincrement::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG0_Autoincrement::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG0_Autoincrement& tSTC::tG0_Autoincrement::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG0_Autoincrement::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_Autoincrement::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tG0_Autoincrement::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG0_Autoincrement::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG0_Autoincrement& tSTC::tG0_Autoincrement::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff00) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG0_Autoincrement::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tSTC::tG0_Autoincrement::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG0_Autoincrement::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tG0_Autoincrement::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_Load_B::tG0_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG0_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG0_Load_B& tSTC::tG0_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG0_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tG0_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tG0_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG0_Load_B& tSTC::tG0_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG0_Load_B::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tG0_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tG0_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tG0_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_Load_A::tG1_Load_A()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_Load_A::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG1_Load_A::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG1_Load_A& tSTC::tG1_Load_A::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG1_Load_A::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_Load_A::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tG1_Load_A::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tG1_Load_A::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG1_Load_A& tSTC::tG1_Load_A::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG1_Load_A::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tG1_Load_A::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tG1_Load_A::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tG1_Load_A::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_Autoincrement::tG1_Autoincrement()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_Autoincrement::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG1_Autoincrement::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG1_Autoincrement& tSTC::tG1_Autoincrement::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG1_Autoincrement::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_Autoincrement::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tG1_Autoincrement::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tG1_Autoincrement::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG1_Autoincrement& tSTC::tG1_Autoincrement::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff00) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG1_Autoincrement::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline void tSTC::tG1_Autoincrement::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tG1_Autoincrement::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tG1_Autoincrement::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_Load_B::tG1_Load_B()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_Load_B::registerMap(void)
{
	return _STC;
}

inline void tSTC::tG1_Load_B::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tG1_Load_B& tSTC::tG1_Load_B::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG1_Load_B::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_Load_B::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u32)(0xffffffff);
}

inline void tSTC::tG1_Load_B::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u32 tSTC::tG1_Load_B::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tG1_Load_B& tSTC::tG1_Load_B::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG1_Load_B::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline void tSTC::tG1_Load_B::write(u32 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u32 tSTC::tG1_Load_B::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tG1_Load_B::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tGeneric_Control::tGeneric_Control()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tGeneric_Control::registerMap(void)
{
	return _STC;
}

inline void tSTC::tGeneric_Control::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tGeneric_Control& tSTC::tGeneric_Control::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tGeneric_Control::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tGeneric_Control::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tGeneric_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tGeneric_Control::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tGeneric_Control& tSTC::tGeneric_Control::setControl(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tGeneric_Control::getControl(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff) >> 0x8);
}

inline void tSTC::tGeneric_Control::writeControl(u16 fieldValue, nMDBG::tStatus2* s)
{
	setControl(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tGeneric_Control::readControl(nMDBG::tStatus2* s)
{
	return getControl(s);
}

inline void tSTC::tGeneric_Control::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tIO_Bidirection_Pin::tIO_Bidirection_Pin()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tIO_Bidirection_Pin::registerMap(void)
{
	return _STC;
}

inline void tSTC::tIO_Bidirection_Pin::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tIO_Bidirection_Pin::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tIO_Bidirection_Pin::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tIO_Bidirection_Pin::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_0_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_0_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_0_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_0_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_1_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_1_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_1_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_1_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_2_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_2_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_2_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_2_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_3_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_3_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_3_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_3_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_4_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_4_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_4_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_4_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_5_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_5_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_5_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_5_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_6_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_6_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_6_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_6_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_7_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_7_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_7_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_7_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_7_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_7_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_8_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_8_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_8_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_8_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_8_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_8_Pin_Dir(s);
}

inline tSTC::tIO_Bidirection_Pin& tSTC::tIO_Bidirection_Pin::setBD_9_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tIO_Bidirection_Pin::getBD_9_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tIO_Bidirection_Pin::writeBD_9_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBD_9_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tIO_Bidirection_Pin::readBD_9_Pin_Dir(nMDBG::tStatus2* s)
{
	return getBD_9_Pin_Dir(s);
}

inline void tSTC::tIO_Bidirection_Pin::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAnalog_Trigger_Etc::tAnalog_Trigger_Etc()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAnalog_Trigger_Etc::registerMap(void)
{
	return _STC;
}

inline void tSTC::tAnalog_Trigger_Etc::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAnalog_Trigger_Etc::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tAnalog_Trigger_Etc::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tAnalog_Trigger_Etc::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setAnalog_Trigger_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff8) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getAnalog_Trigger_Mode(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tSTC::tAnalog_Trigger_Etc::writeAnalog_Trigger_Mode(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAnalog_Trigger_Mode(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readAnalog_Trigger_Mode(nMDBG::tStatus2* s)
{
	return getAnalog_Trigger_Mode(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setAnalog_Trigger_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getAnalog_Trigger_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tAnalog_Trigger_Etc::writeAnalog_Trigger_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAnalog_Trigger_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readAnalog_Trigger_Enable(nMDBG::tStatus2* s)
{
	return getAnalog_Trigger_Enable(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setAnalog_Trigger_Drive(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getAnalog_Trigger_Drive(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tAnalog_Trigger_Etc::writeAnalog_Trigger_Drive(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAnalog_Trigger_Drive(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readAnalog_Trigger_Drive(nMDBG::tStatus2* s)
{
	return getAnalog_Trigger_Drive(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setSoftware_Test(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getSoftware_Test(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tAnalog_Trigger_Etc::writeSoftware_Test(u16 fieldValue, nMDBG::tStatus2* s)
{
	setSoftware_Test(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readSoftware_Test(nMDBG::tStatus2* s)
{
	return getSoftware_Test(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setMisc_Counter_TCs_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getMisc_Counter_TCs_Output_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tAnalog_Trigger_Etc::writeMisc_Counter_TCs_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setMisc_Counter_TCs_Output_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readMisc_Counter_TCs_Output_Enable(nMDBG::tStatus2* s)
{
	return getMisc_Counter_TCs_Output_Enable(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setGPFO_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getGPFO_1_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tAnalog_Trigger_Etc::writeGPFO_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setGPFO_1_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readGPFO_1_Output_Select(nMDBG::tStatus2* s)
{
	return getGPFO_1_Output_Select(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setGPFO_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xc7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getGPFO_0_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xc7ff) >> 0xb);
}

inline void tSTC::tAnalog_Trigger_Etc::writeGPFO_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setGPFO_0_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readGPFO_0_Output_Select(nMDBG::tStatus2* s)
{
	return getGPFO_0_Output_Select(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setGPFO_0_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getGPFO_0_Output_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tAnalog_Trigger_Etc::writeGPFO_0_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setGPFO_0_Output_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readGPFO_0_Output_Enable(nMDBG::tStatus2* s)
{
	return getGPFO_0_Output_Enable(s);
}

inline tSTC::tAnalog_Trigger_Etc& tSTC::tAnalog_Trigger_Etc::setGPFO_1_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAnalog_Trigger_Etc::getGPFO_1_Output_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tAnalog_Trigger_Etc::writeGPFO_1_Output_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setGPFO_1_Output_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tAnalog_Trigger_Etc::readGPFO_1_Output_Enable(nMDBG::tStatus2* s)
{
	return getGPFO_1_Output_Enable(s);
}

inline void tSTC::tAnalog_Trigger_Etc::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tInterrupt_Control::tInterrupt_Control()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tInterrupt_Control::registerMap(void)
{
	return _STC;
}

inline void tSTC::tInterrupt_Control::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tInterrupt_Control::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tInterrupt_Control::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tInterrupt_Control::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tInterrupt_Control::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setInterrupt_Output_Polarity(tInterrupt_Output_Polarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tInterrupt_Control::tInterrupt_Output_Polarity tSTC::tInterrupt_Control::getInterrupt_Output_Polarity(nMDBG::tStatus2*) const
{
	return (tInterrupt_Output_Polarity)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tInterrupt_Control::writeInterrupt_Output_Polarity(tInterrupt_Output_Polarity fieldValue, nMDBG::tStatus2* s)
{
	setInterrupt_Output_Polarity(fieldValue, s);
	flush(s);
}
inline tSTC::tInterrupt_Control::tInterrupt_Output_Polarity tSTC::tInterrupt_Control::readInterrupt_Output_Polarity(nMDBG::tStatus2* s)
{
	return getInterrupt_Output_Polarity(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setInterrupt_Output_On_3_Pins(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_Control::getInterrupt_Output_On_3_Pins(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tInterrupt_Control::writeInterrupt_Output_On_3_Pins(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setInterrupt_Output_On_3_Pins(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_Control::readInterrupt_Output_On_3_Pins(nMDBG::tStatus2* s)
{
	return getInterrupt_Output_On_3_Pins(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setPass_Thru_1_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_Control::getPass_Thru_1_Interrupt_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tInterrupt_Control::writePass_Thru_1_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setPass_Thru_1_Interrupt_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_Control::readPass_Thru_1_Interrupt_Polarity(nMDBG::tStatus2* s)
{
	return getPass_Thru_1_Interrupt_Polarity(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setPass_Thru_0_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_Control::getPass_Thru_0_Interrupt_Polarity(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tInterrupt_Control::writePass_Thru_0_Interrupt_Polarity(u16 fieldValue, nMDBG::tStatus2* s)
{
	setPass_Thru_0_Interrupt_Polarity(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_Control::readPass_Thru_0_Interrupt_Polarity(nMDBG::tStatus2* s)
{
	return getPass_Thru_0_Interrupt_Polarity(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setInterrupt_A_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf8ff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_Control::getInterrupt_A_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf8ff) >> 0x8);
}

inline void tSTC::tInterrupt_Control::writeInterrupt_A_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setInterrupt_A_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_Control::readInterrupt_A_Output_Select(nMDBG::tStatus2* s)
{
	return getInterrupt_A_Output_Select(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setInterrupt_A_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_Control::getInterrupt_A_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tInterrupt_Control::writeInterrupt_A_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setInterrupt_A_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_Control::readInterrupt_A_Enable(nMDBG::tStatus2* s)
{
	return getInterrupt_A_Enable(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setInterrupt_B_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x8fff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tInterrupt_Control::getInterrupt_B_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x8fff) >> 0xc);
}

inline void tSTC::tInterrupt_Control::writeInterrupt_B_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setInterrupt_B_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tInterrupt_Control::readInterrupt_B_Output_Select(nMDBG::tStatus2* s)
{
	return getInterrupt_B_Output_Select(s);
}

inline tSTC::tInterrupt_Control& tSTC::tInterrupt_Control::setInterrupt_B_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tInterrupt_Control::getInterrupt_B_Enable(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tInterrupt_Control::writeInterrupt_B_Enable(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setInterrupt_B_Enable(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tInterrupt_Control::readInterrupt_B_Enable(nMDBG::tStatus2* s)
{
	return getInterrupt_B_Enable(s);
}

inline void tSTC::tInterrupt_Control::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tClock_and_FOUT::tClock_and_FOUT()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tClock_and_FOUT::registerMap(void)
{
	return _STC;
}

inline void tSTC::tClock_and_FOUT::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tClock_and_FOUT::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tClock_and_FOUT::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tClock_and_FOUT::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tClock_and_FOUT::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tClock_and_FOUT::getFOUT_Divider(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tSTC::tClock_and_FOUT::writeFOUT_Divider(u16 fieldValue, nMDBG::tStatus2* s)
{
	setFOUT_Divider(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tClock_and_FOUT::readFOUT_Divider(nMDBG::tStatus2* s)
{
	return getFOUT_Divider(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setAO_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getAO_Source_Divide_By_2(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tClock_and_FOUT::writeAO_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Source_Divide_By_2(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readAO_Source_Divide_By_2(nMDBG::tStatus2* s)
{
	return getAO_Source_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setAO_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getAO_Output_Divide_By_2(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tClock_and_FOUT::writeAO_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAO_Output_Divide_By_2(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readAO_Output_Divide_By_2(nMDBG::tStatus2* s)
{
	return getAO_Output_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setAI_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getAI_Source_Divide_By_2(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tClock_and_FOUT::writeAI_Source_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Source_Divide_By_2(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readAI_Source_Divide_By_2(nMDBG::tStatus2* s)
{
	return getAI_Source_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setAI_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getAI_Output_Divide_By_2(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline void tSTC::tClock_and_FOUT::writeAI_Output_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setAI_Output_Divide_By_2(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readAI_Output_Divide_By_2(nMDBG::tStatus2* s)
{
	return getAI_Output_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setClock_To_Board(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getClock_To_Board(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tClock_and_FOUT::writeClock_To_Board(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setClock_To_Board(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readClock_To_Board(nMDBG::tStatus2* s)
{
	return getClock_To_Board(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setClock_To_Board_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getClock_To_Board_Divide_By_2(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tClock_and_FOUT::writeClock_To_Board_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setClock_To_Board_Divide_By_2(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readClock_To_Board_Divide_By_2(nMDBG::tStatus2* s)
{
	return getClock_To_Board_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setG_Source_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tClock_and_FOUT::getG_Source_Divide_By_2(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tClock_and_FOUT::writeG_Source_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG_Source_Divide_By_2(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tClock_and_FOUT::readG_Source_Divide_By_2(nMDBG::tStatus2* s)
{
	return getG_Source_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setSlow_Internal_Timebase(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getSlow_Internal_Timebase(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tClock_and_FOUT::writeSlow_Internal_Timebase(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setSlow_Internal_Timebase(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readSlow_Internal_Timebase(nMDBG::tStatus2* s)
{
	return getSlow_Internal_Timebase(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setSlow_Internal_Time_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tClock_and_FOUT::getSlow_Internal_Time_Divide_By_2(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tClock_and_FOUT::writeSlow_Internal_Time_Divide_By_2(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setSlow_Internal_Time_Divide_By_2(fieldValue, s);
	flush(s);
}
inline tBoolean tSTC::tClock_and_FOUT::readSlow_Internal_Time_Divide_By_2(nMDBG::tStatus2* s)
{
	return getSlow_Internal_Time_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setDIO_Serial_Out_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tClock_and_FOUT::getDIO_Serial_Out_Divide_By_2(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tClock_and_FOUT::writeDIO_Serial_Out_Divide_By_2(u16 fieldValue, nMDBG::tStatus2* s)
{
	setDIO_Serial_Out_Divide_By_2(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tClock_and_FOUT::readDIO_Serial_Out_Divide_By_2(nMDBG::tStatus2* s)
{
	return getDIO_Serial_Out_Divide_By_2(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setFOUT_Timebase_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tClock_and_FOUT::getFOUT_Timebase_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tClock_and_FOUT::writeFOUT_Timebase_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setFOUT_Timebase_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tClock_and_FOUT::readFOUT_Timebase_Select(nMDBG::tStatus2* s)
{
	return getFOUT_Timebase_Select(s);
}

inline tSTC::tClock_and_FOUT& tSTC::tClock_and_FOUT::setFOUT_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tClock_and_FOUT::getFOUT_Enable(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tClock_and_FOUT::writeFOUT_Enable(u16 fieldValue, nMDBG::tStatus2* s)
{
	setFOUT_Enable(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tClock_and_FOUT::readFOUT_Enable(nMDBG::tStatus2* s)
{
	return getFOUT_Enable(s);
}

inline void tSTC::tClock_and_FOUT::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tJoint_Reset::tJoint_Reset()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tJoint_Reset::registerMap(void)
{
	return _STC;
}

inline void tSTC::tJoint_Reset::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tJoint_Reset::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tJoint_Reset::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0830);
}

inline void tSTC::tJoint_Reset::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tJoint_Reset::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAI_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAI_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tJoint_Reset::writeAI_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAI_Reset(nMDBG::tStatus2* s)
{
	return getAI_Reset(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAO_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAO_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tSTC::tJoint_Reset::writeAO_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAO_Reset(nMDBG::tStatus2* s)
{
	return getAO_Reset(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setG0_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getG0_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tSTC::tJoint_Reset::writeG0_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG0_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readG0_Reset(nMDBG::tStatus2* s)
{
	return getG0_Reset(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setG1_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getG1_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tSTC::tJoint_Reset::writeG1_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setG1_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readG1_Reset(nMDBG::tStatus2* s)
{
	return getG1_Reset(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAI_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAI_Configuration_Start(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline void tSTC::tJoint_Reset::writeAI_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Configuration_Start(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAI_Configuration_Start(nMDBG::tStatus2* s)
{
	return getAI_Configuration_Start(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAO_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAO_Configuration_Start(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline void tSTC::tJoint_Reset::writeAO_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Configuration_Start(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAO_Configuration_Start(nMDBG::tStatus2* s)
{
	return getAO_Configuration_Start(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAO_UI2_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAO_UI2_Configuration_Start(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline void tSTC::tJoint_Reset::writeAO_UI2_Configuration_Start(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Configuration_Start(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAO_UI2_Configuration_Start(nMDBG::tStatus2* s)
{
	return getAO_UI2_Configuration_Start(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAI_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAI_Configuration_End(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tSTC::tJoint_Reset::writeAI_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAI_Configuration_End(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAI_Configuration_End(nMDBG::tStatus2* s)
{
	return getAI_Configuration_End(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAO_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAO_Configuration_End(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tJoint_Reset::writeAO_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_Configuration_End(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAO_Configuration_End(nMDBG::tStatus2* s)
{
	return getAO_Configuration_End(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setAO_UI2_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getAO_UI2_Configuration_End(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tJoint_Reset::writeAO_UI2_Configuration_End(u16 fieldValue, nMDBG::tStatus2* s)
{
	setAO_UI2_Configuration_End(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readAO_UI2_Configuration_End(nMDBG::tStatus2* s)
{
	return getAO_UI2_Configuration_End(s);
}

inline tSTC::tJoint_Reset& tSTC::tJoint_Reset::setSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Reset::getSoftware_Reset(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tJoint_Reset::writeSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
	setSoftware_Reset(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tJoint_Reset::readSoftware_Reset(nMDBG::tStatus2* s)
{
	return getSoftware_Reset(s);
}

inline void tSTC::tJoint_Reset::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tRTSI_Trig_Direction::tRTSI_Trig_Direction()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tRTSI_Trig_Direction::registerMap(void)
{
	return _STC;
}

inline void tSTC::tRTSI_Trig_Direction::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tRTSI_Trig_Direction::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tRTSI_Trig_Direction::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tRTSI_Trig_Direction::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Clock_Mode(tRTSI_Clock_Mode fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffc) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tRTSI_Trig_Direction::tRTSI_Clock_Mode tSTC::tRTSI_Trig_Direction::getRTSI_Clock_Mode(nMDBG::tStatus2*) const
{
	return (tRTSI_Clock_Mode)((_softCopy & ~0xfffc) >> 0x0);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Clock_Mode(tRTSI_Clock_Mode fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Clock_Mode(fieldValue, s);
	flush(s);
}
inline tSTC::tRTSI_Trig_Direction::tRTSI_Clock_Mode tSTC::tRTSI_Trig_Direction::readRTSI_Clock_Mode(nMDBG::tStatus2* s)
{
	return getRTSI_Clock_Mode(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Trig_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRTSI_Trig_0_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Trig_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_0_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_Direction::readRTSI_Trig_0_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_0_Pin_Dir(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Trig_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRTSI_Trig_1_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Trig_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_1_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_Direction::readRTSI_Trig_1_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_1_Pin_Dir(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Trig_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRTSI_Trig_2_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Trig_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_2_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_Direction::readRTSI_Trig_2_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_2_Pin_Dir(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Trig_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRTSI_Trig_3_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Trig_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_3_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_Direction::readRTSI_Trig_3_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_3_Pin_Dir(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Trig_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRTSI_Trig_4_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Trig_4_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_4_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_Direction::readRTSI_Trig_4_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_4_Pin_Dir(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Trig_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRTSI_Trig_5_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Trig_5_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_5_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_Direction::readRTSI_Trig_5_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_5_Pin_Dir(s);
}

inline tSTC::tRTSI_Trig_Direction& tSTC::tRTSI_Trig_Direction::setRTSI_Trig_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_Direction::getRTSI_Trig_6_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tRTSI_Trig_Direction::writeRTSI_Trig_6_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_6_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_Direction::readRTSI_Trig_6_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_6_Pin_Dir(s);
}

inline void tSTC::tRTSI_Trig_Direction::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tRTSI_Trig_A_Output::tRTSI_Trig_A_Output()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tRTSI_Trig_A_Output::registerMap(void)
{
	return _STC;
}

inline void tSTC::tRTSI_Trig_A_Output::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tRTSI_Trig_A_Output& tSTC::tRTSI_Trig_A_Output::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tRTSI_Trig_A_Output::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tRTSI_Trig_A_Output::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tRTSI_Trig_A_Output::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tRTSI_Trig_A_Output::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tRTSI_Trig_A_Output& tSTC::tRTSI_Trig_A_Output::setRTSI_Trig_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_A_Output::getRTSI_Trig_0_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tSTC::tRTSI_Trig_A_Output::writeRTSI_Trig_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_0_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_A_Output::readRTSI_Trig_0_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_0_Output_Select(s);
}

inline tSTC::tRTSI_Trig_A_Output& tSTC::tRTSI_Trig_A_Output::setRTSI_Trig_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff0f) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_A_Output::getRTSI_Trig_1_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff0f) >> 0x4);
}

inline void tSTC::tRTSI_Trig_A_Output::writeRTSI_Trig_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_1_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_A_Output::readRTSI_Trig_1_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_1_Output_Select(s);
}

inline tSTC::tRTSI_Trig_A_Output& tSTC::tRTSI_Trig_A_Output::setRTSI_Trig_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf0ff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_A_Output::getRTSI_Trig_2_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf0ff) >> 0x8);
}

inline void tSTC::tRTSI_Trig_A_Output::writeRTSI_Trig_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_2_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_A_Output::readRTSI_Trig_2_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_2_Output_Select(s);
}

inline tSTC::tRTSI_Trig_A_Output& tSTC::tRTSI_Trig_A_Output::setRTSI_Trig_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_A_Output::getRTSI_Trig_3_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff) >> 0xc);
}

inline void tSTC::tRTSI_Trig_A_Output::writeRTSI_Trig_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_3_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_A_Output::readRTSI_Trig_3_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_3_Output_Select(s);
}

inline void tSTC::tRTSI_Trig_A_Output::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tRTSI_Trig_B_Output::tRTSI_Trig_B_Output()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tRTSI_Trig_B_Output::registerMap(void)
{
	return _STC;
}

inline void tSTC::tRTSI_Trig_B_Output::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tRTSI_Trig_B_Output& tSTC::tRTSI_Trig_B_Output::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tRTSI_Trig_B_Output::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tRTSI_Trig_B_Output::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tRTSI_Trig_B_Output::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tRTSI_Trig_B_Output::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tRTSI_Trig_B_Output& tSTC::tRTSI_Trig_B_Output::setRTSI_Trig_4_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_B_Output::getRTSI_Trig_4_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tSTC::tRTSI_Trig_B_Output::writeRTSI_Trig_4_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_4_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_B_Output::readRTSI_Trig_4_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_4_Output_Select(s);
}

inline tSTC::tRTSI_Trig_B_Output& tSTC::tRTSI_Trig_B_Output::setRTSI_Trig_5_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff0f) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_B_Output::getRTSI_Trig_5_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff0f) >> 0x4);
}

inline void tSTC::tRTSI_Trig_B_Output::writeRTSI_Trig_5_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_5_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_B_Output::readRTSI_Trig_5_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_5_Output_Select(s);
}

inline tSTC::tRTSI_Trig_B_Output& tSTC::tRTSI_Trig_B_Output::setRTSI_Trig_6_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf0ff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_B_Output::getRTSI_Trig_6_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf0ff) >> 0x8);
}

inline void tSTC::tRTSI_Trig_B_Output::writeRTSI_Trig_6_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Trig_6_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_B_Output::readRTSI_Trig_6_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Trig_6_Output_Select(s);
}

inline tSTC::tRTSI_Trig_B_Output& tSTC::tRTSI_Trig_B_Output::setRTSI_Sub_Selection_1(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Trig_B_Output::getRTSI_Sub_Selection_1(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tRTSI_Trig_B_Output::writeRTSI_Sub_Selection_1(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Sub_Selection_1(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Trig_B_Output::readRTSI_Sub_Selection_1(nMDBG::tStatus2* s)
{
	return getRTSI_Sub_Selection_1(s);
}

inline void tSTC::tRTSI_Trig_B_Output::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tRTSI_Board::tRTSI_Board()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tRTSI_Board::registerMap(void)
{
	return _STC;
}

inline void tSTC::tRTSI_Board::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tRTSI_Board::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tSTC::tRTSI_Board::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tRTSI_Board::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff8) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_0_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_0_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_0_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_0_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Board_0_Output_Select(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffc7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_1_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffc7) >> 0x3);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_1_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_1_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_1_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Board_1_Output_Select(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfe3f) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_2_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfe3f) >> 0x6);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_2_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_2_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_2_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Board_2_Output_Select(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf1ff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_3_Output_Select(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf1ff) >> 0x9);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_3_Output_Select(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_3_Output_Select(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_3_Output_Select(nMDBG::tStatus2* s)
{
	return getRTSI_Board_3_Output_Select(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_0_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_0_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_0_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_0_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Board_0_Pin_Dir(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_1_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_1_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_1_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_1_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Board_1_Pin_Dir(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_2_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_2_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_2_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_2_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Board_2_Pin_Dir(s);
}

inline tSTC::tRTSI_Board& tSTC::tRTSI_Board::setRTSI_Board_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tRTSI_Board::getRTSI_Board_3_Pin_Dir(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tSTC::tRTSI_Board::writeRTSI_Board_3_Pin_Dir(u16 fieldValue, nMDBG::tStatus2* s)
{
	setRTSI_Board_3_Pin_Dir(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tRTSI_Board::readRTSI_Board_3_Pin_Dir(nMDBG::tStatus2* s)
{
	return getRTSI_Board_3_Pin_Dir(s);
}

inline void tSTC::tRTSI_Board::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tWrite_Strobe_0::tWrite_Strobe_0()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tWrite_Strobe_0::registerMap(void)
{
	return _STC;
}

inline void tSTC::tWrite_Strobe_0::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tWrite_Strobe_0& tSTC::tWrite_Strobe_0::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tWrite_Strobe_0::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tWrite_Strobe_0::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0000);
}

inline void tSTC::tWrite_Strobe_0::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tWrite_Strobe_0::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tWrite_Strobe_0& tSTC::tWrite_Strobe_0::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tWrite_Strobe_0::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tWrite_Strobe_0::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tWrite_Strobe_0::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tWrite_Strobe_0::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tWrite_Strobe_1::tWrite_Strobe_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tWrite_Strobe_1::registerMap(void)
{
	return _STC;
}

inline void tSTC::tWrite_Strobe_1::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tWrite_Strobe_1& tSTC::tWrite_Strobe_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tWrite_Strobe_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tWrite_Strobe_1::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0000);
}

inline void tSTC::tWrite_Strobe_1::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tWrite_Strobe_1::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tWrite_Strobe_1& tSTC::tWrite_Strobe_1::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tWrite_Strobe_1::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tWrite_Strobe_1::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tWrite_Strobe_1::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tWrite_Strobe_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tWrite_Strobe_2::tWrite_Strobe_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tWrite_Strobe_2::registerMap(void)
{
	return _STC;
}

inline void tSTC::tWrite_Strobe_2::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tWrite_Strobe_2& tSTC::tWrite_Strobe_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tWrite_Strobe_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tWrite_Strobe_2::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0000);
}

inline void tSTC::tWrite_Strobe_2::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tWrite_Strobe_2::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tWrite_Strobe_2& tSTC::tWrite_Strobe_2::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tWrite_Strobe_2::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tWrite_Strobe_2::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tWrite_Strobe_2::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tWrite_Strobe_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tWrite_Strobe_3::tWrite_Strobe_3()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tWrite_Strobe_3::registerMap(void)
{
	return _STC;
}

inline void tSTC::tWrite_Strobe_3::flushBus(nMDBG::tStatus2* s)
{
	_STC->flushBus(s);
}

inline tSTC::tWrite_Strobe_3& tSTC::tWrite_Strobe_3::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tWrite_Strobe_3::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tWrite_Strobe_3::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffff0000);
}

inline void tSTC::tWrite_Strobe_3::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tSTC::tWrite_Strobe_3::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tSTC::tWrite_Strobe_3& tSTC::tWrite_Strobe_3::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tWrite_Strobe_3::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tSTC::tWrite_Strobe_3::write(u16 fieldValue, nMDBG::tStatus2* s)
{
	set(fieldValue, s);
	flush(s);
}
inline u16 tSTC::tWrite_Strobe_3::read(nMDBG::tStatus2* s)
{
	return get(s);
}

inline void tSTC::tWrite_Strobe_3::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_DIV_Save::tAI_DIV_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_DIV_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAI_DIV_Save& tSTC::tAI_DIV_Save::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_DIV_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_DIV_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tAI_DIV_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAI_DIV_Save& tSTC::tAI_DIV_Save::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_DIV_Save::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tSTC::tAI_DIV_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAI_DIV_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SC_Save::tAI_SC_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SC_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAI_SC_Save& tSTC::tAI_SC_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAI_SC_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SC_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tAI_SC_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAI_SC_Save& tSTC::tAI_SC_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAI_SC_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tAI_SC_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAI_SC_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SI_Save::tAI_SI_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SI_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAI_SI_Save& tSTC::tAI_SI_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAI_SI_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SI_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tAI_SI_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAI_SI_Save& tSTC::tAI_SI_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAI_SI_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tAI_SI_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAI_SI_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_SI2_Save::tAI_SI2_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_SI2_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAI_SI2_Save& tSTC::tAI_SI2_Save::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_SI2_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_SI2_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tAI_SI2_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAI_SI2_Save& tSTC::tAI_SI2_Save::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_SI2_Save::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tSTC::tAI_SI2_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAI_SI2_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Status_1::tAI_Status_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Status_1::registerMap(void)
{
	return _STC;
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Status_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Status_1::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tAI_Status_1::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setPass_Thru_0_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getPass_Thru_0_Interrupt_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline tBoolean tSTC::tAI_Status_1::readPass_Thru_0_Interrupt_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getPass_Thru_0_Interrupt_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_FIFO_Request_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_FIFO_Request_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffd) >> 0x1);
}

inline tBoolean tSTC::tAI_Status_1::readAI_FIFO_Request_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_FIFO_Request_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setG0_Gate_Interrupt_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getG0_Gate_Interrupt_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline tBoolean tSTC::tAI_Status_1::readG0_Gate_Interrupt_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Gate_Interrupt_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setG0_TC_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getG0_TC_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfff7) >> 0x3);
}

inline tBoolean tSTC::tAI_Status_1::readG0_TC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_TC_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_STOP_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_STOP_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffef) >> 0x4);
}

inline tBoolean tSTC::tAI_Status_1::readAI_STOP_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_STOP_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_START_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_START_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline tBoolean tSTC::tAI_Status_1::readAI_START_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_START_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_SC_TC_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_SC_TC_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffbf) >> 0x6);
}

inline tBoolean tSTC::tAI_Status_1::readAI_SC_TC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SC_TC_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_START1_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_START1_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xff7f) >> 0x7);
}

inline tBoolean tSTC::tAI_Status_1::readAI_START1_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_START1_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_START2_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_START2_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfeff) >> 0x8);
}

inline tBoolean tSTC::tAI_Status_1::readAI_START2_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_START2_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_SC_TC_Error_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_SC_TC_Error_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline tBoolean tSTC::tAI_Status_1::readAI_SC_TC_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SC_TC_Error_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_Overflow_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_Overflow_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfbff) >> 0xa);
}

inline tBoolean tSTC::tAI_Status_1::readAI_Overflow_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_Overflow_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_Overrun_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_Overrun_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline tBoolean tSTC::tAI_Status_1::readAI_Overrun_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_Overrun_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_FIFO_Empty_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_FIFO_Empty_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline tBoolean tSTC::tAI_Status_1::readAI_FIFO_Empty_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_FIFO_Empty_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_FIFO_Half_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_FIFO_Half_Full_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline tBoolean tSTC::tAI_Status_1::readAI_FIFO_Half_Full_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_FIFO_Half_Full_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setAI_FIFO_Full_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getAI_FIFO_Full_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline tBoolean tSTC::tAI_Status_1::readAI_FIFO_Full_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_FIFO_Full_St(s);
}

inline tSTC::tAI_Status_1& tSTC::tAI_Status_1::setInterrupt_A_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_1::getInterrupt_A_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline tBoolean tSTC::tAI_Status_1::readInterrupt_A_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getInterrupt_A_St(s);
}

inline void tSTC::tAI_Status_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAI_Status_2::tAI_Status_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAI_Status_2::registerMap(void)
{
	return _STC;
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAI_Status_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAI_Status_2::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tAI_Status_2::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SC_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_2::getAI_SC_Armed_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffe) >> 0x0);
}

inline tBoolean tSTC::tAI_Status_2::readAI_SC_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SC_Armed_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SC_Next_Load_Source_St(tAI_SC_Next_Load_Source_St fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Status_2::tAI_SC_Next_Load_Source_St tSTC::tAI_Status_2::getAI_SC_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (tAI_SC_Next_Load_Source_St)((_softCopy & ~0xfffd) >> 0x1);
}

inline tSTC::tAI_Status_2::tAI_SC_Next_Load_Source_St tSTC::tAI_Status_2::readAI_SC_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SC_Next_Load_Source_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SC_Save_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_2::getAI_SC_Save_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfffb) >> 0x2);
}

inline tBoolean tSTC::tAI_Status_2::readAI_SC_Save_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SC_Save_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SC_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffe7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Status_2::getAI_SC_Q_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffe7) >> 0x3);
}

inline u16 tSTC::tAI_Status_2::readAI_SC_Q_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SC_Q_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SI_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_2::getAI_SI_Armed_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xffdf) >> 0x5);
}

inline tBoolean tSTC::tAI_Status_2::readAI_SI_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SI_Armed_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SI_Next_Load_Source_St(tAI_SI_Next_Load_Source_St fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Status_2::tAI_SI_Next_Load_Source_St tSTC::tAI_Status_2::getAI_SI_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (tAI_SI_Next_Load_Source_St)((_softCopy & ~0xffbf) >> 0x6);
}

inline tSTC::tAI_Status_2::tAI_SI_Next_Load_Source_St tSTC::tAI_Status_2::readAI_SI_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SI_Next_Load_Source_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SI_Count_Enable_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Status_2::getAI_SI_Count_Enable_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline u16 tSTC::tAI_Status_2::readAI_SI_Count_Enable_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SI_Count_Enable_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SI_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf9ff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAI_Status_2::getAI_SI_Q_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf9ff) >> 0x9);
}

inline u16 tSTC::tAI_Status_2::readAI_SI_Q_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SI_Q_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SI2_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_2::getAI_SI2_Armed_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xf7ff) >> 0xb);
}

inline tBoolean tSTC::tAI_Status_2::readAI_SI2_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SI2_Armed_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_SI2_Next_Load_Source_St(tAI_SI2_Next_Load_Source_St fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tSTC::tAI_Status_2::tAI_SI2_Next_Load_Source_St tSTC::tAI_Status_2::getAI_SI2_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (tAI_SI2_Next_Load_Source_St)((_softCopy & ~0xefff) >> 0xc);
}

inline tSTC::tAI_Status_2::tAI_SI2_Next_Load_Source_St tSTC::tAI_Status_2::readAI_SI2_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SI2_Next_Load_Source_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_DIV_Q_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_2::getAI_DIV_Q_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xdfff) >> 0xd);
}

inline tBoolean tSTC::tAI_Status_2::readAI_DIV_Q_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_DIV_Q_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setAI_DIV_Armed_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_2::getAI_DIV_Armed_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xbfff) >> 0xe);
}

inline tBoolean tSTC::tAI_Status_2::readAI_DIV_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_DIV_Armed_St(s);
}

inline tSTC::tAI_Status_2& tSTC::tAI_Status_2::setReserved_2000_St(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tSTC::tAI_Status_2::getReserved_2000_St(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline tBoolean tSTC::tAI_Status_2::readReserved_2000_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getReserved_2000_St(s);
}

inline void tSTC::tAI_Status_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_BC_Save::tAO_BC_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_BC_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAO_BC_Save& tSTC::tAO_BC_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_BC_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_BC_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tAO_BC_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAO_BC_Save& tSTC::tAO_BC_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_BC_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tAO_BC_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAO_BC_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Status_1::tAO_Status_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Status_1::registerMap(void)
{
	return _STC;
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Status_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Status_1::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tAO_Status_1::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setPass_Thru_1_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getPass_Thru_1_Interrupt_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tSTC::tAO_Status_1::readPass_Thru_1_Interrupt_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getPass_Thru_1_Interrupt_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_FIFO_Request_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_FIFO_Request_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tSTC::tAO_Status_1::readAO_FIFO_Request_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_FIFO_Request_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setG1_Gate_Interrupt_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getG1_Gate_Interrupt_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tSTC::tAO_Status_1::readG1_Gate_Interrupt_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Gate_Interrupt_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setG1_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getG1_TC_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tSTC::tAO_Status_1::readG1_TC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_TC_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_UI2_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_UI2_TC_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tSTC::tAO_Status_1::readAO_UI2_TC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI2_TC_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_UPDATE_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_UPDATE_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tSTC::tAO_Status_1::readAO_UPDATE_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UPDATE_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_UC_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_UC_TC_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tSTC::tAO_Status_1::readAO_UC_TC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UC_TC_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_BC_TC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_BC_TC_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tSTC::tAO_Status_1::readAO_BC_TC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_TC_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_START1_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_START1_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline u16 tSTC::tAO_Status_1::readAO_START1_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_START1_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_Overrun_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_Overrun_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline u16 tSTC::tAO_Status_1::readAO_Overrun_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_Overrun_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_START_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_START_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tSTC::tAO_Status_1::readAO_START_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_START_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_BC_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_BC_TC_Error_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline u16 tSTC::tAO_Status_1::readAO_BC_TC_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_TC_Error_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_FIFO_Empty_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_FIFO_Empty_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tSTC::tAO_Status_1::readAO_FIFO_Empty_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_FIFO_Empty_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_FIFO_Half_Full_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_FIFO_Half_Full_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tSTC::tAO_Status_1::readAO_FIFO_Half_Full_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_FIFO_Half_Full_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setAO_FIFO_Full_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getAO_FIFO_Full_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tSTC::tAO_Status_1::readAO_FIFO_Full_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_FIFO_Full_St(s);
}

inline tSTC::tAO_Status_1& tSTC::tAO_Status_1::setInterrupt_B_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_1::getInterrupt_B_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tSTC::tAO_Status_1::readInterrupt_B_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getInterrupt_B_St(s);
}

inline void tSTC::tAO_Status_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_Status_2::tAO_Status_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_Status_2::registerMap(void)
{
	return _STC;
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_Status_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_Status_2::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tAO_Status_2::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_BC_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_BC_Armed_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tSTC::tAO_Status_2::readAO_BC_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_Armed_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_BC_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_BC_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tSTC::tAO_Status_2::readAO_BC_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_Next_Load_Source_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_BC_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_BC_Save_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tSTC::tAO_Status_2::readAO_BC_Save_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_Save_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_BC_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_BC_Q_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tSTC::tAO_Status_2::readAO_BC_Q_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_Q_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_BC_TC_Trigger_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_BC_TC_Trigger_Error_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tSTC::tAO_Status_2::readAO_BC_TC_Trigger_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_TC_Trigger_Error_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI_Armed_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tSTC::tAO_Status_2::readAO_UI_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI_Armed_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tSTC::tAO_Status_2::readAO_UI_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI_Next_Load_Source_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UC_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UC_Save_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tSTC::tAO_Status_2::readAO_UC_Save_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UC_Save_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI_Counting_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI_Counting_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline u16 tSTC::tAO_Status_2::readAO_UI_Counting_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI_Counting_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI_Q_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline u16 tSTC::tAO_Status_2::readAO_UI_Q_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI_Q_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI2_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI2_TC_Error_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tSTC::tAO_Status_2::readAO_UI2_TC_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI2_TC_Error_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI2_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI2_Armed_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline u16 tSTC::tAO_Status_2::readAO_UI2_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI2_Armed_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI2_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI2_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tSTC::tAO_Status_2::readAO_UI2_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI2_Next_Load_Source_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UI2_Counting_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UI2_Counting_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tSTC::tAO_Status_2::readAO_UI2_Counting_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI2_Counting_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UC_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UC_Armed_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tSTC::tAO_Status_2::readAO_UC_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UC_Armed_St(s);
}

inline tSTC::tAO_Status_2& tSTC::tAO_Status_2::setAO_UC_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_Status_2::getAO_UC_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tSTC::tAO_Status_2::readAO_UC_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UC_Next_Load_Source_St(s);
}

inline void tSTC::tAO_Status_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UC_Save::tAO_UC_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UC_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAO_UC_Save& tSTC::tAO_UC_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_UC_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UC_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tAO_UC_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAO_UC_Save& tSTC::tAO_UC_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_UC_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tAO_UC_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAO_UC_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UI_Save::tAO_UI_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UI_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAO_UI_Save& tSTC::tAO_UI_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tAO_UI_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UI_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tAO_UI_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAO_UI_Save& tSTC::tAO_UI_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tAO_UI_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tAO_UI_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAO_UI_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tAO_UI2_Save::tAO_UI2_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tAO_UI2_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tAO_UI2_Save& tSTC::tAO_UI2_Save::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tAO_UI2_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tAO_UI2_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tAO_UI2_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tAO_UI2_Save& tSTC::tAO_UI2_Save::set(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tAO_UI2_Save::get(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tSTC::tAO_UI2_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tAO_UI2_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tDIO_Parallel_Input::tDIO_Parallel_Input()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tDIO_Parallel_Input::registerMap(void)
{
	return _STC;
}

inline tSTC::tDIO_Parallel_Input& tSTC::tDIO_Parallel_Input::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tDIO_Parallel_Input::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tDIO_Parallel_Input::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tDIO_Parallel_Input::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tDIO_Parallel_Input& tSTC::tDIO_Parallel_Input::setDIO_Parallel_Data_In_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff00) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Parallel_Input::getDIO_Parallel_Data_In_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline u16 tSTC::tDIO_Parallel_Input::readDIO_Parallel_Data_In_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getDIO_Parallel_Data_In_St(s);
}

inline tSTC::tDIO_Parallel_Input& tSTC::tDIO_Parallel_Input::setReserved_1_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Parallel_Input::getReserved_1_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff) >> 0x8);
}

inline u16 tSTC::tDIO_Parallel_Input::readReserved_1_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getReserved_1_St(s);
}

inline void tSTC::tDIO_Parallel_Input::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tDIO_Serial_Input::tDIO_Serial_Input()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tDIO_Serial_Input::registerMap(void)
{
	return _STC;
}

inline tSTC::tDIO_Serial_Input& tSTC::tDIO_Serial_Input::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tDIO_Serial_Input::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tDIO_Serial_Input::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tDIO_Serial_Input::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tDIO_Serial_Input& tSTC::tDIO_Serial_Input::setDIO_Serial_Data_In_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff00) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Serial_Input::getDIO_Serial_Data_In_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff00) >> 0x0);
}

inline u16 tSTC::tDIO_Serial_Input::readDIO_Serial_Data_In_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getDIO_Serial_Data_In_St(s);
}

inline tSTC::tDIO_Serial_Input& tSTC::tDIO_Serial_Input::setReserved_2_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tDIO_Serial_Input::getReserved_2_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff) >> 0x8);
}

inline u16 tSTC::tDIO_Serial_Input::readReserved_2_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getReserved_2_St(s);
}

inline void tSTC::tDIO_Serial_Input::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_HW_Save::tG0_HW_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_HW_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tG0_HW_Save& tSTC::tG0_HW_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG0_HW_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_HW_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tG0_HW_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tG0_HW_Save& tSTC::tG0_HW_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG0_HW_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tG0_HW_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tG0_HW_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG0_Save::tG0_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG0_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tG0_Save& tSTC::tG0_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG0_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG0_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tG0_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tG0_Save& tSTC::tG0_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG0_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tG0_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tG0_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_HW_Save::tG1_HW_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_HW_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tG1_HW_Save& tSTC::tG1_HW_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG1_HW_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_HW_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tG1_HW_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tG1_HW_Save& tSTC::tG1_HW_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG1_HW_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tG1_HW_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tG1_HW_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG1_Save::tG1_Save()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG1_Save::registerMap(void)
{
	return _STC;
}

inline tSTC::tG1_Save& tSTC::tG1_Save::setRegister(u32 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u32 tSTC::tG1_Save::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG1_Save::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u32 tSTC::tG1_Save::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tG1_Save& tSTC::tG1_Save::set(u32 fieldValue, nMDBG::tStatus2* s)
{
	u32 newValue;   newValue = (u32) ((_softCopy & 0xff000000) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u32 tSTC::tG1_Save::get(nMDBG::tStatus2*) const
{
	return (u32)((_softCopy & ~0xff000000) >> 0x0);
}

inline u32 tSTC::tG1_Save::read(nMDBG::tStatus2* s)
{
	refresh(s);
	return get(s);
}

inline void tSTC::tG1_Save::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tG_Status::tG_Status()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tG_Status::registerMap(void)
{
	return _STC;
}

inline tSTC::tG_Status& tSTC::tG_Status::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tG_Status::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tG_Status::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tG_Status::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_Save_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tSTC::tG_Status::readG0_Save_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Save_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_Save_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tSTC::tG_Status::readG1_Save_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Save_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_Counting_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_Counting_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tSTC::tG_Status::readG0_Counting_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Counting_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_Counting_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_Counting_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tSTC::tG_Status::readG1_Counting_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Counting_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tSTC::tG_Status::readG0_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Next_Load_Source_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_Next_Load_Source_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_Next_Load_Source_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tSTC::tG_Status::readG1_Next_Load_Source_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Next_Load_Source_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_Stale_Data_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tSTC::tG_Status::readG0_Stale_Data_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Stale_Data_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_Stale_Data_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tSTC::tG_Status::readG1_Stale_Data_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Stale_Data_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_Armed_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfeff) >> 0x8);
}

inline u16 tSTC::tG_Status::readG0_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Armed_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_Armed_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_Armed_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfdff) >> 0x9);
}

inline u16 tSTC::tG_Status::readG1_Armed_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Armed_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_No_Load_Between_Gates_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tSTC::tG_Status::readG0_No_Load_Between_Gates_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_No_Load_Between_Gates_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_No_Load_Between_Gates_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_No_Load_Between_Gates_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline u16 tSTC::tG_Status::readG1_No_Load_Between_Gates_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_No_Load_Between_Gates_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_TC_Error_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tSTC::tG_Status::readG0_TC_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_TC_Error_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_TC_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_TC_Error_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tSTC::tG_Status::readG1_TC_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_TC_Error_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG0_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG0_Gate_Error_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tSTC::tG_Status::readG0_Gate_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Gate_Error_St(s);
}

inline tSTC::tG_Status& tSTC::tG_Status::setG1_Gate_Error_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tG_Status::getG1_Gate_Error_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tSTC::tG_Status::readG1_Gate_Error_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Gate_Error_St(s);
}

inline void tSTC::tG_Status::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tJoint_Status_1::tJoint_Status_1()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tJoint_Status_1::registerMap(void)
{
	return _STC;
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tJoint_Status_1::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tJoint_Status_1::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setG0_Bank_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getG0_Bank_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tSTC::tJoint_Status_1::readG0_Bank_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Bank_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setG1_Bank_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getG1_Bank_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tSTC::tJoint_Status_1::readG1_Bank_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Bank_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setG0_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getG0_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tSTC::tJoint_Status_1::readG0_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setG1_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getG1_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tSTC::tJoint_Status_1::readG1_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAI_Sc_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAI_Sc_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tSTC::tJoint_Status_1::readAI_Sc_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_Sc_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAI_Start_Stop_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAI_Start_Stop_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tSTC::tJoint_Status_1::readAI_Start_Stop_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_Start_Stop_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAO_BC_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAO_BC_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tSTC::tJoint_Status_1::readAO_BC_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_BC_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAO_Start_Stop_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAO_Start_Stop_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tSTC::tJoint_Status_1::readAO_Start_Stop_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_Start_Stop_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAI_SI2_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfcff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAI_SI2_Q_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfcff) >> 0x8);
}

inline u16 tSTC::tJoint_Status_1::readAI_SI2_Q_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SI2_Q_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAI_External_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfbff) | (fieldValue << 0xa));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAI_External_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tSTC::tJoint_Status_1::readAI_External_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_External_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAO_External_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf7ff) | (fieldValue << 0xb));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAO_External_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf7ff) >> 0xb);
}

inline u16 tSTC::tJoint_Status_1::readAO_External_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_External_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setDIO_Serial_IO_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getDIO_Serial_IO_In_Progress_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tSTC::tJoint_Status_1::readDIO_Serial_IO_In_Progress_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getDIO_Serial_IO_In_Progress_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAO_UI2_Gate_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAO_UI2_Gate_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tSTC::tJoint_Status_1::readAO_UI2_Gate_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UI2_Gate_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAO_UC_Q_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAO_UC_Q_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tSTC::tJoint_Status_1::readAO_UC_Q_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_UC_Q_St(s);
}

inline tSTC::tJoint_Status_1& tSTC::tJoint_Status_1::setAI_Last_Shiftin_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_1::getAI_Last_Shiftin_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tSTC::tJoint_Status_1::readAI_Last_Shiftin_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_Last_Shiftin_St(s);
}

inline void tSTC::tJoint_Status_1::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

inline tSTC::tJoint_Status_2::tJoint_Status_2()
{
	_softCopy = 0;
}

inline tSTC* tSTC::tJoint_Status_2::registerMap(void)
{
	return _STC;
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tSTC::tJoint_Status_2::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_STC->getBusSpaceReference(), kOffset + _STC->getAddressOffset(s), s);
}

inline u16 tSTC::tJoint_Status_2::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setG0_Output_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getG0_Output_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tSTC::tJoint_Status_2::readG0_Output_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Output_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setG1_Output_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getG1_Output_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tSTC::tJoint_Status_2::readG1_Output_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Output_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setAO_STOP_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getAO_STOP_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfffb) >> 0x2);
}

inline u16 tSTC::tJoint_Status_2::readAO_STOP_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_STOP_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setAI_SOC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getAI_SOC_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff7) >> 0x3);
}

inline u16 tSTC::tJoint_Status_2::readAI_SOC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_SOC_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setAI_EOC_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffef) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getAI_EOC_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffef) >> 0x4);
}

inline u16 tSTC::tJoint_Status_2::readAI_EOC_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_EOC_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setAO_TMRDACWRs_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffdf) | (fieldValue << 0x5));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getAO_TMRDACWRs_In_Progress_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffdf) >> 0x5);
}

inline u16 tSTC::tJoint_Status_2::readAO_TMRDACWRs_In_Progress_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAO_TMRDACWRs_In_Progress_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setAI_Config_Memory_Empty_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffbf) | (fieldValue << 0x6));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getAI_Config_Memory_Empty_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tSTC::tJoint_Status_2::readAI_Config_Memory_Empty_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_Config_Memory_Empty_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setAI_Scan_In_Progress_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xff7f) | (fieldValue << 0x7));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getAI_Scan_In_Progress_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xff7f) >> 0x7);
}

inline u16 tSTC::tJoint_Status_2::readAI_Scan_In_Progress_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getAI_Scan_In_Progress_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setGeneric_Status(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xf0ff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getGeneric_Status(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xf0ff) >> 0x8);
}

inline u16 tSTC::tJoint_Status_2::readGeneric_Status(nMDBG::tStatus2* s)
{
	refresh(s);
	return getGeneric_Status(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setG0_HW_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getG0_HW_Save_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xefff) >> 0xc);
}

inline u16 tSTC::tJoint_Status_2::readG0_HW_Save_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_HW_Save_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setG1_Hw_Save_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xdfff) | (fieldValue << 0xd));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getG1_Hw_Save_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xdfff) >> 0xd);
}

inline u16 tSTC::tJoint_Status_2::readG1_Hw_Save_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Hw_Save_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setG0_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xbfff) | (fieldValue << 0xe));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getG0_Permanent_Stale_Data_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xbfff) >> 0xe);
}

inline u16 tSTC::tJoint_Status_2::readG0_Permanent_Stale_Data_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG0_Permanent_Stale_Data_St(s);
}

inline tSTC::tJoint_Status_2& tSTC::tJoint_Status_2::setG1_Permanent_Stale_Data_St(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline u16 tSTC::tJoint_Status_2::getG1_Permanent_Stale_Data_St(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x7fff) >> 0xf);
}

inline u16 tSTC::tJoint_Status_2::readG1_Permanent_Stale_Data_St(nMDBG::tStatus2* s)
{
	refresh(s);
	return getG1_Permanent_Stale_Data_St(s);
}

inline void tSTC::tJoint_Status_2::setRegisterMap(tSTC* pSTC)
{
	_STC = pSTC;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

