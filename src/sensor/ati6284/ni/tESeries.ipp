/* ! \file include/edp/ati6284/ni/tESeries.ipp
    * \brief plik nag³ówkowy NI
    * Ostatnia modyfikacja: 04.2006 */
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tESeries_ipp___
#define ___tESeries_ipp___

#ifndef ___tESeries_h___
#include "tESeries.h"
#endif

#include "trace.h"

inline void tESeries::tReg8IODirect16::write(
	tBusSpaceReference addrSpace,
	u32 offset,
	u8 value,
	nMDBG::tStatus2* s)
{
	if (s && s->isFatal()) return;
	addrSpace.write8(offset, u8(value));
}
inline u8 tESeries::tReg8IODirect16::read(
	tBusSpaceReference addrSpace,
	u32 offset,
	nMDBG::tStatus2* s)
{
	u8 value;   if (s && s->isFatal()) return ~0;
	value = (u8)addrSpace.read8(offset);
	return value;
}

inline void tESeries::tReg16IODirect16::write(
	tBusSpaceReference addrSpace,
	u32 offset,
	u16 value,
	nMDBG::tStatus2* s)
{
	if (s && s->isFatal()) return;
	addrSpace.write16(offset, u16(value));
}

inline u16 tESeries::tReg16IODirect16::read(
	tBusSpaceReference addrSpace,
	u32 offset,
	nMDBG::tStatus2* s)
{
	u16 value;   if (s && s->isFatal()) return ~0;
	value = (u16)addrSpace.read16(offset);
	return value;
}

inline tBusSpaceReference tESeries::getBusSpaceReference(void) const
{
	return _addrSpace;
}

inline void tESeries::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
	_addressOffset = value;
}
inline u32  tESeries::getAddressOffset(nMDBG::tStatus2* s)
{
	return _addressOffset;
}
inline void tESeries::flushBus(nMDBG::tStatus2* s)
{

}

inline tESeries::tAIAO_Select::tAIAO_Select()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tAIAO_Select::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tAIAO_Select::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tAIAO_Select& tESeries::tAIAO_Select::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u8 tESeries::tAIAO_Select::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tAIAO_Select::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u8)(0xffffffff);
}

inline void tESeries::tAIAO_Select::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline void tESeries::tAIAO_Select::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), s);
}

inline u8 tESeries::tAIAO_Select::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tESeries::tAIAO_Select& tESeries::tAIAO_Select::setInput(u8 fieldValue, nMDBG::tStatus2* s)
{
	u8 newValue;   newValue = (u8) ((_softCopy & 0xf0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u8 tESeries::tAIAO_Select::getInput(nMDBG::tStatus2*) const
{
	return (u8)((_softCopy & ~0xf0) >> 0x0);
}

inline void tESeries::tAIAO_Select::writeInput(u8 fieldValue, nMDBG::tStatus2* s)
{
	setInput(fieldValue, s);
	flush(s);
}
inline u8 tESeries::tAIAO_Select::readInput(nMDBG::tStatus2* s)
{
	refresh(s);
	return getInput(s);
}

inline tESeries::tAIAO_Select& tESeries::tAIAO_Select::setOutput(u8 fieldValue, nMDBG::tStatus2* s)
{
	u8 newValue;   newValue = (u8) ((_softCopy & 0xf) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u8 tESeries::tAIAO_Select::getOutput(nMDBG::tStatus2*) const
{
	return (u8)((_softCopy & ~0xf) >> 0x4);
}

inline void tESeries::tAIAO_Select::writeOutput(u8 fieldValue, nMDBG::tStatus2* s)
{
	setOutput(fieldValue, s);
	flush(s);
}
inline u8 tESeries::tAIAO_Select::readOutput(nMDBG::tStatus2* s)
{
	refresh(s);
	return getOutput(s);
}

inline void tESeries::tAIAO_Select::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tAIFifoData::tAIFifoData()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tAIFifoData::registerMap(void)
{
	return _ESeries;
}

inline tESeries::tAIFifoData& tESeries::tAIFifoData::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tESeries::tAIFifoData::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tAIFifoData::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), s);
}

inline u16 tESeries::tAIFifoData::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tESeries::tAIFifoData& tESeries::tAIFifoData::setFront(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tESeries::tAIFifoData::getFront(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline u16 tESeries::tAIFifoData::readFront(nMDBG::tStatus2* s)
{
	refresh(s);
	return getFront(s);
}

inline void tESeries::tAIFifoData::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tConfigFifoLow::tConfigFifoLow()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tConfigFifoLow::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tConfigFifoLow::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tConfigFifoLow& tESeries::tConfigFifoLow::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tESeries::tConfigFifoLow::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tConfigFifoLow::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tESeries::tConfigFifoLow::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tESeries::tConfigFifoLow::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tESeries::tConfigFifoLow& tESeries::tConfigFifoLow::setGain(tGain fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff8) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tConfigFifoLow::tGain tESeries::tConfigFifoLow::getGain(nMDBG::tStatus2*) const
{
	return (tGain)((_softCopy & ~0xfff8) >> 0x0);
}

inline void tESeries::tConfigFifoLow::writeGain(tGain fieldValue, nMDBG::tStatus2* s)
{
	setGain(fieldValue, s);
	flush(s);
}
inline tESeries::tConfigFifoLow::tGain tESeries::tConfigFifoLow::readGain(nMDBG::tStatus2* s)
{
	return getGain(s);
}

inline tESeries::tConfigFifoLow& tESeries::tConfigFifoLow::setPolarity(tPolarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tConfigFifoLow::tPolarity tESeries::tConfigFifoLow::getPolarity(nMDBG::tStatus2*) const
{
	return (tPolarity)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tESeries::tConfigFifoLow::writePolarity(tPolarity fieldValue, nMDBG::tStatus2* s)
{
	setPolarity(fieldValue, s);
	flush(s);
}
inline tESeries::tConfigFifoLow::tPolarity tESeries::tConfigFifoLow::readPolarity(nMDBG::tStatus2* s)
{
	return getPolarity(s);
}

inline tESeries::tConfigFifoLow& tESeries::tConfigFifoLow::setDither(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfdff) | (fieldValue << 0x9));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tESeries::tConfigFifoLow::getDither(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xfdff) >> 0x9);
}

inline void tESeries::tConfigFifoLow::writeDither(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setDither(fieldValue, s);
	flush(s);
}
inline tBoolean tESeries::tConfigFifoLow::readDither(nMDBG::tStatus2* s)
{
	return getDither(s);
}

inline tESeries::tConfigFifoLow& tESeries::tConfigFifoLow::setGeneralTrigger(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xefff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tESeries::tConfigFifoLow::getGeneralTrigger(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0xefff) >> 0xc);
}

inline void tESeries::tConfigFifoLow::writeGeneralTrigger(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setGeneralTrigger(fieldValue, s);
	flush(s);
}
inline tBoolean tESeries::tConfigFifoLow::readGeneralTrigger(nMDBG::tStatus2* s)
{
	return getGeneralTrigger(s);
}

inline tESeries::tConfigFifoLow& tESeries::tConfigFifoLow::setLastChannel(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x7fff) | (fieldValue << 0xf));
	setRegister(newValue, s);
	return *this;
}

inline tBoolean tESeries::tConfigFifoLow::getLastChannel(nMDBG::tStatus2*) const
{
	return (tBoolean)((_softCopy & ~0x7fff) >> 0xf);
}

inline void tESeries::tConfigFifoLow::writeLastChannel(tBoolean fieldValue, nMDBG::tStatus2* s)
{
	setLastChannel(fieldValue, s);
	flush(s);
}
inline tBoolean tESeries::tConfigFifoLow::readLastChannel(nMDBG::tStatus2* s)
{
	return getLastChannel(s);
}

inline void tESeries::tConfigFifoLow::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tConfigFifoHigh::tConfigFifoHigh()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tConfigFifoHigh::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tConfigFifoHigh::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tConfigFifoHigh& tESeries::tConfigFifoHigh::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tESeries::tConfigFifoHigh::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tConfigFifoHigh::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tESeries::tConfigFifoHigh::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tESeries::tConfigFifoHigh::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tESeries::tConfigFifoHigh& tESeries::tConfigFifoHigh::setChannel(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tESeries::tConfigFifoHigh::getChannel(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xfff0) >> 0x0);
}

inline void tESeries::tConfigFifoHigh::writeChannel(u16 fieldValue, nMDBG::tStatus2* s)
{
	setChannel(fieldValue, s);
	flush(s);
}
inline u16 tESeries::tConfigFifoHigh::readChannel(nMDBG::tStatus2* s)
{
	return getChannel(s);
}

inline tESeries::tConfigFifoHigh& tESeries::tConfigFifoHigh::setBank(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xffcf) | (fieldValue << 0x4));
	setRegister(newValue, s);
	return *this;
}

inline u16 tESeries::tConfigFifoHigh::getBank(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0xffcf) >> 0x4);
}

inline void tESeries::tConfigFifoHigh::writeBank(u16 fieldValue, nMDBG::tStatus2* s)
{
	setBank(fieldValue, s);
	flush(s);
}
inline u16 tESeries::tConfigFifoHigh::readBank(nMDBG::tStatus2* s)
{
	return getBank(s);
}

inline tESeries::tConfigFifoHigh& tESeries::tConfigFifoHigh::setChannelType(tChannelType fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x8fff) | (fieldValue << 0xc));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tConfigFifoHigh::tChannelType tESeries::tConfigFifoHigh::getChannelType(nMDBG::tStatus2*) const
{
	return (tChannelType)((_softCopy & ~0x8fff) >> 0xc);
}

inline void tESeries::tConfigFifoHigh::writeChannelType(tChannelType fieldValue, nMDBG::tStatus2* s)
{
	setChannelType(fieldValue, s);
	flush(s);
}
inline tESeries::tConfigFifoHigh::tChannelType tESeries::tConfigFifoHigh::readChannelType(nMDBG::tStatus2* s)
{
	return getChannelType(s);
}

inline void tESeries::tConfigFifoHigh::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tAO_Config::tAO_Config()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tAO_Config::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tAO_Config::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tAO_Config& tESeries::tAO_Config::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tESeries::tAO_Config::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tAO_Config::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tESeries::tAO_Config::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tESeries::tAO_Config::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tESeries::tAO_Config& tESeries::tAO_Config::setPolarity(tPolarity fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tAO_Config::tPolarity tESeries::tAO_Config::getPolarity(nMDBG::tStatus2*) const
{
	return (tPolarity)((_softCopy & ~0xfffe) >> 0x0);
}

inline void tESeries::tAO_Config::writePolarity(tPolarity fieldValue, nMDBG::tStatus2* s)
{
	setPolarity(fieldValue, s);
	flush(s);
}
inline tESeries::tAO_Config::tPolarity tESeries::tAO_Config::readPolarity(nMDBG::tStatus2* s)
{
	return getPolarity(s);
}

inline tESeries::tAO_Config& tESeries::tAO_Config::setReglitch(tReglitch fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tAO_Config::tReglitch tESeries::tAO_Config::getReglitch(nMDBG::tStatus2*) const
{
	return (tReglitch)((_softCopy & ~0xfffd) >> 0x1);
}

inline void tESeries::tAO_Config::writeReglitch(tReglitch fieldValue, nMDBG::tStatus2* s)
{
	setReglitch(fieldValue, s);
	flush(s);
}
inline tESeries::tAO_Config::tReglitch tESeries::tAO_Config::readReglitch(nMDBG::tStatus2* s)
{
	return getReglitch(s);
}

inline tESeries::tAO_Config& tESeries::tAO_Config::setReference(tReference fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfffb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tAO_Config::tReference tESeries::tAO_Config::getReference(nMDBG::tStatus2*) const
{
	return (tReference)((_softCopy & ~0xfffb) >> 0x2);
}

inline void tESeries::tAO_Config::writeReference(tReference fieldValue, nMDBG::tStatus2* s)
{
	setReference(fieldValue, s);
	flush(s);
}
inline tESeries::tAO_Config::tReference tESeries::tAO_Config::readReference(nMDBG::tStatus2* s)
{
	return getReference(s);
}

inline tESeries::tAO_Config& tESeries::tAO_Config::setGroundRef(tGroundRef fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfff7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tAO_Config::tGroundRef tESeries::tAO_Config::getGroundRef(nMDBG::tStatus2*) const
{
	return (tGroundRef)((_softCopy & ~0xfff7) >> 0x3);
}

inline void tESeries::tAO_Config::writeGroundRef(tGroundRef fieldValue, nMDBG::tStatus2* s)
{
	setGroundRef(fieldValue, s);
	flush(s);
}
inline tESeries::tAO_Config::tGroundRef tESeries::tAO_Config::readGroundRef(nMDBG::tStatus2* s)
{
	return getGroundRef(s);
}

inline tESeries::tAO_Config& tESeries::tAO_Config::setDACSelect(tDACSelect fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0xfeff) | (fieldValue << 0x8));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tAO_Config::tDACSelect tESeries::tAO_Config::getDACSelect(nMDBG::tStatus2*) const
{
	return (tDACSelect)((_softCopy & ~0xfeff) >> 0x8);
}

inline void tESeries::tAO_Config::writeDACSelect(tDACSelect fieldValue, nMDBG::tStatus2* s)
{
	setDACSelect(fieldValue, s);
	flush(s);
}
inline tESeries::tAO_Config::tDACSelect tESeries::tAO_Config::readDACSelect(nMDBG::tStatus2* s)
{
	return getDACSelect(s);
}

inline void tESeries::tAO_Config::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tDAC0_DirectData::tDAC0_DirectData()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tDAC0_DirectData::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tDAC0_DirectData::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tDAC0_DirectData& tESeries::tDAC0_DirectData::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tESeries::tDAC0_DirectData::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tDAC0_DirectData::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tESeries::tDAC0_DirectData::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tESeries::tDAC0_DirectData::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tESeries::tDAC0_DirectData& tESeries::tDAC0_DirectData::setValue(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tESeries::tDAC0_DirectData::getValue(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tESeries::tDAC0_DirectData::writeValue(u16 fieldValue, nMDBG::tStatus2* s)
{
	setValue(fieldValue, s);
	flush(s);
}
inline u16 tESeries::tDAC0_DirectData::readValue(nMDBG::tStatus2* s)
{
	return getValue(s);
}

inline void tESeries::tDAC0_DirectData::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tDAC1_DirectData::tDAC1_DirectData()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tDAC1_DirectData::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tDAC1_DirectData::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tDAC1_DirectData& tESeries::tDAC1_DirectData::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tESeries::tDAC1_DirectData::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tDAC1_DirectData::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tESeries::tDAC1_DirectData::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tESeries::tDAC1_DirectData::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tESeries::tDAC1_DirectData& tESeries::tDAC1_DirectData::setValue(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tESeries::tDAC1_DirectData::getValue(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tESeries::tDAC1_DirectData::writeValue(u16 fieldValue, nMDBG::tStatus2* s)
{
	setValue(fieldValue, s);
	flush(s);
}
inline u16 tESeries::tDAC1_DirectData::readValue(nMDBG::tStatus2* s)
{
	return getValue(s);
}

inline void tESeries::tDAC1_DirectData::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tAO_FIFOData::tAO_FIFOData()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tAO_FIFOData::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tAO_FIFOData::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tAO_FIFOData& tESeries::tAO_FIFOData::setRegister(u16 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u16 tESeries::tAO_FIFOData::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tAO_FIFOData::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u16)(0xffffffff);
}

inline void tESeries::tAO_FIFOData::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u16 tESeries::tAO_FIFOData::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tESeries::tAO_FIFOData& tESeries::tAO_FIFOData::setValue(u16 fieldValue, nMDBG::tStatus2* s)
{
	u16 newValue;   newValue = (u16) ((_softCopy & 0x0) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u16 tESeries::tAO_FIFOData::getValue(nMDBG::tStatus2*) const
{
	return (u16)((_softCopy & ~0x0) >> 0x0);
}

inline void tESeries::tAO_FIFOData::writeValue(u16 fieldValue, nMDBG::tStatus2* s)
{
	setValue(fieldValue, s);
	flush(s);
}
inline u16 tESeries::tAO_FIFOData::readValue(nMDBG::tStatus2* s)
{
	return getValue(s);
}

inline void tESeries::tAO_FIFOData::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tSerialCommandRegister::tSerialCommandRegister()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tSerialCommandRegister::registerMap(void)
{
	return _ESeries;
}

inline void tESeries::tSerialCommandRegister::flushBus(nMDBG::tStatus2* s)
{
	_ESeries->flushBus(s);
}

inline tESeries::tSerialCommandRegister& tESeries::tSerialCommandRegister::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u8 tESeries::tSerialCommandRegister::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tSerialCommandRegister::flush(nMDBG::tStatus2* s)
{
	tIOStrategy::write(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), _softCopy, s);
	_softCopy &= (u8)(0xffffffff);
}

inline void tESeries::tSerialCommandRegister::writeRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
	_softCopy = fieldValue;
	flush(s);
}

inline u8 tESeries::tSerialCommandRegister::readRegister(nMDBG::tStatus2*) 
{
	return _softCopy;
}


inline tESeries::tSerialCommandRegister& tESeries::tSerialCommandRegister::setSerialClock(tSerialClock fieldValue, nMDBG::tStatus2* s)
{
	u8 newValue;   newValue = (u8) ((_softCopy & 0xfe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tSerialCommandRegister::tSerialClock tESeries::tSerialCommandRegister::getSerialClock(nMDBG::tStatus2*) const
{
	return (tSerialClock)((_softCopy & ~0xfe) >> 0x0);
}

inline void tESeries::tSerialCommandRegister::writeSerialClock(tSerialClock fieldValue, nMDBG::tStatus2* s)
{
	setSerialClock(fieldValue, s);
	flush(s);
}
inline tESeries::tSerialCommandRegister::tSerialClock tESeries::tSerialCommandRegister::readSerialClock(nMDBG::tStatus2* s)
{
	return getSerialClock(s);
}

inline tESeries::tSerialCommandRegister& tESeries::tSerialCommandRegister::setSerialData(u8 fieldValue, nMDBG::tStatus2* s)
{
	u8 newValue;   newValue = (u8) ((_softCopy & 0xfd) | (fieldValue << 0x1));
	setRegister(newValue, s);
	return *this;
}

inline u8 tESeries::tSerialCommandRegister::getSerialData(nMDBG::tStatus2*) const
{
	return (u8)((_softCopy & ~0xfd) >> 0x1);
}

inline void tESeries::tSerialCommandRegister::writeSerialData(u8 fieldValue, nMDBG::tStatus2* s)
{
	setSerialData(fieldValue, s);
	flush(s);
}
inline u8 tESeries::tSerialCommandRegister::readSerialData(nMDBG::tStatus2* s)
{
	return getSerialData(s);
}

inline tESeries::tSerialCommandRegister& tESeries::tSerialCommandRegister::setEEPromChipSelect(tEEPromChipSelect fieldValue, nMDBG::tStatus2* s)
{
	u8 newValue;   newValue = (u8) ((_softCopy & 0xfb) | (fieldValue << 0x2));
	setRegister(newValue, s);
	return *this;
}

inline tESeries::tSerialCommandRegister::tEEPromChipSelect tESeries::tSerialCommandRegister::getEEPromChipSelect(nMDBG::tStatus2*) const
{
	return (tEEPromChipSelect)((_softCopy & ~0xfb) >> 0x2);
}

inline void tESeries::tSerialCommandRegister::writeEEPromChipSelect(tEEPromChipSelect fieldValue, nMDBG::tStatus2* s)
{
	setEEPromChipSelect(fieldValue, s);
	flush(s);
}
inline tESeries::tSerialCommandRegister::tEEPromChipSelect tESeries::tSerialCommandRegister::readEEPromChipSelect(nMDBG::tStatus2* s)
{
	return getEEPromChipSelect(s);
}

inline tESeries::tSerialCommandRegister& tESeries::tSerialCommandRegister::setSerialDacLoadNum(u8 fieldValue, nMDBG::tStatus2* s)
{
	u8 newValue;   newValue = (u8) ((_softCopy & 0xc7) | (fieldValue << 0x3));
	setRegister(newValue, s);
	return *this;
}

inline u8 tESeries::tSerialCommandRegister::getSerialDacLoadNum(nMDBG::tStatus2*) const
{
	return (u8)((_softCopy & ~0xc7) >> 0x3);
}

inline void tESeries::tSerialCommandRegister::writeSerialDacLoadNum(u8 fieldValue, nMDBG::tStatus2* s)
{
	setSerialDacLoadNum(fieldValue, s);
	flush(s);
}
inline u8 tESeries::tSerialCommandRegister::readSerialDacLoadNum(nMDBG::tStatus2* s)
{
	return getSerialDacLoadNum(s);
}

inline void tESeries::tSerialCommandRegister::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

inline tESeries::tSerialStatus::tSerialStatus()
{
	_softCopy = 0;
}

inline tESeries* tESeries::tSerialStatus::registerMap(void)
{
	return _ESeries;
}

inline tESeries::tSerialStatus& tESeries::tSerialStatus::setRegister(u8 fieldValue, nMDBG::tStatus2*)
{
	_softCopy = fieldValue;
	return *this;
}

inline u8 tESeries::tSerialStatus::getRegister(nMDBG::tStatus2*) const
{
	return _softCopy;
}

inline void tESeries::tSerialStatus::refresh(nMDBG::tStatus2* s)
{
	_softCopy = tIOStrategy::read(_ESeries->getBusSpaceReference(), kOffset + _ESeries->getAddressOffset(s), s);
}

inline u8 tESeries::tSerialStatus::readRegister(nMDBG::tStatus2* s) 
{
	refresh(s);
	return _softCopy;
}

inline tESeries::tSerialStatus& tESeries::tSerialStatus::setEEPROMOut(u8 fieldValue, nMDBG::tStatus2* s)
{
	u8 newValue;   newValue = (u8) ((_softCopy & 0xfe) | (fieldValue << 0x0));
	setRegister(newValue, s);
	return *this;
}

inline u8 tESeries::tSerialStatus::getEEPROMOut(nMDBG::tStatus2*) const
{
	return (u8)((_softCopy & ~0xfe) >> 0x0);
}

inline u8 tESeries::tSerialStatus::readEEPROMOut(nMDBG::tStatus2* s)
{
	refresh(s);
	return getEEPROMOut(s);
}

inline void tESeries::tSerialStatus::setRegisterMap(tESeries* pESeries)
{
	_ESeries = pESeries;
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

