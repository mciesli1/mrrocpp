// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ati3084.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mrrocpp {
namespace edp {
namespace sensor {

namespace {

const ::google::protobuf::Descriptor* GenForceReading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenForceReading_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBiasRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBiasRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBiasReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBiasReply_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Ati3084_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ati3084_2eproto() {
  protobuf_AddDesc_ati3084_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ati3084.proto");
  GOOGLE_CHECK(file != NULL);
  GenForceReading_descriptor_ = file->message_type(0);
  static const int GenForceReading_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, fz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, tz_),
  };
  GenForceReading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenForceReading_descriptor_,
      GenForceReading::default_instance_,
      GenForceReading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenForceReading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenForceReading));
  SendBiasRequest_descriptor_ = file->message_type(1);
  static const int SendBiasRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBiasRequest, dummy_),
  };
  SendBiasRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBiasRequest_descriptor_,
      SendBiasRequest::default_instance_,
      SendBiasRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBiasRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBiasRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBiasRequest));
  SendBiasReply_descriptor_ = file->message_type(2);
  static const int SendBiasReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBiasReply, dummy_),
  };
  SendBiasReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBiasReply_descriptor_,
      SendBiasReply::default_instance_,
      SendBiasReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBiasReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBiasReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBiasReply));
  Ati3084_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ati3084_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenForceReading_descriptor_, &GenForceReading::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBiasRequest_descriptor_, &SendBiasRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBiasReply_descriptor_, &SendBiasReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ati3084_2eproto() {
  delete GenForceReading::default_instance_;
  delete GenForceReading_reflection_;
  delete SendBiasRequest::default_instance_;
  delete SendBiasRequest_reflection_;
  delete SendBiasReply::default_instance_;
  delete SendBiasReply_reflection_;
}

void protobuf_AddDesc_ati3084_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::kiper::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rati3084.proto\022\022mrrocpp.edp.sensor\032\014Com"
    "mon.proto\"Y\n\017GenForceReading\022\n\n\002fx\030\001 \002(\021"
    "\022\n\n\002fy\030\002 \002(\021\022\n\n\002fz\030\003 \002(\021\022\n\n\002tx\030\004 \002(\021\022\n\n\002"
    "ty\030\005 \002(\021\022\n\n\002tz\030\006 \002(\021\" \n\017SendBiasRequest\022"
    "\r\n\005dummy\030\001 \001(\010\"\036\n\rSendBiasReply\022\r\n\005dummy"
    "\030\001 \001(\0102\224\001\n\007Ati3084\022J\n\023GetGenGForceReadin"
    "g\022\016.kiper.VoidMsg\032#.mrrocpp.edp.sensor.G"
    "enForceReading\022=\n\010SendBias\022\016.kiper.VoidM"
    "sg\032!.mrrocpp.edp.sensor.SendBiasReply", 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ati3084.proto", &protobuf_RegisterTypes);
  GenForceReading::default_instance_ = new GenForceReading();
  SendBiasRequest::default_instance_ = new SendBiasRequest();
  SendBiasReply::default_instance_ = new SendBiasReply();
  GenForceReading::default_instance_->InitAsDefaultInstance();
  SendBiasRequest::default_instance_->InitAsDefaultInstance();
  SendBiasReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ati3084_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ati3084_2eproto {
  StaticDescriptorInitializer_ati3084_2eproto() {
    protobuf_AddDesc_ati3084_2eproto();
  }
} static_descriptor_initializer_ati3084_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GenForceReading::kFxFieldNumber;
const int GenForceReading::kFyFieldNumber;
const int GenForceReading::kFzFieldNumber;
const int GenForceReading::kTxFieldNumber;
const int GenForceReading::kTyFieldNumber;
const int GenForceReading::kTzFieldNumber;
#endif  // !_MSC_VER

GenForceReading::GenForceReading()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenForceReading::InitAsDefaultInstance() {
}

GenForceReading::GenForceReading(const GenForceReading& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenForceReading::SharedCtor() {
  _cached_size_ = 0;
  fx_ = 0;
  fy_ = 0;
  fz_ = 0;
  tx_ = 0;
  ty_ = 0;
  tz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenForceReading::~GenForceReading() {
  SharedDtor();
}

void GenForceReading::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenForceReading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenForceReading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenForceReading_descriptor_;
}

const GenForceReading& GenForceReading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ati3084_2eproto();  return *default_instance_;
}

GenForceReading* GenForceReading::default_instance_ = NULL;

GenForceReading* GenForceReading::New() const {
  return new GenForceReading;
}

void GenForceReading::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fx_ = 0;
    fy_ = 0;
    fz_ = 0;
    tx_ = 0;
    ty_ = 0;
    tz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenForceReading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 fx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fy;
        break;
      }
      
      // required sint32 fy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fy_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fz;
        break;
      }
      
      // required sint32 fz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fz_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tx;
        break;
      }
      
      // required sint32 tx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tx_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ty;
        break;
      }
      
      // required sint32 ty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ty_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tz;
        break;
      }
      
      // required sint32 tz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tz_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenForceReading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 fx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->fx(), output);
  }
  
  // required sint32 fy = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->fy(), output);
  }
  
  // required sint32 fz = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->fz(), output);
  }
  
  // required sint32 tx = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->tx(), output);
  }
  
  // required sint32 ty = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->ty(), output);
  }
  
  // required sint32 tz = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->tz(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenForceReading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 fx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->fx(), target);
  }
  
  // required sint32 fy = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->fy(), target);
  }
  
  // required sint32 fz = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->fz(), target);
  }
  
  // required sint32 tx = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->tx(), target);
  }
  
  // required sint32 ty = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->ty(), target);
  }
  
  // required sint32 tz = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->tz(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenForceReading::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 fx = 1;
    if (has_fx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fx());
    }
    
    // required sint32 fy = 2;
    if (has_fy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fy());
    }
    
    // required sint32 fz = 3;
    if (has_fz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fz());
    }
    
    // required sint32 tx = 4;
    if (has_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tx());
    }
    
    // required sint32 ty = 5;
    if (has_ty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ty());
    }
    
    // required sint32 tz = 6;
    if (has_tz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tz());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenForceReading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenForceReading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenForceReading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenForceReading::MergeFrom(const GenForceReading& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fx(from.fx());
    }
    if (from._has_bit(1)) {
      set_fy(from.fy());
    }
    if (from._has_bit(2)) {
      set_fz(from.fz());
    }
    if (from._has_bit(3)) {
      set_tx(from.tx());
    }
    if (from._has_bit(4)) {
      set_ty(from.ty());
    }
    if (from._has_bit(5)) {
      set_tz(from.tz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenForceReading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenForceReading::CopyFrom(const GenForceReading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenForceReading::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void GenForceReading::Swap(GenForceReading* other) {
  if (other != this) {
    std::swap(fx_, other->fx_);
    std::swap(fy_, other->fy_);
    std::swap(fz_, other->fz_);
    std::swap(tx_, other->tx_);
    std::swap(ty_, other->ty_);
    std::swap(tz_, other->tz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenForceReading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenForceReading_descriptor_;
  metadata.reflection = GenForceReading_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBiasRequest::kDummyFieldNumber;
#endif  // !_MSC_VER

SendBiasRequest::SendBiasRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendBiasRequest::InitAsDefaultInstance() {
}

SendBiasRequest::SendBiasRequest(const SendBiasRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendBiasRequest::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBiasRequest::~SendBiasRequest() {
  SharedDtor();
}

void SendBiasRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBiasRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBiasRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBiasRequest_descriptor_;
}

const SendBiasRequest& SendBiasRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ati3084_2eproto();  return *default_instance_;
}

SendBiasRequest* SendBiasRequest::default_instance_ = NULL;

SendBiasRequest* SendBiasRequest::New() const {
  return new SendBiasRequest;
}

void SendBiasRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBiasRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendBiasRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendBiasRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendBiasRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool dummy = 1;
    if (has_dummy()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBiasRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBiasRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBiasRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBiasRequest::MergeFrom(const SendBiasRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBiasRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBiasRequest::CopyFrom(const SendBiasRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBiasRequest::IsInitialized() const {
  
  return true;
}

void SendBiasRequest::Swap(SendBiasRequest* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBiasRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBiasRequest_descriptor_;
  metadata.reflection = SendBiasRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBiasReply::kDummyFieldNumber;
#endif  // !_MSC_VER

SendBiasReply::SendBiasReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendBiasReply::InitAsDefaultInstance() {
}

SendBiasReply::SendBiasReply(const SendBiasReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendBiasReply::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBiasReply::~SendBiasReply() {
  SharedDtor();
}

void SendBiasReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBiasReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBiasReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBiasReply_descriptor_;
}

const SendBiasReply& SendBiasReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ati3084_2eproto();  return *default_instance_;
}

SendBiasReply* SendBiasReply::default_instance_ = NULL;

SendBiasReply* SendBiasReply::New() const {
  return new SendBiasReply;
}

void SendBiasReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBiasReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dummy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendBiasReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool dummy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendBiasReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool dummy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendBiasReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool dummy = 1;
    if (has_dummy()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBiasReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBiasReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBiasReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBiasReply::MergeFrom(const SendBiasReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBiasReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBiasReply::CopyFrom(const SendBiasReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBiasReply::IsInitialized() const {
  
  return true;
}

void SendBiasReply::Swap(SendBiasReply* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBiasReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBiasReply_descriptor_;
  metadata.reflection = SendBiasReply_reflection_;
  return metadata;
}


// ===================================================================

Ati3084::~Ati3084() {}

const ::google::protobuf::ServiceDescriptor* Ati3084::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ati3084_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Ati3084::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ati3084_descriptor_;
}

void Ati3084::GetGenGForceReading(::google::protobuf::RpcController* controller,
                         const ::kiper::VoidMsg*,
                         ::mrrocpp::edp::sensor::GenForceReading*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGenGForceReading() not implemented.");
  done->Run();
}

void Ati3084::SendBias(::google::protobuf::RpcController* controller,
                         const ::kiper::VoidMsg*,
                         ::mrrocpp::edp::sensor::SendBiasReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendBias() not implemented.");
  done->Run();
}

void Ati3084::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Ati3084_descriptor_);
  switch(method->index()) {
    case 0:
      GetGenGForceReading(controller,
             ::google::protobuf::down_cast<const ::kiper::VoidMsg*>(request),
             ::google::protobuf::down_cast< ::mrrocpp::edp::sensor::GenForceReading*>(response),
             done);
      break;
    case 1:
      SendBias(controller,
             ::google::protobuf::down_cast<const ::kiper::VoidMsg*>(request),
             ::google::protobuf::down_cast< ::mrrocpp::edp::sensor::SendBiasReply*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Ati3084::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::kiper::VoidMsg::default_instance();
    case 1:
      return ::kiper::VoidMsg::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Ati3084::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::mrrocpp::edp::sensor::GenForceReading::default_instance();
    case 1:
      return ::mrrocpp::edp::sensor::SendBiasReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

Ati3084_Stub::Ati3084_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Ati3084_Stub::Ati3084_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Ati3084_Stub::~Ati3084_Stub() {
  if (owns_channel_) delete channel_;
}

void Ati3084_Stub::GetGenGForceReading(::google::protobuf::RpcController* controller,
                              const ::kiper::VoidMsg* request,
                              ::mrrocpp::edp::sensor::GenForceReading* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Ati3084_Stub::SendBias(::google::protobuf::RpcController* controller,
                              const ::kiper::VoidMsg* request,
                              ::mrrocpp::edp::sensor::SendBiasReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor
}  // namespace edp
}  // namespace mrrocpp

// @@protoc_insertion_point(global_scope)
